import React from 'react';
import { Fragment } from '../fragments';
import { DocumentNode } from 'graphql';
type PropType = {
    /**
     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition
     */
    fragments?: (string | Fragment)[];
    /**
     * List of root paths for the picker
     */
    rootPaths?: string[];
    onOpenItem?: (path: string, open: boolean) => void;
    onSelectItem?: (path: string, selected: boolean, multiple: boolean) => void;
    /**
     * List of open folders in controlled mode
     */
    openPaths?: string[];
    /**
     * List of selected path in controlled mode
     */
    selectedPaths?: string[];
    /**
     * Preselected items path (uncontrolled mode)
     */
    defaultSelectedPaths?: string[];
    /**
     * Callback when the selection has changed
     */
    onSelectionChange?: (paths: string[]) => void;
    /**
     * List of folder paths that are open by default (uncontrolled mode)
     */
    defaultOpenPaths?: string[];
    /**
     * List of node types that can be "opened" (folders)
     */
    openableTypes?: string[];
    /**
     * List of node types that can be "selected" (items)
     */
    selectableTypes?: string[];
    onLoading: (l: boolean) => void;
    /**
     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs
     */
    queryVariables?: {
        [key: string]: any;
    };
    hideRoot?: boolean;
    /**
     * Optional function which receives refetch function of the Query component when the component is strapped
     */
    setRefetch: (p: any) => void;
    children: (p: any) => React.ReactElement;
};
type StateType = {
    isOpenControlled?: boolean;
    isSelectControlled?: boolean;
    openPaths?: string[];
    selectedPaths?: string[];
};
export declare class Picker extends React.Component<PropType, StateType> {
    query: DocumentNode;
    eventsHandlers: {
        onOpenItem?: (path: string, open: boolean) => void;
        onSelectItem?: (path: string, selected: boolean, multiple: boolean) => void;
    };
    previousEntries: any;
    constructor(props: PropType);
    static getDerivedStateFromProps(nextProps: PropType, prevState: StateType): StateType;
    getVariables(selectedPaths: string[], openPaths: string[]): {
        rootPaths: string[];
        types: string[];
        selectable: string[];
        openable: string[];
        openPaths: string[];
    };
    getPickerEntries(data: any, selectedPaths: string[], openPaths: string[]): any[];
    addPathToOpenPath(pathsToOpen: string[], rootPaths: string[], openPaths: string[]): string[];
    openPaths(paths: string[]): void;
    render(): React.JSX.Element;
}
export {};
