import { QueryHookOptions } from '@apollo/client';
import { Fragment } from '~/fragments';
export type UseTreeEntriesArgs = Partial<{
    fragments: (string | Fragment)[];
    rootPaths: string[];
    openPaths: string[];
    selectedPaths: string[];
    openableTypes: string[];
    selectableTypes: string[];
    recursionTypesFilter: object;
    queryVariables: {
        [key: string]: any;
    };
    hideRoot: boolean;
    sortBy: string;
}>;
export declare const useTreeEntries: ({ fragments, rootPaths, openPaths, selectedPaths, openableTypes, selectableTypes, recursionTypesFilter, queryVariables, hideRoot, sortBy }: UseTreeEntriesArgs, queryOptions: QueryHookOptions) => {
    client: import("@apollo/client").ApolloClient<any>;
    observable: import("@apollo/client").ObservableQuery<any, import("@apollo/client").OperationVariables>;
    previousData?: any;
    error?: import("@apollo/client").ApolloError;
    loading: boolean;
    networkStatus: import("@apollo/client").NetworkStatus;
    called: boolean;
    variables: import("@apollo/client").OperationVariables;
    startPolling: (pollInterval: number) => void;
    stopPolling: () => void;
    subscribeToMore: <TSubscriptionData = any, TSubscriptionVariables extends import("@apollo/client").OperationVariables = import("@apollo/client").OperationVariables>(options: import("@apollo/client").SubscribeToMoreOptions<any, TSubscriptionVariables, TSubscriptionData>) => () => void;
    updateQuery: <TVars extends import("@apollo/client").OperationVariables = import("@apollo/client").OperationVariables>(mapFn: (previousQueryResult: any, options: Pick<import("@apollo/client").WatchQueryOptions<TVars, any>, "variables">) => any) => void;
    refetch: (variables?: Partial<import("@apollo/client").OperationVariables>) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    reobserve: (newOptions?: Partial<import("@apollo/client").WatchQueryOptions<import("@apollo/client").OperationVariables, any>>, newNetworkStatus?: import("@apollo/client").NetworkStatus) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    fetchMore: <TFetchData = any, TFetchVars extends import("@apollo/client").OperationVariables = import("@apollo/client").OperationVariables>(fetchMoreOptions: import("@apollo/client").FetchMoreQueryOptions<TFetchVars, TFetchData> & {
        updateQuery?: (previousQueryResult: any, options: {
            fetchMoreResult: TFetchData;
            variables: TFetchVars;
        }) => any;
    }) => Promise<import("@apollo/client").ApolloQueryResult<TFetchData>>;
    treeEntries: any[];
};
