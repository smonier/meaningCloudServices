import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["data"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import { useQuery } from '@apollo/client';
import { replaceFragmentsInDocument } from "../../fragments/fragments.utils";
import { TREE_QUERY } from "./useTreeEntries.gql-queries";
export var useTreeEntries = function useTreeEntries(_ref, queryOptions) {
  var fragments = _ref.fragments,
    rootPaths = _ref.rootPaths,
    openPaths = _ref.openPaths,
    selectedPaths = _ref.selectedPaths,
    openableTypes = _ref.openableTypes,
    selectableTypes = _ref.selectableTypes,
    recursionTypesFilter = _ref.recursionTypesFilter,
    queryVariables = _ref.queryVariables,
    hideRoot = _ref.hideRoot,
    sortBy = _ref.sortBy;
  var query = replaceFragmentsInDocument(TREE_QUERY, fragments);
  var getTreeEntries = function getTreeEntries(data) {
    var treeEntries = [];
    var nodesById = {};
    var jcr = data ? data.jcr : {};
    var addNode = function addNode(node, depth, index) {
      var selected = false;
      if (node.selectable) {
        selected = selectedPaths.indexOf(node.path) !== -1;
      }
      var treeEntry = {
        name: node.name,
        path: node.path,
        open: node.openable && openPaths.indexOf(node.path) !== -1,
        selected: selected,
        openable: node.openable,
        selectable: node.selectable,
        depth: depth,
        prefix: '&nbsp;'.repeat(depth * 3),
        node: node,
        hidden: false,
        hasChildren: node.children.pageInfo.nodesCount > 0
      };
      treeEntries.splice(index, 0, treeEntry);
      nodesById[node.uuid] = treeEntry;
      return treeEntry;
    };
    if (jcr) {
      if (jcr.rootNodes) {
        jcr.rootNodes.forEach(function (rootNode) {
          var root = addNode(rootNode, 0, 0);
          root.hidden = hideRoot;
        });
      }
      if (jcr.openNodes) {
        _toConsumableArray(jcr.openNodes).sort(function (a, b) {
          return a.path.localeCompare(b.path);
        }).forEach(function (node) {
          var parent = nodesById[node.uuid];
          if (parent) {
            var parentIndex = treeEntries.indexOf(parent);
            _toConsumableArray(node.children.nodes).reverse().forEach(function (child) {
              addNode(child, parent.depth + 1, parentIndex + 1);
            });
          }
        });
      }
    }
    return treeEntries.filter(function (treeNode) {
      return !treeNode.hidden;
    });
  };
  var vars = _objectSpread({
    rootPaths: rootPaths,
    types: Array.from(new Set([].concat(_toConsumableArray(openableTypes || []), _toConsumableArray(selectableTypes || [])))),
    recursionTypesFilter: recursionTypesFilter || {
      types: 'nt:base',
      multi: 'NONE'
    },
    selectable: selectableTypes,
    openable: openableTypes,
    openPaths: openPaths,
    sortBy: sortBy
  }, queryVariables);
  var _useQuery = useQuery(query, _objectSpread(_objectSpread({}, queryOptions), {}, {
      variables: vars
    })),
    data = _useQuery.data,
    others = _objectWithoutProperties(_useQuery, _excluded);
  return _objectSpread({
    treeEntries: getTreeEntries(data)
  }, others);
};
//# sourceMappingURL=useTreeEntries.js.map
