import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
import gql from 'graphql-tag';
import { nodeCacheRequiredFields } from "../../fragments/PredefinedFragments";
export var TREE_QUERY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!, $recursionTypesFilter: InputNodeTypesInput, $sortBy: InputFieldSorterInput, $fieldGrouping: InputFieldGroupingInput) {\n        jcr {\n            rootNodes:nodesByPath(paths: $rootPaths) {\n                name\n                children: descendants(typesFilter:{types: $types}, recursionTypesFilter: $recursionTypesFilter, limit:1) {\n                    pageInfo {\n                        nodesCount\n                    }\n                }\n                selectable : isNodeType(type: {types:$selectable})\n                openable : isNodeType(type: {types:$openable})\n                ... NodeCacheRequiredFields\n                ... node\n            },\n            openNodes:nodesByPath(paths: $openPaths) {\n                ... NodeCacheRequiredFields\n                children:descendants(typesFilter:{types: $types}, recursionTypesFilter: $recursionTypesFilter, fieldSorter: $sortBy, fieldGrouping: $fieldGrouping) {\n                    nodes {\n                        name\n                        children: descendants(typesFilter:{types: $types}, recursionTypesFilter: $recursionTypesFilter, limit:1) {\n                            pageInfo {\n                                nodesCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... NodeCacheRequiredFields\n                        ... node\n                    }\n                }\n            }\n        }\n    }\n", ""])), nodeCacheRequiredFields.gql);
//# sourceMappingURL=useTreeEntries.gql-queries.js.map
