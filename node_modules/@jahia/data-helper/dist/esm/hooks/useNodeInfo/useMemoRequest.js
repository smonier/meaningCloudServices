import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { validOptions } from "./useNodeInfo.gql-queries";
import { useRef } from 'react';
import deepEquals from 'fast-deep-equal';
var clean = function clean(obj) {
  return obj && Object.fromEntries(Object.entries(obj).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      v = _ref2[1];
    return v !== null && v !== undefined;
  }));
};
var cleanVariables = function cleanVariables(obj) {
  return obj && Object.fromEntries(Object.entries(obj).filter(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      v = _ref4[1];
    return v !== null && v !== undefined;
  }));
};
var cleanOptions = function cleanOptions(obj) {
  return obj && Object.fromEntries(Object.entries(obj).filter(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      k = _ref6[0],
      v = _ref6[1];
    return v !== null && v !== undefined && validOptions.indexOf(k) !== -1;
  }));
};
export function useMemoRequest(variables, queryOptions, options, setResult) {
  variables = cleanVariables(variables);
  queryOptions = clean(queryOptions);
  options = cleanOptions(options);
  var requestValue = {
    variables: variables,
    queryOptions: queryOptions,
    options: options,
    setResult: setResult
  };
  var requestRef = useRef(requestValue);
  if (!deepEquals(variables, requestRef.current.variables) || !deepEquals(queryOptions, requestRef.current.queryOptions) || !deepEquals(options, requestRef.current.options)) {
    requestRef.current = requestValue;
  }
  return [requestRef.current, requestRef.current === requestValue];
}
//# sourceMappingURL=useMemoRequest.js.map
