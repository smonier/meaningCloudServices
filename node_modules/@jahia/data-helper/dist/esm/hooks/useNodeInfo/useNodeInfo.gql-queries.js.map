{"version":3,"names":["gql","aggregatedPublicationInfo","aggregatedPublicationInfoWithExistInLive","childNodeTypes","contentRestrictions","displayableNode","displayName","getProperties","installedModules","lockInfo","mimeTypes","nodeCacheRequiredFields","operationSupport","parentNode","primaryNodeType","replaceFragmentsInDocument","siteLanguages","subNodesCount","getPermissionFragment","getSitePermissionFragment","getNodeTypeFragment","getBaseQueryAndVariables","variables","paths","baseQuery","_templateObject","_taggedTemplateLiteral","generatedVariables","skip","uuid","length","_templateObject2","uuids","_templateObject3","_templateObject4","path","validOptions","getQuery","schemaResult","options","arguments","undefined","fragments","_getBaseQueryAndVaria","getDisplayName","push","language","Error","getPrimaryNodeType","displayLanguage","displayLanguageSet","getParent","getAggregatedPublicationInfo","supportsExistsInLive","__type","fields","find","field","name","aggregatedPublicationInfoSubNodes","Boolean","subNodes","aggregatedPublicationInfoIncludeReference","reference","getOperationSupport","getPermissions","forEach","_getPermissionFragmen","fragment","fragmentVariables","Object","assign","getSitePermissions","_getSitePermissionFra","getIsNodeTypes","_getNodeTypeFragment","getPropertiesNames","getSiteInstalledModules","getSiteLanguages","getDisplayableNodePath","getLockInfo","getChildNodeTypes","getContributeTypesRestrictions","getSubNodesCount","subNodesCountTypes","types","getMimeType","query"],"sources":["useNodeInfo.gql-queries.ts"],"sourcesContent":["import gql from 'graphql-tag';\nimport {\n    aggregatedPublicationInfo,\n    aggregatedPublicationInfoWithExistInLive,\n    childNodeTypes,\n    contentRestrictions,\n    displayableNode,\n    displayName,\n    getProperties,\n    installedModules,\n    lockInfo,\n    mimeTypes,\n    nodeCacheRequiredFields,\n    operationSupport,\n    parentNode,\n    primaryNodeType,\n    replaceFragmentsInDocument,\n    siteLanguages,\n    subNodesCount\n} from '../../fragments';\nimport {getPermissionFragment, getSitePermissionFragment} from '../../fragments/getPermissionFragment';\nimport {getNodeTypeFragment} from '../../fragments/getIsNodeTypeFragment';\nimport {DocumentNode} from 'graphql';\n\nconst getBaseQueryAndVariables = (variables: {[key:string]: any}): {\n    baseQuery: DocumentNode,\n    generatedVariables:{[key:string]: unknown},\n    skip: boolean\n} => {\n    if (variables.paths) {\n        return {\n            baseQuery: gql`\n                query NodesByPathInfoQuery($paths:[String!]!) {\n                    jcr {\n                        nodesByPath(paths:$paths) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ${nodeCacheRequiredFields.gql}\n            `,\n            generatedVariables: {\n                paths: variables.paths\n            },\n            skip: false\n        };\n    }\n\n    if (variables.uuid && variables.uuid.length > 0) {\n        return {\n            baseQuery: gql`\n                query NodeByUuidInfoQuery($uuid:String!) {\n                    jcr {\n                        nodeById(uuid:$uuid) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ${nodeCacheRequiredFields.gql}\n            `,\n            generatedVariables: {\n                uuid: variables.uuid\n            },\n            skip: false\n        };\n    }\n\n    if (variables.uuids) {\n        return {\n            baseQuery: gql`\n                query NodesByUuidInfoQuery($uuids:[String!]!) {\n                    jcr {\n                        nodesById(uuids:$uuids) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ${nodeCacheRequiredFields.gql}\n            `,\n            generatedVariables: {\n                uuids: variables.uuids\n            },\n            skip: false\n        };\n    }\n\n    return {\n        baseQuery: gql`\n            query NodeByPathInfoQuery($path:String!) {\n                jcr {\n                    nodeByPath(path:$path) {\n                        name\n                        ...node\n                        ...NodeCacheRequiredFields\n                    }\n                }\n            }\n            ${nodeCacheRequiredFields.gql}\n        `,\n        generatedVariables: {\n            path: variables.path\n        },\n        skip: !variables.path || variables.path.length === 0\n    };\n};\n\nexport type NodeInfoOptions = Partial<{\n    getDisplayName: boolean,\n    getPrimaryNodeType: boolean,\n    getParent: boolean,\n    getAggregatedPublicationInfo: {\n        subNodes: boolean, reference: boolean\n    },\n    getOperationSupport: boolean,\n    getPermissions: string[],\n    getSitePermissions: string[],\n    getIsNodeTypes: string[],\n    getProperties: string[],\n    getSiteInstalledModules: boolean,\n    getSiteLanguages: boolean,\n    getDisplayableNodePath: boolean,\n    getLockInfo: boolean,\n    getChildNodeTypes: boolean,\n    getContributeTypesRestrictions: boolean,\n    getSubNodesCount: {\n        types?: string[]\n    },\n    getMimeType: boolean,\n}>;\n\nexport const validOptions = [\n    'getDisplayName',\n    'getPrimaryNodeType',\n    'getParent',\n    'getAggregatedPublicationInfo',\n    'getOperationSupport',\n    'getPermissions',\n    'getSitePermissions',\n    'getIsNodeTypes',\n    'getProperties',\n    'getSiteInstalledModules',\n    'getSiteLanguages',\n    'getDisplayableNodePath',\n    'getLockInfo',\n    'getChildNodeTypes',\n    'getContributeTypesRestrictions',\n    'getSubNodesCount',\n    'getMimeType'\n];\n\nexport const getQuery = (variables: {[key:string]: any}, schemaResult: any, options: NodeInfoOptions = {}) => {\n    const fragments = [];\n\n    const {baseQuery, generatedVariables, skip} = getBaseQueryAndVariables(variables);\n\n    if (!skip) {\n        if (options.getDisplayName) {\n            fragments.push(displayName);\n            if (!variables.language) {\n                throw Error('language is required');\n            }\n\n            generatedVariables.language = variables.language;\n        }\n\n        if (options.getPrimaryNodeType) {\n            fragments.push(primaryNodeType);\n            if (variables.displayLanguage) {\n                generatedVariables.displayLanguageSet = true;\n                generatedVariables.displayLanguage = variables.displayLanguage;\n            } else {\n                generatedVariables.displayLanguageSet = false;\n                generatedVariables.displayLanguage = '';\n            }\n        }\n\n        if (options.getParent) {\n            fragments.push(parentNode);\n        }\n\n        if (options.getAggregatedPublicationInfo) {\n            const supportsExistsInLive = schemaResult && schemaResult.__type && schemaResult.__type.fields && schemaResult.__type.fields.find((field: any) => field.name === 'existsInLive') !== undefined;\n            if (supportsExistsInLive) {\n                fragments.push(aggregatedPublicationInfoWithExistInLive);\n            } else {\n                fragments.push(aggregatedPublicationInfo);\n            }\n\n            if (!variables.language) {\n                throw Error('language is required');\n            }\n\n            generatedVariables.language = variables.language;\n            generatedVariables.aggregatedPublicationInfoSubNodes = Boolean(options.getAggregatedPublicationInfo.subNodes);\n            generatedVariables.aggregatedPublicationInfoIncludeReference = Boolean(options.getAggregatedPublicationInfo.reference);\n        }\n\n        if (options.getOperationSupport) {\n            fragments.push(operationSupport);\n        }\n\n        if (options.getPermissions) {\n            options.getPermissions.forEach(name => {\n                const {fragment, variables: fragmentVariables} = getPermissionFragment(name);\n                fragments.push(fragment);\n                Object.assign(generatedVariables, fragmentVariables);\n            });\n        }\n\n        if (options.getSitePermissions) {\n            options.getSitePermissions.forEach(name => {\n                const {fragment, variables: fragmentVariables} = getSitePermissionFragment(name);\n                fragments.push(fragment);\n                Object.assign(generatedVariables, fragmentVariables);\n            });\n        }\n\n        if (options.getIsNodeTypes) {\n            options.getIsNodeTypes.forEach(name => {\n                const {fragment, variables: fragmentVariables} = getNodeTypeFragment(name);\n                fragments.push(fragment);\n                Object.assign(generatedVariables, fragmentVariables);\n            });\n        }\n\n        if (options.getProperties) {\n            fragments.push(getProperties);\n            generatedVariables.getPropertiesNames = options.getProperties;\n\n            if (!variables.language) {\n                throw Error('language is required');\n            }\n\n            generatedVariables.language = variables.language;\n        }\n\n        if (options.getSiteInstalledModules) {\n            fragments.push(installedModules);\n        }\n\n        if (options.getSiteLanguages) {\n            fragments.push(siteLanguages);\n        }\n\n        if (options.getDisplayableNodePath) {\n            fragments.push(displayableNode);\n        }\n\n        if (options.getLockInfo) {\n            fragments.push(lockInfo);\n        }\n\n        if (options.getChildNodeTypes) {\n            fragments.push(childNodeTypes);\n        }\n\n        if (options.getContributeTypesRestrictions) {\n            fragments.push(contentRestrictions);\n        }\n\n        if (options.getSubNodesCount) {\n            fragments.push(subNodesCount);\n            generatedVariables.subNodesCountTypes = options.getSubNodesCount.types ? options.getSubNodesCount.types : ['nt:base'];\n        }\n\n        if (options.getMimeType) {\n            fragments.push(mimeTypes);\n        }\n    }\n\n    return {\n        query: replaceFragmentsInDocument(baseQuery, fragments),\n        generatedVariables,\n        skip\n    };\n};\n"],"mappings":"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"}