{"version":3,"names":["useEffect","useState","useApolloClient","getQuery","getEncodedPermissionName","getEncodedNodeTypeName","SCHEMA_FIELDS_QUERY","isSubset","merge","useMemoRequest","deepEquals","queue","schemaResult","timeout","observedQueries","scheduleQueue","client","window","setTimeout","timeoutHandler","clearTimeout","mergedQueue","forEach","request","toInsert","variables","queryOptions","options","originals","mergeable","find","q","JSON","stringify","push","_objectSpread","obs","unsubscribe","mergedRequest","_getQuery","query","generatedVariables","skip","setResult","loading","watchedQuery","watchQuery","errorPolicy","subscribe","_ref","data","others","_objectWithoutProperties","_excluded","result","getResult","refetch","refetchQueries","include","useNodeInfo","_useState","_useState2","_slicedToArray","type","then","_ref2","_useMemoRequest","_useMemoRequest2","currentRequest","queryHasChanged","splice","indexOf","fetchPolicy","infoQuery","res","readQuery","node","jcr","nodeByPath","nodeById","nodes","nodesByPath","nodesById","decodeResult","map","n","nodeOrig","site","getPermissions","name","getSitePermissions","getIsNodeTypes","getMimeType","resourceChildren","mimeType","length","value"],"sources":["useNodeInfo.ts"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {ApolloClient, ApolloError, NetworkStatus, useApolloClient, WatchQueryOptions} from '@apollo/client';\nimport {getQuery, NodeInfoOptions} from './useNodeInfo.gql-queries';\nimport {getEncodedPermissionName} from '../../fragments/getPermissionFragment';\nimport {getEncodedNodeTypeName} from '../../fragments/getIsNodeTypeFragment';\nimport {SCHEMA_FIELDS_QUERY} from '../useSchemaFields/useSchemaFields.gql-queries';\nimport {isSubset, merge} from './useNodeInfo.utils';\nimport {useMemoRequest} from './useMemoRequest';\nimport deepEquals from 'fast-deep-equal';\nimport {DocumentNode, GraphQLError} from 'graphql';\n\nexport type Request = {\n    variables:{[key:string]: any},\n    options: NodeInfoOptions,\n    queryOptions: Partial<WatchQueryOptions>,\n}\n\nexport type QueuedRequest = Request & {\n    result?: any,\n    setResult: (data: any) => void\n}\n\nexport type MergedRequest = Request & { originals: QueuedRequest[] };\n\nexport type NodeInfoResult = {\n    node?: any,\n    nodes?: any[],\n    errors?: readonly GraphQLError[],\n    error?: ApolloError,\n    loading?: boolean,\n    networkStatus?: NetworkStatus,\n    partial?: boolean,\n    query?: DocumentNode,\n    variables?: {[key:string]: any}\n}\n\nconst queue: QueuedRequest[] = [];\nlet schemaResult: any;\nlet timeout: number;\nlet observedQueries: { unsubscribe: () => void }[] = [];\n\nfunction scheduleQueue(client: ApolloClient<object>) {\n    if (!timeout && schemaResult) {\n        timeout = window.setTimeout(() => {\n            timeoutHandler(client);\n            clearTimeout(timeout);\n            timeout = null;\n        }, 0);\n    }\n}\n\nconst timeoutHandler = (client: ApolloClient<object>) => {\n    const mergedQueue: MergedRequest[] = [];\n\n    queue.forEach(request => {\n        const toInsert = {\n            variables: request.variables,\n            queryOptions: request.queryOptions,\n            options: request.options,\n            originals: [request]\n        };\n\n        const mergeable = mergedQueue.find(q => JSON.stringify(q.queryOptions) === JSON.stringify(toInsert.queryOptions) && (isSubset(q.variables, toInsert.variables) || isSubset(toInsert.variables, q.variables)));\n\n        if (mergeable) {\n            merge(mergeable, toInsert);\n        } else {\n            mergedQueue.push({\n                variables: toInsert.variables && {...toInsert.variables},\n                queryOptions: toInsert.queryOptions && {...toInsert.queryOptions},\n                options: toInsert.options && {...toInsert.options},\n                originals: toInsert.originals\n            });\n        }\n    });\n\n    observedQueries.forEach(obs => obs.unsubscribe());\n    observedQueries = [];\n\n    mergedQueue.forEach(mergedRequest => {\n        const {variables, queryOptions, options, originals} = mergedRequest;\n        const {query, generatedVariables, skip} = getQuery(variables, schemaResult, options);\n        if (skip) {\n            // No query to execute\n            originals.forEach(request => {\n                request.setResult({\n                    loading: false\n                });\n            });\n        } else {\n            const watchedQuery = client.watchQuery({query, errorPolicy: 'ignore', ...queryOptions, variables: generatedVariables}).subscribe(({data, ...others}) => {\n                const result = getResult(data, others, options, query, generatedVariables);\n\n                originals.forEach(request => {\n                    if (!deepEquals(request.result, result)) {\n                        request.result = result;\n                        request.setResult({\n                            ...result,\n                            refetch() {\n                                client.refetchQueries({include: [query]});\n                            }\n                        });\n                    }\n                });\n            });\n            observedQueries.push(watchedQuery);\n        }\n    });\n};\n\nexport const useNodeInfo = (variables: {[key:string]: unknown}, options?: NodeInfoOptions, queryOptions?: Partial<WatchQueryOptions>) => {\n    const [result, setResult] = useState<NodeInfoResult>({\n        loading: true\n    });\n\n    const client = useApolloClient();\n\n    if (!schemaResult) {\n        client.query({query: SCHEMA_FIELDS_QUERY, variables: {type: 'GqlPublicationInfo'}}).then(({data}: {data: any}) => {\n            schemaResult = data;\n            scheduleQueue(client);\n        });\n    }\n\n    // Normalize and memoize request\n    const [currentRequest, queryHasChanged] = useMemoRequest(variables, queryOptions, options, setResult);\n    useEffect(() => {\n        queue.push(currentRequest);\n        scheduleQueue(client);\n\n        return () => {\n            queue.splice(queue.indexOf(currentRequest), 1);\n        };\n    }, [client, currentRequest]);\n\n    if (queryHasChanged && !result.loading) {\n        if (queryOptions?.fetchPolicy !== 'no-cache' && queryOptions?.fetchPolicy !== 'network-only') {\n            const infoQuery = getQuery(currentRequest.variables, schemaResult, currentRequest.options);\n            const res = client.readQuery({query: infoQuery.query, variables: infoQuery.generatedVariables});\n            if (res) {\n                const result = getResult(res, {}, currentRequest.options, infoQuery.query, infoQuery.generatedVariables);\n                setResult(result);\n                return result;\n            }\n        }\n\n        setResult({\n            loading: true\n        });\n        return {loading: true};\n    }\n\n    return result;\n};\n\nconst getResult = (data: any, others: NodeInfoResult, options: NodeInfoOptions, query: DocumentNode, generatedVariables: {[key:string]: unknown}) => {\n    const node: object = (data && data.jcr && (data.jcr.nodeByPath || data.jcr.nodeById)) || null;\n    const nodes: object[] = (data && data.jcr && (data.jcr.nodesByPath || data.jcr.nodesById)) || null;\n    let result = others;\n\n    if (node) {\n        result = {\n            node: decodeResult(node, options),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    if (nodes) {\n        result = {\n            nodes: nodes.map(n => decodeResult(n, options)),\n            ...others,\n            query,\n            variables: generatedVariables\n        };\n    }\n\n    return result;\n};\n\nconst decodeResult = (nodeOrig: any, options: NodeInfoOptions) => {\n    const node = {...nodeOrig};\n    if (node.site) {\n        node.site = {...node.site};\n    }\n\n    if (node && options) {\n        if (options.getPermissions) {\n            options.getPermissions.forEach(name => {\n                const res = node[getEncodedPermissionName(name)];\n                delete node[getEncodedPermissionName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getSitePermissions) {\n            options.getSitePermissions.forEach(name => {\n                const res = node.site[getEncodedPermissionName(name)];\n                delete node.site[getEncodedPermissionName(name)];\n                node.site[name] = res;\n            });\n        }\n\n        if (options.getIsNodeTypes) {\n            options.getIsNodeTypes.forEach(name => {\n                const res = node[getEncodedNodeTypeName(name)];\n                delete node[getEncodedNodeTypeName(name)];\n                node[name] = res;\n            });\n        }\n\n        if (options.getMimeType) {\n            const {nodes} = node.resourceChildren;\n            node.mimeType = (nodes.length !== 0 && nodes[0].mimeType.value) || null;\n            delete node.resourceChildren;\n        }\n    }\n\n    return node;\n};\n"],"mappings":"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"}