{"version":3,"names":["parseType","PredefinedFragments","rfdc","clone","findParametersInDocument","doc","definitions","flatMap","def","findParametersInSelectionSet","selectionSet","queryCache","replaceFragmentsInDocument","fragments","key","name","value","map","f","gql","sort","join","clonedQuery","forEach","replaceFragmentsInSelectionSet","operationDefinition","selections","sel","arguments","filter","arg","kind","concat","findFragmentsInSelectionSet","document","_ref3","newFragmentsSpreads","removedFragmentSpreads","existing","find","definition","push","applyableFragments","frag","applyFor","fragment","newSpread","allVariables","reduce","result","n","_objectSpread","variables","Object","entries","_ref","_ref2","_slicedToArray","variableDefinitions","variableDef","variable","type","noLocation","indexOf","apply"],"sources":["fragments.utils.ts"],"sourcesContent":["import {\n    DefinitionNode,\n    DocumentNode,\n    FragmentSpreadNode,\n    NameNode,\n    parseType,\n    SelectionNode,\n    SelectionSetNode,\n    VariableDefinitionNode\n} from 'graphql';\nimport {Fragment, PredefinedFragments} from '../fragments';\nimport {ExecutableDefinitionNode, FragmentDefinitionNode, OperationDefinitionNode} from 'graphql/language/ast';\nimport rfdc from 'rfdc';\n\nconst clone = rfdc();\n\ntype Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n};\n\nfunction findParametersInDocument(doc: DocumentNode): string[] {\n    if (doc && doc.definitions) {\n        return doc.definitions.flatMap(def => 'selectionSet' in def ? findParametersInSelectionSet(def.selectionSet) : []);\n    }\n\n    return [];\n}\n\nconst queryCache: {[key:string]: DocumentNode} = {};\n\nfunction replaceFragmentsInDocument(doc: DocumentNode, fragments: (string|Fragment)[]) {\n    if (!fragments) {\n        fragments = [];\n    }\n\n    const key = (doc.definitions[0] as ExecutableDefinitionNode).name.value + '__' + fragments\n        .map(f => (typeof f === 'string') ? PredefinedFragments[f] : f)\n        .map(f => (f.gql.definitions[0] as FragmentDefinitionNode).name.value)\n        .sort()\n        .join('_');\n\n    if (queryCache[key]) {\n        return queryCache[key];\n    }\n\n    let clonedQuery: DocumentNode = null;\n    if (doc && doc.definitions) {\n        clonedQuery = clone(doc);\n        clonedQuery.definitions.forEach(def => 'selectionSet' in def && replaceFragmentsInSelectionSet(def.selectionSet, fragments, def, clonedQuery));\n        const operationDefinition = clonedQuery.definitions[0] as OperationDefinitionNode;\n        (operationDefinition.name as Mutable<NameNode>).value = key;\n    }\n\n    queryCache[key] = clonedQuery;\n\n    return clonedQuery;\n}\n\nfunction findParametersInSelectionSet(selectionSet: SelectionSetNode): string[] {\n    if (selectionSet && selectionSet.selections) {\n        return selectionSet.selections.flatMap(sel => 'arguments' in sel &&\n            sel.arguments.filter(arg => (arg.value.kind === 'Variable')).flatMap(arg => 'name' in arg.value ? arg.value.name.value : [])\n                .concat(findParametersInSelectionSet(sel.selectionSet))\n                .filter(f => typeof f !== 'undefined')\n        );\n    }\n\n    return [];\n}\n\nfunction findFragmentsInSelectionSet(selectionSet: SelectionSetNode): string[] {\n    if (selectionSet && selectionSet.selections) {\n        return selectionSet.selections\n            .filter<FragmentSpreadNode>((sel): sel is FragmentSpreadNode => sel.kind === 'FragmentSpread').map(sel => sel.name.value)\n            .concat(selectionSet.selections.flatMap(sel => findFragmentsInSelectionSet('selectionSet' in sel && sel.selectionSet)));\n    }\n\n    return [];\n}\n\nfunction replaceFragmentsInSelectionSet(selectionSet: SelectionSetNode, fragments: (string|Fragment)[], def: ExecutableDefinitionNode, document: Mutable<DocumentNode>) {\n    if (selectionSet && selectionSet.selections) {\n        const newFragmentsSpreads: FragmentSpreadNode[] = [];\n        const removedFragmentSpreads: FragmentSpreadNode[] = [];\n        // Look for all existing fragment spreads in selection set\n        selectionSet.selections.filter<FragmentSpreadNode>((sel): sel is FragmentSpreadNode => sel.kind === 'FragmentSpread').forEach(sel => {\n            // Handle only named fragments\n            if (sel.name.value) {\n                // Check if spread exists in current doc - if not, we replace or remove it\n                const existing = document.definitions.find(definition => definition.kind === 'FragmentDefinition' && definition.name.value === sel.name.value);\n\n                if (!existing) {\n                    // First remove the spread, as it has no match in document\n                    removedFragmentSpreads.push(sel);\n\n                    // Check if a replacement is provided for this pseudo-fragment, then insert spreads and definitions\n                    if (fragments) {\n                        const applyableFragments = fragments\n                            .map(frag => (typeof frag === 'string') ? PredefinedFragments[frag] : frag)\n                            .filter(frag => frag.applyFor === sel.name.value);\n\n                        applyableFragments.flatMap((fragment:Fragment) => fragment.gql.definitions).forEach((frag: FragmentDefinitionNode) => {\n                            const newSpread = clone(sel);\n                            (newSpread.name as Mutable<NameNode>).value = (frag as FragmentDefinitionNode).name.value;\n                            newFragmentsSpreads.push(newSpread);\n\n                            // Add the new fragment definition in document if it has not already been added\n                            if (!document.definitions.find(definition => definition.kind === 'FragmentDefinition' && definition.name.value === frag.name.value)) {\n                                (document.definitions as Array<DefinitionNode>).push(frag);\n                            }\n                        });\n\n                        // Adds the associated variables to the query\n                        const allVariables = applyableFragments.reduce((result:{[key: string]:string}, n) => ({...result, ...n.variables}), {});\n                        Object.entries(allVariables).forEach(([name, value]) => {\n                            if (!def.variableDefinitions.find(variableDef => variableDef.variable.name.value === name)) {\n                                const type = parseType(value, {noLocation: true});\n                                (def.variableDefinitions as Array<VariableDefinitionNode>).push({\n                                    kind: 'VariableDefinition',\n                                    variable: {\n                                        kind: 'Variable',\n                                        name: {\n                                            kind: 'Name',\n                                            value: name\n                                        }\n                                    },\n                                    type\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        });\n\n        // Removed replaced spreads\n        selectionSet.selections = selectionSet.selections.filter(sel => sel.kind !== 'FragmentSpread' || removedFragmentSpreads.indexOf(sel) === -1);\n\n        // Add all new spreads\n        (selectionSet.selections as Array<SelectionNode>).push(...newFragmentsSpreads);\n\n        // Recursively call on sub-selections set\n        selectionSet.selections.forEach(sel => 'selectionSet' in sel && replaceFragmentsInSelectionSet(sel.selectionSet, fragments, def, document));\n    }\n}\n\nexport {replaceFragmentsInDocument, findParametersInDocument, findFragmentsInSelectionSet};\n"],"mappings":"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"}