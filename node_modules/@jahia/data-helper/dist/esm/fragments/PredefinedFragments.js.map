{"version":3,"names":["gql","displayName","variables","language","applyFor","_templateObject","_taggedTemplateLiteral","primaryNodeType","displayLanguage","displayLanguageSet","_templateObject2","parentNode","_templateObject3","aggregatedPublicationInfo","aggregatedPublicationInfoSubNodes","aggregatedPublicationInfoIncludeReference","_templateObject4","aggregatedPublicationInfoWithExistInLive","_templateObject5","operationSupport","_templateObject6","allProperties","_templateObject7","getProperties","getPropertiesNames","_templateObject8","installedModules","_templateObject9","siteLanguages","_templateObject10","displayableNode","_templateObject11","lockInfo","_templateObject12","subNodesCount","subNodesCountTypes","_templateObject13","childNodeTypes","_templateObject14","contentRestrictions","_templateObject15","siteHomePage","_templateObject16","nodeCacheRequiredFields","_templateObject17","nodeTypeDisplayName","_templateObject18","nodeTypeSubTypes","_templateObject19","mimeTypes","_templateObject20","PredefinedFragments"],"sources":["PredefinedFragments.ts"],"sourcesContent":["import gql from 'graphql-tag';\nimport {DocumentNode} from 'graphql';\n\nexport type Fragment = {\n    variables?: {\n        [key: string]: string\n    },\n    applyFor: string\n    gql: DocumentNode\n}\n\nexport const displayName: Fragment = {\n    variables: {\n        language: 'String!'\n    },\n    applyFor: 'node',\n    gql: gql`fragment DisplayName on JCRNode {\n        displayName(language:$language)\n    }`\n};\n\nexport const primaryNodeType: Fragment = {\n    variables: {\n        displayLanguage: 'String!',\n        displayLanguageSet: 'Boolean!'\n    },\n    applyFor: 'node',\n    gql: gql`fragment NodeInfoPrimaryNodeType on JCRNode {\n        primaryNodeType {\n            name\n            displayName(language: $displayLanguage) @include(if: $displayLanguageSet)\n            icon\n        }\n    }`\n};\n\nexport const parentNode: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment ParentNodeInfo on JCRNode {\n        parent {\n            path\n            name\n            ...NodeCacheRequiredFields\n        }\n    }`\n};\n\nexport const aggregatedPublicationInfo: Fragment = {\n    variables: {\n        language: 'String!',\n        aggregatedPublicationInfoSubNodes: 'Boolean',\n        aggregatedPublicationInfoIncludeReference: 'Boolean'\n    },\n    applyFor: 'node',\n    gql: gql`fragment AggregatedPublicationInfo on JCRNode {\n        aggregatedPublicationInfo(language: $language, subNodes: $aggregatedPublicationInfoSubNodes, references:$aggregatedPublicationInfoIncludeReference) {\n            publicationStatus\n        }\n    }`\n};\n\nexport const aggregatedPublicationInfoWithExistInLive: Fragment = {\n    variables: {\n        language: 'String!',\n        aggregatedPublicationInfoSubNodes: 'Boolean',\n        aggregatedPublicationInfoIncludeReference: 'Boolean'\n    },\n    applyFor: 'node',\n    gql: gql`fragment AggregatedPublicationInfoWithExistsInLive on JCRNode {\n        aggregatedPublicationInfo(language: $language, subNodes: $aggregatedPublicationInfoSubNodes, references:$aggregatedPublicationInfoIncludeReference) {\n            publicationStatus\n            existsInLive\n        }\n    }`\n};\n\nexport const operationSupport: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment OperationSupport on JCRNode {\n        operationsSupport {\n            lock\n            markForDeletion\n            publication\n        }\n    }`\n};\n\nexport const allProperties: Fragment = {\n    variables: {\n        language: 'String!'\n    },\n    applyFor: 'node',\n    gql: gql`fragment NodeAllProperties on JCRNode {\n        properties(language:$language) {\n            name\n            value\n            values\n        }\n    }`\n};\n\nexport const getProperties: Fragment = {\n    variables: {\n        language: 'String!',\n        getPropertiesNames: '[String!]!'\n    },\n    applyFor: 'node',\n    gql: gql`fragment NodeProperties on JCRNode {\n        properties(names: $getPropertiesNames, language: $language) {\n            name\n            value\n            values\n        }\n    }`\n};\n\nexport const installedModules: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment SiteInstalledModules on JCRNode {\n        site {\n            installedModulesWithAllDependencies\n            ...NodeCacheRequiredFields\n        }\n    }`\n};\n\nexport const siteLanguages: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment SiteLanguages on JCRNode {\n        site {\n            defaultLanguage\n            ...NodeCacheRequiredFields\n            languages {\n                displayName\n                language\n                activeInEdit\n            }\n        }\n    }`\n};\n\nexport const displayableNode: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment DisplayableNodePath on JCRNode {\n        displayableNode {\n            path\n            ...NodeCacheRequiredFields\n        }\n    }`\n};\n\nexport const lockInfo: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment LockInfo on JCRNode {\n        lockOwner: property(name: \"jcr:lockOwner\") {\n            value\n        }\n        lockTypes: property(name: \"j:lockTypes\") {\n            values\n        }\n    }`\n};\n\nexport const subNodesCount: Fragment = {\n    variables: {\n        subNodesCountTypes: '[String!]!'\n    },\n    applyFor: 'node',\n    gql: gql`fragment SubNodesCount on JCRNode {\n        subNodes: children(typesFilter: {types: $subNodesCountTypes, multi: ANY}) {\n            pageInfo {\n                totalCount\n            }\n        }\n    }`\n};\n\nexport const childNodeTypes: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment AllowedChildNodeType on JCRNode {\n        allowedChildNodeTypes(includeSubTypes: false) {\n            name\n        }\n    }`\n};\n\nexport const contentRestrictions: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment ContentRestriction on JCRNode {\n        contributeTypes: property(name: \"j:contributeTypes\") {\n            values\n        }\n        ancestors(fieldFilter: {filters: {evaluation: NOT_EMPTY, fieldName: \"contributeTypes\"}}) {\n            ...NodeCacheRequiredFields\n            contributeTypes : property(name: \"j:contributeTypes\") {\n                values\n            }\n        }\n    }`\n};\n\nexport const siteHomePage: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment NodeSiteHomePage on JCRNode {\n        children(typesFilter:{types:[\"jnt:page\"]}, propertiesFilter:{filters:[{property:\"j:isHomePage\", value:\"true\" }]}) {\n            nodes {\n                path\n                ...NodeCacheRequiredFields\n            }\n        }\n    }`\n};\n\nexport const nodeCacheRequiredFields: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment NodeCacheRequiredFields on JCRNode {\n        uuid\n        workspace\n        path\n    }`\n};\n\nexport const nodeTypeDisplayName: Fragment = {\n    variables: {\n        language: 'String!'\n    },\n    applyFor: 'nodeType',\n    gql: gql`fragment NodeTypeDisplayName on JCRNodeType {\n        displayName(language:$language)\n    }`\n};\n\nexport const nodeTypeSubTypes: Fragment = {\n    variables: {\n        language: 'String!'\n    },\n    applyFor: 'nodeType',\n    gql: gql`fragment NodeTypeSubTypes on JCRNodeType {\n        subTypes {\n            nodes {\n                name\n                displayName(language:$language)\n                abstract\n                mixin\n            }\n        }\n    }`\n};\n\nexport const mimeTypes: Fragment = {\n    applyFor: 'node',\n    gql: gql`fragment NodeInfoResourceNode on JCRNode {\n        resourceChildren: children(names: [\"jcr:content\"]) {\n            nodes {\n                ...NodeCacheRequiredFields\n                mimeType: property(name: \"jcr:mimeType\") {\n                    value\n                }\n            }\n        }\n    }`\n};\n\nexport const PredefinedFragments: {[key:string]: Fragment} = {\n    displayName,\n    primaryNodeType,\n    parentNode,\n    aggregatedPublicationInfo,\n    operationSupport,\n    allProperties,\n    getProperties,\n    installedModules,\n    siteLanguages,\n    displayableNode,\n    lockInfo,\n    subNodesCount,\n    contentRestrictions,\n    siteHomePage,\n    nodeCacheRequiredFields,\n    nodeTypeDisplayName,\n    nodeTypeSubTypes,\n    mimeTypes\n};\n"],"mappings":"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"}