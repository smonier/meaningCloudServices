import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _templateObject;
import gql from 'graphql-tag';
import { encodeName } from "./encodeName";
var fragments = {};
export var getNodeTypeFragment = function getNodeTypeFragment(name) {
  var encodedName = getEncodedNodeTypeName(name);
  if (!fragments[encodedName]) {
    fragments[encodedName] = {
      applyFor: 'node',
      variables: _defineProperty({}, encodedName, 'InputNodeTypesInput!'),
      gql: gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["fragment NodeType_", " on JCRNode {\n                ", ":isNodeType(type: $", ")\n            }"])), encodedName, encodedName, encodedName)
    };
  }
  return {
    fragment: fragments[encodedName],
    variables: _defineProperty({}, encodedName, {
      types: name
    })
  };
};
export var getEncodedNodeTypeName = function getEncodedNodeTypeName(name) {
  return 'nodeType_' + encodeName(name);
};
//# sourceMappingURL=getIsNodeTypeFragment.js.map
