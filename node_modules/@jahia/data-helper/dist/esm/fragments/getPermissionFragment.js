import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _templateObject, _templateObject2;
import gql from 'graphql-tag';
import { encodeName } from "./encodeName";
var fragments = {};
export var getPermissionFragment = function getPermissionFragment(name) {
  var encodedName = getEncodedPermissionName(name);
  if (!fragments[encodedName]) {
    fragments[encodedName] = {
      applyFor: 'node',
      variables: _defineProperty({}, encodedName, 'String!'),
      gql: gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["fragment NodePermission_", " on JCRNode {\n                ", ":hasPermission(permissionName: $", ")\n            }"])), encodedName, encodedName, encodedName)
    };
  }
  return {
    fragment: fragments[encodedName],
    variables: _defineProperty({}, encodedName, name)
  };
};
export var getSitePermissionFragment = function getSitePermissionFragment(name) {
  var encodedName = getEncodedPermissionName(name);
  if (!fragments['site_' + encodedName]) {
    fragments['site_' + encodedName] = {
      applyFor: 'node',
      variables: _defineProperty({}, encodedName, 'String!'),
      gql: gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["fragment SiteNodePermission_", " on JCRNode {\n                site {\n                    ...NodeCacheRequiredFields\n                    ", ":hasPermission(permissionName: $", ")\n                }\n            }"])), encodedName, encodedName, encodedName)
    };
  }
  return {
    fragment: fragments['site_' + encodedName],
    variables: _defineProperty({}, encodedName, name)
  };
};
export var getEncodedPermissionName = function getEncodedPermissionName(name) {
  return 'permission_' + encodeName(name);
};
//# sourceMappingURL=getPermissionFragment.js.map
