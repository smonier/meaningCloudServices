"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.merge = exports.isSubset = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var isObject = function isObject(obj) {
  return obj !== null && (0, _typeof2["default"])(obj) === 'object';
};
var merge = function merge(target, source) {
  if (Array.isArray(target) && Array.isArray(source)) {
    return [].concat((0, _toConsumableArray2["default"])(target), (0, _toConsumableArray2["default"])(source.filter(function (f) {
      return target.indexOf(f) === -1;
    })));
  }
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach(function (sourceKey) {
      var sourceValue = source[sourceKey];
      if (Object.prototype.hasOwnProperty.call(target, sourceKey)) {
        var targetValue = target[sourceKey];
        target[sourceKey] = merge(targetValue, sourceValue);
      } else if (Array.isArray(sourceValue)) {
        target[sourceKey] = (0, _toConsumableArray2["default"])(sourceValue);
      } else if ((0, _typeof2["default"])(sourceValue) === 'object') {
        target[sourceKey] = _objectSpread({}, sourceValue);
      } else {
        target[sourceKey] = sourceValue;
      }
    });
    return target;
  }
  return target;
};
exports.merge = merge;
var isSubset = function isSubset(superObj, subObj) {
  return Object.keys(subObj).every(function (ele) {
    var obj1 = subObj[ele];
    var obj2 = superObj[ele];
    if (Array.isArray(obj1) && Array.isArray(obj2)) {
      return obj1.length === obj2.length && obj1.every(function (value, index) {
        return value === obj2[index];
      });
    }
    if ((0, _typeof2["default"])(obj1) === 'object' && !Array.isArray(obj1)) {
      return isSubset(obj2, obj1);
    }
    return obj1 === obj2;
  });
};
exports.isSubset = isSubset;
//# sourceMappingURL=useNodeInfo.utils.js.map
