"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validOptions = exports.getQuery = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _fragments = require("../../fragments");
var _getPermissionFragment = require("../../fragments/getPermissionFragment");
var _getIsNodeTypeFragment = require("../../fragments/getIsNodeTypeFragment");
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
var getBaseQueryAndVariables = function getBaseQueryAndVariables(variables) {
  if (variables.paths) {
    return {
      baseQuery: (0, _graphqlTag["default"])(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n                query NodesByPathInfoQuery($paths:[String!]!) {\n                    jcr {\n                        nodesByPath(paths:$paths) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ", "\n            "])), _fragments.nodeCacheRequiredFields.gql),
      generatedVariables: {
        paths: variables.paths
      },
      skip: false
    };
  }
  if (variables.uuid && variables.uuid.length > 0) {
    return {
      baseQuery: (0, _graphqlTag["default"])(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n                query NodeByUuidInfoQuery($uuid:String!) {\n                    jcr {\n                        nodeById(uuid:$uuid) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ", "\n            "])), _fragments.nodeCacheRequiredFields.gql),
      generatedVariables: {
        uuid: variables.uuid
      },
      skip: false
    };
  }
  if (variables.uuids) {
    return {
      baseQuery: (0, _graphqlTag["default"])(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n                query NodesByUuidInfoQuery($uuids:[String!]!) {\n                    jcr {\n                        nodesById(uuids:$uuids) {\n                            name\n                            ...node\n                            ...NodeCacheRequiredFields\n                        }\n                    }\n                }\n                ", "\n            "])), _fragments.nodeCacheRequiredFields.gql),
      generatedVariables: {
        uuids: variables.uuids
      },
      skip: false
    };
  }
  return {
    baseQuery: (0, _graphqlTag["default"])(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n            query NodeByPathInfoQuery($path:String!) {\n                jcr {\n                    nodeByPath(path:$path) {\n                        name\n                        ...node\n                        ...NodeCacheRequiredFields\n                    }\n                }\n            }\n            ", "\n        "])), _fragments.nodeCacheRequiredFields.gql),
    generatedVariables: {
      path: variables.path
    },
    skip: !variables.path || variables.path.length === 0
  };
};
var validOptions = ['getDisplayName', 'getPrimaryNodeType', 'getParent', 'getAggregatedPublicationInfo', 'getOperationSupport', 'getPermissions', 'getSitePermissions', 'getIsNodeTypes', 'getProperties', 'getSiteInstalledModules', 'getSiteLanguages', 'getDisplayableNodePath', 'getLockInfo', 'getChildNodeTypes', 'getContributeTypesRestrictions', 'getSubNodesCount', 'getMimeType'];
exports.validOptions = validOptions;
var getQuery = function getQuery(variables, schemaResult) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var fragments = [];
  var _getBaseQueryAndVaria = getBaseQueryAndVariables(variables),
    baseQuery = _getBaseQueryAndVaria.baseQuery,
    generatedVariables = _getBaseQueryAndVaria.generatedVariables,
    skip = _getBaseQueryAndVaria.skip;
  if (!skip) {
    if (options.getDisplayName) {
      fragments.push(_fragments.displayName);
      if (!variables.language) {
        throw Error('language is required');
      }
      generatedVariables.language = variables.language;
    }
    if (options.getPrimaryNodeType) {
      fragments.push(_fragments.primaryNodeType);
      if (variables.displayLanguage) {
        generatedVariables.displayLanguageSet = true;
        generatedVariables.displayLanguage = variables.displayLanguage;
      } else {
        generatedVariables.displayLanguageSet = false;
        generatedVariables.displayLanguage = '';
      }
    }
    if (options.getParent) {
      fragments.push(_fragments.parentNode);
    }
    if (options.getAggregatedPublicationInfo) {
      var supportsExistsInLive = schemaResult && schemaResult.__type && schemaResult.__type.fields && schemaResult.__type.fields.find(function (field) {
        return field.name === 'existsInLive';
      }) !== undefined;
      if (supportsExistsInLive) {
        fragments.push(_fragments.aggregatedPublicationInfoWithExistInLive);
      } else {
        fragments.push(_fragments.aggregatedPublicationInfo);
      }
      if (!variables.language) {
        throw Error('language is required');
      }
      generatedVariables.language = variables.language;
      generatedVariables.aggregatedPublicationInfoSubNodes = Boolean(options.getAggregatedPublicationInfo.subNodes);
      generatedVariables.aggregatedPublicationInfoIncludeReference = Boolean(options.getAggregatedPublicationInfo.reference);
    }
    if (options.getOperationSupport) {
      fragments.push(_fragments.operationSupport);
    }
    if (options.getPermissions) {
      options.getPermissions.forEach(function (name) {
        var _getPermissionFragmen = (0, _getPermissionFragment.getPermissionFragment)(name),
          fragment = _getPermissionFragmen.fragment,
          fragmentVariables = _getPermissionFragmen.variables;
        fragments.push(fragment);
        Object.assign(generatedVariables, fragmentVariables);
      });
    }
    if (options.getSitePermissions) {
      options.getSitePermissions.forEach(function (name) {
        var _getSitePermissionFra = (0, _getPermissionFragment.getSitePermissionFragment)(name),
          fragment = _getSitePermissionFra.fragment,
          fragmentVariables = _getSitePermissionFra.variables;
        fragments.push(fragment);
        Object.assign(generatedVariables, fragmentVariables);
      });
    }
    if (options.getIsNodeTypes) {
      options.getIsNodeTypes.forEach(function (name) {
        var _getNodeTypeFragment = (0, _getIsNodeTypeFragment.getNodeTypeFragment)(name),
          fragment = _getNodeTypeFragment.fragment,
          fragmentVariables = _getNodeTypeFragment.variables;
        fragments.push(fragment);
        Object.assign(generatedVariables, fragmentVariables);
      });
    }
    if (options.getProperties) {
      fragments.push(_fragments.getProperties);
      generatedVariables.getPropertiesNames = options.getProperties;
      if (!variables.language) {
        throw Error('language is required');
      }
      generatedVariables.language = variables.language;
    }
    if (options.getSiteInstalledModules) {
      fragments.push(_fragments.installedModules);
    }
    if (options.getSiteLanguages) {
      fragments.push(_fragments.siteLanguages);
    }
    if (options.getDisplayableNodePath) {
      fragments.push(_fragments.displayableNode);
    }
    if (options.getLockInfo) {
      fragments.push(_fragments.lockInfo);
    }
    if (options.getChildNodeTypes) {
      fragments.push(_fragments.childNodeTypes);
    }
    if (options.getContributeTypesRestrictions) {
      fragments.push(_fragments.contentRestrictions);
    }
    if (options.getSubNodesCount) {
      fragments.push(_fragments.subNodesCount);
      generatedVariables.subNodesCountTypes = options.getSubNodesCount.types ? options.getSubNodesCount.types : ['nt:base'];
    }
    if (options.getMimeType) {
      fragments.push(_fragments.mimeTypes);
    }
  }
  return {
    query: (0, _fragments.replaceFragmentsInDocument)(baseQuery, fragments),
    generatedVariables: generatedVariables,
    skip: skip
  };
};
exports.getQuery = getQuery;
//# sourceMappingURL=useNodeInfo.gql-queries.js.map
