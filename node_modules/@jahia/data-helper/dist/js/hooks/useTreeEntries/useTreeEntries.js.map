{"version":3,"names":["_client","require","_fragments","_useTreeEntries","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","useTreeEntries","_ref","queryOptions","fragments","rootPaths","openPaths","selectedPaths","openableTypes","selectableTypes","recursionTypesFilter","queryVariables","hideRoot","sortBy","query","replaceFragmentsInDocument","TREE_QUERY","getTreeEntries","data","treeEntries","nodesById","jcr","addNode","node","depth","index","selected","selectable","indexOf","path","treeEntry","name","open","openable","prefix","repeat","hidden","hasChildren","children","pageInfo","nodesCount","splice","uuid","rootNodes","rootNode","root","openNodes","_toConsumableArray2","sort","a","b","localeCompare","parent","parentIndex","nodes","reverse","child","treeNode","vars","types","Array","from","Set","concat","multi","_useQuery","useQuery","variables","others","_objectWithoutProperties2","exports"],"sources":["useTreeEntries.ts"],"sourcesContent":["import {QueryHookOptions, useQuery} from '@apollo/client';\nimport {replaceFragmentsInDocument} from '../../fragments/fragments.utils';\nimport {TREE_QUERY} from './useTreeEntries.gql-queries';\nimport {Fragment} from '~/fragments';\n\nexport type UseTreeEntriesArgs = Partial<{\n    fragments: (string|Fragment)[],\n    rootPaths: string[],\n    openPaths: string[],\n    selectedPaths: string[],\n    openableTypes: string[],\n    selectableTypes: string[],\n    recursionTypesFilter: object,\n    queryVariables: {[key:string]: any},\n    hideRoot: boolean,\n    sortBy: string,\n}>\n\nexport const useTreeEntries = ({\n    fragments,\n    rootPaths,\n    openPaths,\n    selectedPaths,\n    openableTypes,\n    selectableTypes,\n    recursionTypesFilter,\n    queryVariables,\n    hideRoot,\n    sortBy\n}: UseTreeEntriesArgs, queryOptions: QueryHookOptions) => {\n    const query = replaceFragmentsInDocument(TREE_QUERY, fragments);\n\n    const getTreeEntries = (data: any) => {\n        const treeEntries: any[] = [];\n        const nodesById: {[key:string]: any} = {};\n        const jcr: any = data ? data.jcr : {};\n\n        const addNode = function (node: any, depth: number, index: number) {\n            let selected = false;\n            if (node.selectable) {\n                selected = selectedPaths.indexOf(node.path) !== -1;\n            }\n\n            const treeEntry = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && openPaths.indexOf(node.path) !== -1,\n                selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth,\n                prefix: '&nbsp;'.repeat(depth * 3),\n                node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.nodesCount > 0\n            };\n            treeEntries.splice(index, 0, treeEntry);\n            nodesById[node.uuid] = treeEntry;\n            return treeEntry;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                jcr.rootNodes.forEach((rootNode: any) => {\n                    const root = addNode(rootNode, 0, 0);\n                    root.hidden = hideRoot;\n                });\n            }\n\n            if (jcr.openNodes) {\n                [...jcr.openNodes].sort((a, b) => a.path.localeCompare(b.path)).forEach(node => {\n                    const parent = nodesById[node.uuid];\n                    if (parent) {\n                        const parentIndex = treeEntries.indexOf(parent);\n                        [...node.children.nodes].reverse().forEach(child => {\n                            addNode(child, parent.depth + 1, parentIndex + 1);\n                        });\n                    }\n                });\n            }\n        }\n\n        return treeEntries.filter(treeNode => !treeNode.hidden);\n    };\n\n    const vars = {\n        rootPaths,\n        types: Array.from(new Set([...(openableTypes || []), ...(selectableTypes || [])])),\n        recursionTypesFilter: recursionTypesFilter || {types: 'nt:base', multi: 'NONE'},\n        selectable: selectableTypes,\n        openable: openableTypes,\n        openPaths,\n        sortBy,\n        ...queryVariables\n    };\n\n    const {data, ...others} = useQuery(query, {...queryOptions, variables: vars});\n    return {treeEntries: getTreeEntries(data), ...others};\n};\n"],"mappings":"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"}