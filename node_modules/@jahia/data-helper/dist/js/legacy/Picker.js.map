{"version":3,"names":["_react","_interopRequireDefault","require","_reactComponents","_graphqlTag","_fragments","_Picker","_rfdc","_fastDeepEqual","_templateObject","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","clone","rfdc","Picker","_React$Component","_inherits2","_super","props","_this","_classCallCheck2","fragments","rootPaths","onOpenItem","onSelectItem","openPaths","selectedPaths","defaultSelectedPaths","onSelectionChange","defaultOpenPaths","resolvedFragments","PickerItemsFragment","mixinTypes","primaryNodeType","isPublished","displayName","query","gql","_taggedTemplateLiteral2","nodeCacheRequiredFields","replaceFragmentsInDocument","state","eventsHandlers","isOpenControlled","path","open","setState","prevState","concat","_toConsumableArray2","thispath","addPathToOpenPath","isSelectControlled","selected","multiple","newSelectedPaths","bind","_assertThisInitialized2","_createClass2","value","getVariables","_this$props","openableTypes","selectableTypes","queryVariables","vars","types","Set","selectable","openable","assign","getPickerEntries","data","_this2","pickerEntries","nodesById","jcr","addNode","node","depth","index","indexOf","pickerNode","name","prefix","repeat","hidden","hasChildren","children","pageInfo","nodesCount","splice","uuid","rootNodes","rootNode","root","hideRoot","openNodes","sort","a","b","parent","parentIndex","nodes","slice","reverse","child","selectedNodes","map","s","pathsToOpen","rootFound","endsWith","_path$split","split","_path$split2","_toArray2","tail","reduce","acc","it","rootPath","startsWith","includes","paths","_this3","Array","render","_this4","setRefetch","createElement","Query","variables","fetchPolicy","error","loading","refetch","queryParams","renderProp","onLoading","previousEntries","getDerivedStateFromProps","nextProps","console","warn","newState","deepEquals","React","Component","exports","_propTypes","array","arrayOf","string","func","isRequired","objectOf","any","bool"],"sources":["Picker.tsx"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React from 'react';\nimport {Query} from '@apollo/react-components';\nimport gql from 'graphql-tag';\nimport {displayName, Fragment, nodeCacheRequiredFields, replaceFragmentsInDocument} from '../fragments';\nimport {PickerItemsFragment} from './Picker.gql-fragments';\nimport {DocumentNode} from 'graphql';\nimport {QueryResult} from '@apollo/client';\nimport rfdc from 'rfdc';\nimport deepEquals from 'fast-deep-equal';\n\nconst clone = rfdc();\n\ntype PropType = {\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments?: (string| Fragment)[],\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths?: string[],\n\n    onOpenItem?: (path:string, open:boolean) => void\n\n    onSelectItem?: (path:string, selected: boolean, multiple:boolean) => void,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths?: string[],\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths?: string[],\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths?: string[],\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange?: (paths:string[]) => void,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths?: string[],\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes?: string[],\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes?: string[],\n\n    onLoading: (l: boolean) => void,\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables?: {[key:string]: any},\n\n    hideRoot?: boolean,\n\n    /**\n     * Optional function which receives refetch function of the Query component when the component is strapped\n     */\n    setRefetch: (p: any) => void,\n\n    children: (p: any) => React.ReactElement\n};\n\ntype StateType = {\n    isOpenControlled?: boolean,\n    isSelectControlled?: boolean,\n    openPaths?: string[],\n    selectedPaths?: string[]\n};\n\nexport class Picker extends React.Component<PropType, StateType> {\n    query: DocumentNode;\n    eventsHandlers: {onOpenItem?: (path:string, open:boolean) => void, onSelectItem?: (path:string, selected: boolean, multiple:boolean) => void};\n    previousEntries: any;\n\n    constructor(props: PropType) {\n        super(props);\n\n        const {\n            fragments,\n            rootPaths,\n            onOpenItem,\n            onSelectItem,\n            openPaths,\n            selectedPaths,\n            defaultSelectedPaths,\n            onSelectionChange,\n            defaultOpenPaths\n        } = props;\n\n        const resolvedFragments = fragments || [PickerItemsFragment.mixinTypes, PickerItemsFragment.primaryNodeType, PickerItemsFragment.isPublished, displayName];\n\n        this.query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                nodesCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... NodeCacheRequiredFields\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        ... NodeCacheRequiredFields\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        nodesCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... NodeCacheRequiredFields\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }\n        ${nodeCacheRequiredFields.gql}`;\n        this.query = replaceFragmentsInDocument(this.query, resolvedFragments);\n\n        const state: StateType = {};\n\n        this.eventsHandlers = {};\n\n        if (!openPaths) {\n            // Uncontrolled mode\n            state.isOpenControlled = false;\n            state.openPaths = [];\n            this.eventsHandlers.onOpenItem = (path, open) => {\n                this.setState(prevState => ({\n                    openPaths: open ?\n                        [...prevState.openPaths, path] :\n                        prevState.openPaths.filter(thispath => thispath !== path)\n                }));\n            };\n\n            if (defaultOpenPaths) {\n                state.openPaths = this.addPathToOpenPath(defaultOpenPaths, rootPaths, state.openPaths);\n            }\n        } else {\n            state.isOpenControlled = true;\n            if (onOpenItem) {\n                this.eventsHandlers.onOpenItem = onOpenItem;\n            }\n        }\n\n        if (!selectedPaths) {\n            // Uncontrolled mode\n            state.isSelectControlled = false;\n            state.selectedPaths = defaultSelectedPaths ? clone(defaultSelectedPaths) : [];\n            // Open selected path if open is uncontrolled\n            if (defaultSelectedPaths && !state.isOpenControlled) {\n                state.openPaths = this.addPathToOpenPath(defaultSelectedPaths, rootPaths, state.openPaths);\n            }\n\n            this.eventsHandlers.onSelectItem = (path, selected, multiple) => {\n                this.setState(prevState => {\n                    const newSelectedPaths = selected ?\n                        [...(multiple ? prevState.selectedPaths : []), path] :\n                        prevState.selectedPaths.filter(thispath => thispath !== path);\n                    onSelectionChange(newSelectedPaths);\n                    return {\n                        selectedPaths: newSelectedPaths\n                    };\n                });\n            };\n        } else if (onSelectItem) {\n            state.isSelectControlled = true;\n            if (onSelectItem) {\n                this.eventsHandlers.onSelectItem = onSelectItem;\n            }\n        }\n\n        this.state = state;\n\n        // Binding\n        this.openPaths = this.openPaths.bind(this);\n    }\n\n    static getDerivedStateFromProps(nextProps: PropType, prevState: StateType) {\n        if ((prevState.isOpenControlled !== Boolean(nextProps.openPaths)) || (prevState.isSelectControlled !== Boolean(nextProps.selectedPaths))) {\n            console.warn('Cannot change between controlled/uncontrolled modes');\n        }\n\n        const newState: StateType = {};\n\n        if (prevState.isOpenControlled && !deepEquals(nextProps.openPaths, prevState.openPaths)) {\n            newState.openPaths = nextProps.openPaths;\n        }\n\n        if (prevState.isSelectControlled && !deepEquals(nextProps.selectedPaths, prevState.selectedPaths)) {\n            newState.selectedPaths = nextProps.selectedPaths;\n        }\n\n        if (newState.openPaths || newState.selectedPaths) {\n            return newState;\n        }\n\n        return null;\n    }\n\n    getVariables(selectedPaths: string[], openPaths: string[]) {\n        const {rootPaths, openableTypes, selectableTypes, queryVariables} = this.props;\n\n        const vars = {\n            rootPaths,\n            types: [...new Set([...openableTypes, ...selectableTypes])],\n            selectable: selectableTypes,\n            openable: openableTypes,\n            openPaths\n        };\n\n        if (queryVariables) {\n            Object.assign(vars, queryVariables);\n        }\n\n        return vars;\n    }\n\n    getPickerEntries(data: any, selectedPaths: string[], openPaths: string[]) {\n        let pickerEntries: any[] = [];\n        const nodesById:any = {};\n        const {jcr} = data;\n\n        const addNode = function (node:any, depth:number, index:number) {\n            let selected = false;\n            if (node.selectable) {\n                selected = selectedPaths.indexOf(node.path) !== -1;\n            }\n\n            const pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && openPaths.indexOf(node.path) !== -1,\n                selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth,\n                prefix: '&nbsp;'.repeat(depth * 3),\n                node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.nodesCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                jcr.rootNodes.forEach((rootNode: any) => {\n                    const root = addNode(rootNode, 0, 0);\n                    root.hidden = this.props.hideRoot || false;\n                });\n            }\n\n            if (jcr.openNodes) {\n                jcr.openNodes.concat()\n                    .sort((a: any, b: any) => (a.path > b.path) ? 1 : ((b.path > a.path) ? -1 : 0))\n                    .forEach((node: any) => {\n                        const parent = nodesById[node.uuid];\n                        if (parent) {\n                            const parentIndex = pickerEntries.indexOf(parent);\n                            node.children.nodes.slice().reverse().forEach((child: any) => {\n                                addNode(child, parent.depth + 1, parentIndex + 1);\n                            });\n                        }\n                    });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        const selectedNodes = pickerEntries.filter(node => node.selected).map(node => node.node);\n\n        selectedPaths = selectedNodes.map(s => s.path);\n        pickerEntries = pickerEntries.filter(pickerNode => !pickerNode.hidden);\n\n        return pickerEntries;\n    }\n\n    addPathToOpenPath(pathsToOpen: string[], rootPaths:string[], openPaths: string[]) {\n        pathsToOpen.forEach(path => {\n            let rootFound: false | string = false;\n            if (!path.endsWith('/')) {\n                path += '/';\n            }\n\n            const [...tail] = path.split('/');\n            tail.reduce((acc, it) => {\n                if (!rootFound) {\n                    rootPaths.forEach(rootPath => {\n                        rootFound = rootFound || (acc.startsWith(rootPath) && rootPath);\n                    });\n                }\n\n                if (rootFound && !openPaths.includes(acc)) {\n                    openPaths.push(acc);\n                    if (!openPaths.includes(rootFound)) {\n                        openPaths.push(rootFound);\n                    }\n                }\n\n                return acc + '/' + it;\n            }, '');\n        });\n        return openPaths;\n    }\n\n    openPaths(paths: string[]) {\n        if (!(paths instanceof Array)) {\n            paths = [paths];\n        }\n\n        this.setState(prevState => {\n            const openPaths = this.addPathToOpenPath(paths, this.props.rootPaths, prevState.openPaths);\n            return {openPaths};\n        });\n    }\n\n    render() {\n        const selectedPaths = this.state.selectedPaths ? this.state.selectedPaths : this.props.selectedPaths;\n        let openPaths = this.state.openPaths || this.props.openPaths;\n        const {setRefetch} = this.props;\n\n        openPaths = clone(openPaths);\n\n        const vars = this.getVariables(selectedPaths, openPaths);\n\n        return (\n            <Query query={this.query} variables={vars} fetchPolicy=\"cache-first\">\n                {(result: QueryResult): React.JSX.Element => {\n                    const {error, loading, data, refetch} = result;\n                    if (setRefetch) {\n                        setRefetch({\n                            query: this.query,\n                            queryParams: vars,\n                            refetch\n                        });\n                    }\n\n                    const renderProp = this.props.children;\n                    if (this.props.onLoading) {\n                        this.props.onLoading(loading);\n                    }\n\n                    if (loading) {\n                        if (this.previousEntries) {\n                            return renderProp({pickerEntries: this.previousEntries, loading, ...this.eventsHandlers});\n                        }\n\n                        return renderProp({pickerEntries: [], loading, ...this.eventsHandlers});\n                    }\n\n                    if (error) {\n                        return renderProp({pickerEntries: [], error, loading, ...this.eventsHandlers});\n                    }\n\n                    const pickerEntries = this.getPickerEntries(data, selectedPaths, openPaths);\n                    this.previousEntries = pickerEntries;\n\n                    return renderProp({pickerEntries, loading, ...this.eventsHandlers});\n                }}\n            </Query>\n        );\n    }\n}\n"],"mappings":"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"}