{"version":3,"names":["_graphqlTag","_interopRequireDefault","require","_encodeName","_templateObject","_templateObject2","fragments","getPermissionFragment","name","encodedName","getEncodedPermissionName","applyFor","variables","_defineProperty2","gql","_taggedTemplateLiteral2","fragment","exports","getSitePermissionFragment","encodeName"],"sources":["getPermissionFragment.ts"],"sourcesContent":["import gql from 'graphql-tag';\nimport {encodeName} from './encodeName';\nimport {Fragment} from '~/fragments/PredefinedFragments';\n\nconst fragments:{[key:string]: Fragment} = {};\n\nexport const getPermissionFragment = (name: string) => {\n    const encodedName = getEncodedPermissionName(name);\n    if (!fragments[encodedName]) {\n        fragments[encodedName] = {\n            applyFor: 'node',\n            variables: {\n                [encodedName]: 'String!'\n            },\n            gql: gql`fragment NodePermission_${encodedName} on JCRNode {\n                ${encodedName}:hasPermission(permissionName: $${encodedName})\n            }`\n        };\n    }\n\n    return {\n        fragment: fragments[encodedName],\n        variables: {\n            [encodedName]: name\n        }\n    };\n};\n\nexport const getSitePermissionFragment = (name: string) => {\n    const encodedName = getEncodedPermissionName(name);\n    if (!fragments['site_' + encodedName]) {\n        fragments['site_' + encodedName] = {\n            applyFor: 'node',\n            variables: {\n                [encodedName]: 'String!'\n            },\n            gql: gql`fragment SiteNodePermission_${encodedName} on JCRNode {\n                site {\n                    ...NodeCacheRequiredFields\n                    ${encodedName}:hasPermission(permissionName: $${encodedName})\n                }\n            }`\n        };\n    }\n\n    return {\n        fragment: fragments['site_' + encodedName],\n        variables: {\n            [encodedName]: name\n        }\n    };\n};\n\nexport const getEncodedPermissionName = (name: string) => 'permission_' + encodeName(name);\n"],"mappings":";;;;;;;;;AAAA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAAwC,IAAAE,eAAA,EAAAC,gBAAA;AAGxC,IAAMC,SAAkC,GAAG,CAAC,CAAC;AAEtC,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,IAAY,EAAK;EACnD,IAAMC,WAAW,GAAGC,wBAAwB,CAACF,IAAI,CAAC;EAClD,IAAI,CAACF,SAAS,CAACG,WAAW,CAAC,EAAE;IACzBH,SAAS,CAACG,WAAW,CAAC,GAAG;MACrBE,QAAQ,EAAE,MAAM;MAChBC,SAAS,MAAAC,gBAAA,iBACJJ,WAAW,EAAG,SAAS,CAC3B;MACDK,GAAG,MAAEA,sBAAG,EAAAV,eAAA,KAAAA,eAAA,OAAAW,uBAAA,wIAA2BN,WAAW,EACxCA,WAAW,EAAmCA,WAAW;IAEnE,CAAC;EACL;EAEA,OAAO;IACHO,QAAQ,EAAEV,SAAS,CAACG,WAAW,CAAC;IAChCG,SAAS,MAAAC,gBAAA,iBACJJ,WAAW,EAAGD,IAAI;EAE3B,CAAC;AACL,CAAC;AAACS,OAAA,CAAAV,qBAAA,GAAAA,qBAAA;AAEK,IAAMW,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIV,IAAY,EAAK;EACvD,IAAMC,WAAW,GAAGC,wBAAwB,CAACF,IAAI,CAAC;EAClD,IAAI,CAACF,SAAS,CAAC,OAAO,GAAGG,WAAW,CAAC,EAAE;IACnCH,SAAS,CAAC,OAAO,GAAGG,WAAW,CAAC,GAAG;MAC/BE,QAAQ,EAAE,MAAM;MAChBC,SAAS,MAAAC,gBAAA,iBACJJ,WAAW,EAAG,SAAS,CAC3B;MACDK,GAAG,MAAEA,sBAAG,EAAAT,gBAAA,KAAAA,gBAAA,OAAAU,uBAAA,2OAA+BN,WAAW,EAGxCA,WAAW,EAAmCA,WAAW;IAGvE,CAAC;EACL;EAEA,OAAO;IACHO,QAAQ,EAAEV,SAAS,CAAC,OAAO,GAAGG,WAAW,CAAC;IAC1CG,SAAS,MAAAC,gBAAA,iBACJJ,WAAW,EAAGD,IAAI;EAE3B,CAAC;AACL,CAAC;AAACS,OAAA,CAAAC,yBAAA,GAAAA,yBAAA;AAEK,IAAMR,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIF,IAAY;EAAA,OAAK,aAAa,GAAG,IAAAW,sBAAU,EAACX,IAAI,CAAC;AAAA;AAACS,OAAA,CAAAP,wBAAA,GAAAA,wBAAA"}