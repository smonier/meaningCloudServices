"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFragmentsInSelectionSet = findFragmentsInSelectionSet;
exports.findParametersInDocument = findParametersInDocument;
exports.replaceFragmentsInDocument = replaceFragmentsInDocument;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _graphql = require("graphql");
var _fragments = require("../fragments");
var _rfdc = _interopRequireDefault(require("rfdc"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var clone = (0, _rfdc["default"])();
function findParametersInDocument(doc) {
  if (doc && doc.definitions) {
    return doc.definitions.flatMap(function (def) {
      return 'selectionSet' in def ? findParametersInSelectionSet(def.selectionSet) : [];
    });
  }
  return [];
}
var queryCache = {};
function replaceFragmentsInDocument(doc, fragments) {
  if (!fragments) {
    fragments = [];
  }
  var key = doc.definitions[0].name.value + '__' + fragments.map(function (f) {
    return typeof f === 'string' ? _fragments.PredefinedFragments[f] : f;
  }).map(function (f) {
    return f.gql.definitions[0].name.value;
  }).sort().join('_');
  if (queryCache[key]) {
    return queryCache[key];
  }
  var clonedQuery = null;
  if (doc && doc.definitions) {
    clonedQuery = clone(doc);
    clonedQuery.definitions.forEach(function (def) {
      return 'selectionSet' in def && replaceFragmentsInSelectionSet(def.selectionSet, fragments, def, clonedQuery);
    });
    var operationDefinition = clonedQuery.definitions[0];
    operationDefinition.name.value = key;
  }
  queryCache[key] = clonedQuery;
  return clonedQuery;
}
function findParametersInSelectionSet(selectionSet) {
  if (selectionSet && selectionSet.selections) {
    return selectionSet.selections.flatMap(function (sel) {
      return 'arguments' in sel && sel.arguments.filter(function (arg) {
        return arg.value.kind === 'Variable';
      }).flatMap(function (arg) {
        return 'name' in arg.value ? arg.value.name.value : [];
      }).concat(findParametersInSelectionSet(sel.selectionSet)).filter(function (f) {
        return typeof f !== 'undefined';
      });
    });
  }
  return [];
}
function findFragmentsInSelectionSet(selectionSet) {
  if (selectionSet && selectionSet.selections) {
    return selectionSet.selections.filter(function (sel) {
      return sel.kind === 'FragmentSpread';
    }).map(function (sel) {
      return sel.name.value;
    }).concat(selectionSet.selections.flatMap(function (sel) {
      return findFragmentsInSelectionSet('selectionSet' in sel && sel.selectionSet);
    }));
  }
  return [];
}
function replaceFragmentsInSelectionSet(selectionSet, fragments, def, document) {
  if (selectionSet && selectionSet.selections) {
    var _ref3;
    var newFragmentsSpreads = [];
    var removedFragmentSpreads = [];
    // Look for all existing fragment spreads in selection set
    selectionSet.selections.filter(function (sel) {
      return sel.kind === 'FragmentSpread';
    }).forEach(function (sel) {
      // Handle only named fragments
      if (sel.name.value) {
        // Check if spread exists in current doc - if not, we replace or remove it
        var existing = document.definitions.find(function (definition) {
          return definition.kind === 'FragmentDefinition' && definition.name.value === sel.name.value;
        });
        if (!existing) {
          // First remove the spread, as it has no match in document
          removedFragmentSpreads.push(sel);

          // Check if a replacement is provided for this pseudo-fragment, then insert spreads and definitions
          if (fragments) {
            var applyableFragments = fragments.map(function (frag) {
              return typeof frag === 'string' ? _fragments.PredefinedFragments[frag] : frag;
            }).filter(function (frag) {
              return frag.applyFor === sel.name.value;
            });
            applyableFragments.flatMap(function (fragment) {
              return fragment.gql.definitions;
            }).forEach(function (frag) {
              var newSpread = clone(sel);
              newSpread.name.value = frag.name.value;
              newFragmentsSpreads.push(newSpread);

              // Add the new fragment definition in document if it has not already been added
              if (!document.definitions.find(function (definition) {
                return definition.kind === 'FragmentDefinition' && definition.name.value === frag.name.value;
              })) {
                document.definitions.push(frag);
              }
            });

            // Adds the associated variables to the query
            var allVariables = applyableFragments.reduce(function (result, n) {
              return _objectSpread(_objectSpread({}, result), n.variables);
            }, {});
            Object.entries(allVariables).forEach(function (_ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                name = _ref2[0],
                value = _ref2[1];
              if (!def.variableDefinitions.find(function (variableDef) {
                return variableDef.variable.name.value === name;
              })) {
                var type = (0, _graphql.parseType)(value, {
                  noLocation: true
                });
                def.variableDefinitions.push({
                  kind: 'VariableDefinition',
                  variable: {
                    kind: 'Variable',
                    name: {
                      kind: 'Name',
                      value: name
                    }
                  },
                  type: type
                });
              }
            });
          }
        }
      }
    });

    // Removed replaced spreads
    selectionSet.selections = selectionSet.selections.filter(function (sel) {
      return sel.kind !== 'FragmentSpread' || removedFragmentSpreads.indexOf(sel) === -1;
    });

    // Add all new spreads
    (_ref3 = selectionSet.selections).push.apply(_ref3, newFragmentsSpreads);

    // Recursively call on sub-selections set
    selectionSet.selections.forEach(function (sel) {
      return 'selectionSet' in sel && replaceFragmentsInSelectionSet(sel.selectionSet, fragments, def, document);
    });
  }
}
//# sourceMappingURL=fragments.utils.js.map
