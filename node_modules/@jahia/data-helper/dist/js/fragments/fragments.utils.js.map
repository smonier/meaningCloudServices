{"version":3,"names":["_graphql","require","_fragments","_rfdc","_interopRequireDefault","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","clone","rfdc","findParametersInDocument","doc","definitions","flatMap","def","findParametersInSelectionSet","selectionSet","queryCache","replaceFragmentsInDocument","fragments","name","value","map","f","PredefinedFragments","gql","sort","join","clonedQuery","replaceFragmentsInSelectionSet","operationDefinition","selections","sel","arg","kind","concat","findFragmentsInSelectionSet","document","_ref3","newFragmentsSpreads","removedFragmentSpreads","existing","find","definition","applyableFragments","frag","applyFor","fragment","newSpread","allVariables","reduce","result","n","variables","entries","_ref","_ref2","_slicedToArray2","variableDefinitions","variableDef","variable","type","parseType","noLocation","indexOf"],"sources":["fragments.utils.ts"],"sourcesContent":["import {\n    DefinitionNode,\n    DocumentNode,\n    FragmentSpreadNode,\n    NameNode,\n    parseType,\n    SelectionNode,\n    SelectionSetNode,\n    VariableDefinitionNode\n} from 'graphql';\nimport {Fragment, PredefinedFragments} from '../fragments';\nimport {ExecutableDefinitionNode, FragmentDefinitionNode, OperationDefinitionNode} from 'graphql/language/ast';\nimport rfdc from 'rfdc';\n\nconst clone = rfdc();\n\ntype Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n};\n\nfunction findParametersInDocument(doc: DocumentNode): string[] {\n    if (doc && doc.definitions) {\n        return doc.definitions.flatMap(def => 'selectionSet' in def ? findParametersInSelectionSet(def.selectionSet) : []);\n    }\n\n    return [];\n}\n\nconst queryCache: {[key:string]: DocumentNode} = {};\n\nfunction replaceFragmentsInDocument(doc: DocumentNode, fragments: (string|Fragment)[]) {\n    if (!fragments) {\n        fragments = [];\n    }\n\n    const key = (doc.definitions[0] as ExecutableDefinitionNode).name.value + '__' + fragments\n        .map(f => (typeof f === 'string') ? PredefinedFragments[f] : f)\n        .map(f => (f.gql.definitions[0] as FragmentDefinitionNode).name.value)\n        .sort()\n        .join('_');\n\n    if (queryCache[key]) {\n        return queryCache[key];\n    }\n\n    let clonedQuery: DocumentNode = null;\n    if (doc && doc.definitions) {\n        clonedQuery = clone(doc);\n        clonedQuery.definitions.forEach(def => 'selectionSet' in def && replaceFragmentsInSelectionSet(def.selectionSet, fragments, def, clonedQuery));\n        const operationDefinition = clonedQuery.definitions[0] as OperationDefinitionNode;\n        (operationDefinition.name as Mutable<NameNode>).value = key;\n    }\n\n    queryCache[key] = clonedQuery;\n\n    return clonedQuery;\n}\n\nfunction findParametersInSelectionSet(selectionSet: SelectionSetNode): string[] {\n    if (selectionSet && selectionSet.selections) {\n        return selectionSet.selections.flatMap(sel => 'arguments' in sel &&\n            sel.arguments.filter(arg => (arg.value.kind === 'Variable')).flatMap(arg => 'name' in arg.value ? arg.value.name.value : [])\n                .concat(findParametersInSelectionSet(sel.selectionSet))\n                .filter(f => typeof f !== 'undefined')\n        );\n    }\n\n    return [];\n}\n\nfunction findFragmentsInSelectionSet(selectionSet: SelectionSetNode): string[] {\n    if (selectionSet && selectionSet.selections) {\n        return selectionSet.selections\n            .filter<FragmentSpreadNode>((sel): sel is FragmentSpreadNode => sel.kind === 'FragmentSpread').map(sel => sel.name.value)\n            .concat(selectionSet.selections.flatMap(sel => findFragmentsInSelectionSet('selectionSet' in sel && sel.selectionSet)));\n    }\n\n    return [];\n}\n\nfunction replaceFragmentsInSelectionSet(selectionSet: SelectionSetNode, fragments: (string|Fragment)[], def: ExecutableDefinitionNode, document: Mutable<DocumentNode>) {\n    if (selectionSet && selectionSet.selections) {\n        const newFragmentsSpreads: FragmentSpreadNode[] = [];\n        const removedFragmentSpreads: FragmentSpreadNode[] = [];\n        // Look for all existing fragment spreads in selection set\n        selectionSet.selections.filter<FragmentSpreadNode>((sel): sel is FragmentSpreadNode => sel.kind === 'FragmentSpread').forEach(sel => {\n            // Handle only named fragments\n            if (sel.name.value) {\n                // Check if spread exists in current doc - if not, we replace or remove it\n                const existing = document.definitions.find(definition => definition.kind === 'FragmentDefinition' && definition.name.value === sel.name.value);\n\n                if (!existing) {\n                    // First remove the spread, as it has no match in document\n                    removedFragmentSpreads.push(sel);\n\n                    // Check if a replacement is provided for this pseudo-fragment, then insert spreads and definitions\n                    if (fragments) {\n                        const applyableFragments = fragments\n                            .map(frag => (typeof frag === 'string') ? PredefinedFragments[frag] : frag)\n                            .filter(frag => frag.applyFor === sel.name.value);\n\n                        applyableFragments.flatMap((fragment:Fragment) => fragment.gql.definitions).forEach((frag: FragmentDefinitionNode) => {\n                            const newSpread = clone(sel);\n                            (newSpread.name as Mutable<NameNode>).value = (frag as FragmentDefinitionNode).name.value;\n                            newFragmentsSpreads.push(newSpread);\n\n                            // Add the new fragment definition in document if it has not already been added\n                            if (!document.definitions.find(definition => definition.kind === 'FragmentDefinition' && definition.name.value === frag.name.value)) {\n                                (document.definitions as Array<DefinitionNode>).push(frag);\n                            }\n                        });\n\n                        // Adds the associated variables to the query\n                        const allVariables = applyableFragments.reduce((result:{[key: string]:string}, n) => ({...result, ...n.variables}), {});\n                        Object.entries(allVariables).forEach(([name, value]) => {\n                            if (!def.variableDefinitions.find(variableDef => variableDef.variable.name.value === name)) {\n                                const type = parseType(value, {noLocation: true});\n                                (def.variableDefinitions as Array<VariableDefinitionNode>).push({\n                                    kind: 'VariableDefinition',\n                                    variable: {\n                                        kind: 'Variable',\n                                        name: {\n                                            kind: 'Name',\n                                            value: name\n                                        }\n                                    },\n                                    type\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        });\n\n        // Removed replaced spreads\n        selectionSet.selections = selectionSet.selections.filter(sel => sel.kind !== 'FragmentSpread' || removedFragmentSpreads.indexOf(sel) === -1);\n\n        // Add all new spreads\n        (selectionSet.selections as Array<SelectionNode>).push(...newFragmentsSpreads);\n\n        // Recursively call on sub-selections set\n        selectionSet.selections.forEach(sel => 'selectionSet' in sel && replaceFragmentsInSelectionSet(sel.selectionSet, fragments, def, document));\n    }\n}\n\nexport {replaceFragmentsInDocument, findParametersInDocument, findFragmentsInSelectionSet};\n"],"mappings":"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"}