import React, { useContext } from 'react';
import { mount } from 'enzyme';
import { ComponentRendererProvider } from "./ComponentRendererProvider";
import PropTypes from 'prop-types';
import { ComponentRendererContext } from "./ComponentRendererContext";
var RenderedComponent = function RenderedComponent(_ref) {
  var label = _ref.label;
  return /*#__PURE__*/React.createElement("div", {
    className: "component"
  }, label);
};
RenderedComponent.propTypes = {
  label: PropTypes.string
};
var Render = function Render() {
  var renderer = useContext(ComponentRendererContext);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "open",
    onClick: function onClick() {
      return renderer.render('test', RenderedComponent, {
        label: 'test'
      });
    }
  }, "Open"), /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "update",
    onClick: function onClick() {
      return renderer.setProperties('test', {
        label: 'updated'
      });
    }
  }, "Update"), /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: "destroy",
    onClick: function onClick() {
      return renderer.destroy('test');
    }
  }, "Destroy"));
};
describe('ComponentRenderer', function () {
  it('should render the component', function () {
    var wrapper = mount( /*#__PURE__*/React.createElement(ComponentRendererProvider, null, /*#__PURE__*/React.createElement(Render, null)));
    wrapper.find('.open').simulate('click');
    expect(wrapper.find(RenderedComponent).props()).toStrictEqual({
      label: 'test'
    });
    wrapper.find('.update').simulate('click');
    expect(wrapper.find(RenderedComponent).props()).toStrictEqual({
      label: 'updated'
    });
    wrapper.find('.destroy').simulate('click');
  });
  it('should update the properties', function () {
    var wrapper = mount( /*#__PURE__*/React.createElement(ComponentRendererProvider, null, /*#__PURE__*/React.createElement(Render, null)));
    wrapper.find('.open').simulate('click');
    wrapper.find('.update').simulate('click');
    expect(wrapper.find(RenderedComponent).props()).toStrictEqual({
      label: 'updated'
    });
  });
  it('should delete the component', function () {
    var wrapper = mount( /*#__PURE__*/React.createElement(ComponentRendererProvider, null, /*#__PURE__*/React.createElement(Render, null)));
    wrapper.find('.open').simulate('click');
    wrapper.find('.destroy').simulate('click');
  });
});
//# sourceMappingURL=ComponentRenderer.spec.js.map
