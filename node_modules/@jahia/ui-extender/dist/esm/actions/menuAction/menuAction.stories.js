import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["render", "loading"];
import React, { useEffect, useState } from 'react';
import { storiesOf } from '@storybook/react';
import { DisplayAction } from "../core/DisplayAction";
import { registry } from "../../registry";
import { boolean as _boolean, number, withKnobs } from '@storybook/addon-knobs';
import PropTypes from 'prop-types';
import { ComponentRendererProvider } from "../../ComponentRenderer";
import { menuAction, MenuActionComponent } from "./menuAction";
import { action } from '@storybook/addon-actions';
import markdownNotes from "./README.md";
import { ButtonRenderer } from "../samples/ButtonRenderer";
var MenuRenderer = function MenuRenderer(_ref) {
  var isSubMenu = _ref.isSubMenu,
    anchor = _ref.anchor,
    isOpen = _ref.isOpen,
    isLoading = _ref.isLoading,
    onClose = _ref.onClose,
    onExited = _ref.onExited,
    onMouseEnter = _ref.onMouseEnter,
    onMouseLeave = _ref.onMouseLeave,
    children = _ref.children;
  var top = anchor.anchorPosition ? anchor.anchorPosition.top : anchor.anchorEl.getBoundingClientRect().top;
  var left = anchor.anchorPosition ? anchor.anchorPosition.left : anchor.anchorEl.getBoundingClientRect().right;
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isSubMenu && /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'fixed',
      width: '100vw',
      height: '100vh',
      top: 0,
      left: 0,
      pointerEvents: isOpen ? 'auto' : 'none',
      opacity: isOpen ? 0.4 : 0,
      transition: 'opacity 1s',
      backgroundColor: 'black'
    },
    onClick: onClose
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'fixed',
      top: top,
      left: left,
      border: '1px solid',
      backgroundColor: 'white',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      opacity: isOpen && !isLoading ? 1 : 0,
      transition: 'opacity 1s',
      zIndex: 100
    },
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onTransitionEnd: function onTransitionEnd() {
      return !isOpen && onExited();
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      flex: '0 1 auto'
    }
  }, children)));
};
MenuRenderer.propTypes = {
  isSubMenu: PropTypes.bool.isRequired,
  isOpen: PropTypes.bool.isRequired,
  isLoading: PropTypes.bool.isRequired,
  anchor: PropTypes.object.isRequired,
  onExited: PropTypes.func.isRequired,
  onMouseEnter: PropTypes.func.isRequired,
  onMouseLeave: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
  children: PropTypes.node.isRequired
};
var MenuItemRenderer = function MenuItemRenderer(_ref2) {
  var label = _ref2.label,
    onClick = _ref2.onClick,
    onMouseEnter = _ref2.onMouseEnter,
    onMouseLeave = _ref2.onMouseLeave;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      margin: 5
    },
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, label);
};
MenuItemRenderer.propTypes = {
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func
};
var readyList = [];
var AsyncComponent = function AsyncComponent(_ref3) {
  var Render = _ref3.render,
    Loading = _ref3.loading,
    props = _objectWithoutProperties(_ref3, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    ready = _useState2[0],
    setReady = _useState2[1];
  useEffect(function () {
    var t = setTimeout(function () {
      readyList.push(props.id);
      setReady(true);
    }, props.minTime);
    return function () {
      clearTimeout(t);
    };
  });
  if (!ready && readyList.indexOf(props.id) === -1) {
    if (props.isUseLoading && Loading) {
      return /*#__PURE__*/React.createElement(Loading, props);
    }
    return false;
  }
  return /*#__PURE__*/React.createElement(Render, _extends({}, props, {
    onClick: function onClick() {
      return window.alert('Async action');
    } // eslint-disable-line no-alert
  }));
};

AsyncComponent.propTypes = {
  id: PropTypes.string.isRequired,
  minTime: PropTypes.number,
  isUseLoading: PropTypes.bool,
  render: PropTypes.func.isRequired,
  loading: PropTypes.func.isRequired
};
function addMenu(key, targets, isMenuPreload) {
  registry.addOrReplace('action', key, menuAction, {
    label: key,
    targets: targets,
    isMenuPreload: isMenuPreload,
    menuTarget: key,
    menuRenderer: MenuRenderer,
    menuItemRenderer: MenuItemRenderer
  });
}
function addItem(key, targets, fn) {
  registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    onClick: fn
  });
}
function addAsyncItem(key, targets, minTime, isUseLoading, isVisible) {
  registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    minTime: minTime,
    isUseLoading: isUseLoading,
    isVisible: isVisible,
    component: AsyncComponent
  });
}
storiesOf('actions|menuAction', module).addParameters({
  component: MenuActionComponent,
  componentSubtitle: 'Menu action',
  notes: {
    markdown: markdownNotes
  }
}).addDecorator(function (storyFn) {
  return /*#__PURE__*/React.createElement(ComponentRendererProvider, null, storyFn());
}).addDecorator(withKnobs).add('default', function () {
  registry.clear();
  addMenu('menu');
  addItem('item1', ['menu:1'], action('menu item 1'));
  addItem('item2', ['menu:2'], action('menu item 2'));
  addItem('item3', ['menu:3'], action('menu item 3'));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Display all items that have the specified target"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer
  }));
}).add('Sub menu', function () {
  registry.clear();
  addMenu('menu');
  addMenu('submenu1', ['menu:4']);
  addMenu('submenu2', ['menu:5', 'submenu1:2']);
  addItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], action('menu item 1'));
  addItem('item2', ['menu:2'], action('menu item 2'));
  addItem('item3', ['menu:3'], action('menu item 3'));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Displays a menu with items registered with a specific target"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer
  }));
}).add('Async actions', function () {
  registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addAsyncItem('item1', ['menu'], number('time item1', 0));
  addAsyncItem('item2', ['menu'], number('time item2', 100));
  addAsyncItem('item3', ['menu'], number('time item3', 500));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer
  }));
}).add('Async with loading', function () {
  registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addAsyncItem('item1', ['menu'], number('time item1', 0), true);
  addAsyncItem('item2', ['menu'], number('time item2', 100), true);
  addAsyncItem('item3', ['menu'], number('time item3', 500), true);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - delayed menu open until loaded"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/React.createElement(ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
}).add('Async loading / preload', function () {
  registry.clear();
  readyList.length = 0;
  addMenu('menu', [], true);
  addAsyncItem('item1', ['menu'], number('time item1', 0), true);
  addAsyncItem('item2', ['menu'], number('time item2', 100), true);
  addAsyncItem('item3', ['menu'], number('time item3', 500), true);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - preload"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/React.createElement(ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
}).add('Empty async submenu', function () {
  registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addMenu('submenu1', ['menu:4'], true);
  addMenu('submenu2', ['menu:5', 'submenu1:2'], true);
  addAsyncItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], number('time item1', 0), true, _boolean('item1 visible', true));
  addAsyncItem('item2', ['menu:2', 'submenu1:2'], number('time item2', 100), true, _boolean('item2 visible', true));
  addAsyncItem('item3', ['menu:3'], number('time item3', 500), true, _boolean('item3 visible', true));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - preload"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/React.createElement(ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
});
//# sourceMappingURL=menuAction.stories.js.map
