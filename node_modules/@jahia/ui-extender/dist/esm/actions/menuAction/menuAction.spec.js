import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["render", "loading"];
import React, { useEffect, useState } from 'react';
import { DisplayAction } from "../core/DisplayAction";
import { registry } from "../../registry";
import PropTypes from 'prop-types';
import { menuAction } from "./menuAction";
import { ButtonRenderer } from "../samples/ButtonRenderer";
import { mount } from 'enzyme';
import { ComponentRendererProvider } from "../../ComponentRenderer";
import { act } from 'react-dom/test-utils';
jest.useFakeTimers();
var MenuRenderer = function MenuRenderer(_ref) {
  var menuKey = _ref.menuKey,
    isSubMenu = _ref.isSubMenu,
    isOpen = _ref.isOpen,
    isLoading = _ref.isLoading,
    onClose = _ref.onClose,
    onExited = _ref.onExited,
    onMouseEnter = _ref.onMouseEnter,
    onMouseLeave = _ref.onMouseLeave,
    children = _ref.children;
  // Simulate close animation, calls onExited after isOpen is set to false
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    previousOpen = _useState2[0],
    setPreviousOpen = _useState2[1];
  if (previousOpen !== isOpen) {
    setTimeout(function () {
      act(function () {
        if (isOpen) {
          setPreviousOpen(isOpen);
        } else {
          onExited();
        }
      });
    }, 0);
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isSubMenu && /*#__PURE__*/React.createElement("div", {
    className: "backdrop",
    onClick: onClose
  }), /*#__PURE__*/React.createElement("div", {
    className: isOpen && !isLoading ? 'menu' : 'xxxx',
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/React.createElement("div", {
    className: "menuItems",
    id: 'menu-' + menuKey
  }, children)));
};
MenuRenderer.propTypes = {
  menuKey: PropTypes.string.isRequired,
  isSubMenu: PropTypes.bool.isRequired,
  isOpen: PropTypes.bool.isRequired,
  isLoading: PropTypes.bool.isRequired,
  onExited: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onClose: PropTypes.func.isRequired,
  children: PropTypes.node.isRequired
};
var MenuItemRenderer = function MenuItemRenderer(_ref2) {
  var label = _ref2.label,
    actionKey = _ref2.actionKey,
    onClick = _ref2.onClick,
    onMouseEnter = _ref2.onMouseEnter,
    onMouseLeave = _ref2.onMouseLeave;
  return /*#__PURE__*/React.createElement("div", {
    className: "menuItem",
    id: 'item-' + actionKey,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, label);
};
MenuItemRenderer.propTypes = {
  actionKey: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func
};
var readyList = [];
var AsyncComponent = function AsyncComponent(_ref3) {
  var Render = _ref3.render,
    Loading = _ref3.loading,
    props = _objectWithoutProperties(_ref3, _excluded);
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    ready = _useState4[0],
    setReady = _useState4[1];
  useEffect(function () {
    var t = setTimeout(function () {
      readyList.push(props.id);
      setReady(true);
    }, props.minTime);
    return function () {
      clearTimeout(t);
    };
  }, [props.id, props.minTime]);
  if (!ready && readyList.indexOf(props.id) === -1) {
    if (props.isUseLoading && Loading) {
      return /*#__PURE__*/React.createElement(Loading, props);
    }
    return false;
  }
  return /*#__PURE__*/React.createElement(Render, _extends({}, props, {
    onClick: jest.fn
  }));
};
AsyncComponent.propTypes = {
  id: PropTypes.string.isRequired,
  minTime: PropTypes.number,
  isUseLoading: PropTypes.bool,
  render: PropTypes.func.isRequired,
  loading: PropTypes.func.isRequired
};
function addMenu(key, targets, isMenuPreload) {
  registry.addOrReplace('action', key, menuAction, {
    label: key,
    targets: targets,
    isMenuPreload: isMenuPreload,
    menuTarget: key,
    menuRenderer: MenuRenderer,
    menuItemRenderer: MenuItemRenderer
  });
}
function addItem(key, targets, fn) {
  registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    onClick: fn
  });
}
function addAsyncItem(key, targets, minTime, isUseLoading, isVisible) {
  registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    minTime: minTime,
    isUseLoading: isUseLoading,
    isVisible: isVisible,
    component: AsyncComponent
  });
}
function advanceTime(wrapper) {
  act(function () {
    jest.advanceTimersByTime(100);
    wrapper.update();
  });
}
function getWrapper() {
  return mount( /*#__PURE__*/React.createElement(ComponentRendererProvider, null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: ButtonRenderer
  })));
}
describe('Menu', function () {
  beforeEach(function () {
    registry.clear();
    readyList.length = 0;
  });
  it('should open menu on click', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    expect(wrapper.find('.menu').length).toBe(0);
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should close when clicking on backdrop', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.backdrop').length).toBe(1);
    wrapper.find('.backdrop').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
  });
  it('should call method and close when clicking on an item', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    wrapper.find('.menuItem').first().simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    expect(fn.mock.calls.length).toBe(1);
    expect(fn.mock.calls[0][0].label).toBe('item1');
  });
  it('should open sub menu on hover and close all on click item', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addMenu('submenu1', ['menu:4']);
    addMenu('submenu2', ['menu:5', 'submenu1:2']);
    addItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], fn);
    addItem('item2', ['menu:2'], fn);
    addItem('item3', ['menu:3'], fn);
    var wrapper = getWrapper();

    // Open main menu
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(5);

    // Hover 5th item (submenu-3)
    wrapper.find('.menu .menuItem').at(4).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(2);
    expect(wrapper.find('.menu .menuItem').length).toBe(6);

    // Hover 4th item (submenu-2), previous sub-menu should be closed
    wrapper.find('.menu .menuItem').at(3).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(2);
    expect(wrapper.find('.menu .menuItem').length).toBe(7);

    // Hover sub-sub-menu item
    var subMenu = wrapper.find('.menu').at(1);
    subMenu.find('.menuItem').at(1).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(3);
    expect(wrapper.find('.menu .menuItem').length).toBe(8);

    // Click item in sub-sub-menu
    wrapper.find('#menu-submenu2 #item-item1').last().simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    expect(fn.mock.calls.length).toBe(1);
    expect(fn.mock.calls[0][0].label).toBe('item1');
  });
  it('should update when using asynchronouns items', function () {
    addMenu('menu', []);
    addAsyncItem('async-item1', ['menu'], 0);
    addAsyncItem('async-item2', ['menu'], 200);
    addAsyncItem('async-item3', ['menu'], 300);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(1);
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(2);
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should appear when loaded when using asynchronouns items with loading', function () {
    addMenu('menu', [], false);
    addAsyncItem('async-item1', ['menu'], 0, true);
    addAsyncItem('async-item2', ['menu'], 200, true);
    addAsyncItem('async-item3', ['menu'], 300, true);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    //
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should preload menu', function () {
    addMenu('menu', [], true);
    addAsyncItem('async-item0', ['menu:1'], 0, true);
    addAsyncItem('async-item1', ['menu:1'], 200, true);
    addAsyncItem('async-item2', ['menu:1'], 300, true);
    var wrapper = getWrapper();
    advanceTime(wrapper);
    advanceTime(wrapper);
    advanceTime(wrapper);
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should not render empty menu', function () {
    addMenu('menu', [], false);
    addMenu('submenu1', ['menu'], true);
    addMenu('submenu2', ['menu'], true);
    addAsyncItem('async-item1', ['menu', 'submenu1', 'submenu2'], 100, true, false);
    addAsyncItem('async-item2', ['menu'], 100, true);
    addAsyncItem('async-item3', ['menu'], 100, true);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(2);
  });
});
//# sourceMappingURL=menuAction.spec.js.map
