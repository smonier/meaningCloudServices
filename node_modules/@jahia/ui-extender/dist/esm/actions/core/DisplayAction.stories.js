import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React, { useEffect, useState } from 'react';
import { storiesOf } from '@storybook/react';
import { DisplayAction } from "./DisplayAction";
import { registry } from "../../registry";
import { withKnobs } from '@storybook/addon-knobs';
import PropTypes from 'prop-types';
import markdownNotes from "./DisplayAction.md";
import { ButtonRenderer } from "../samples/ButtonRenderer";
import { LinkRenderer } from "../samples/LinkRenderer";
storiesOf('actions|DisplayAction', module).addParameters({
  component: DisplayAction,
  notes: {
    markdown: markdownNotes
  }
}).addDecorator(withKnobs).add('default', function () {
  registry.addOrReplace('action', 'test-action-1', {
    label: 'Simple action',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Display a single action"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
}).add('Simple action', function () {
  registry.addOrReplace('action', 'test-action-1', {
    label: 'test action 1',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  registry.addOrReplace('action', 'test-action-2', {
    label: 'test action 2',
    onClick: function onClick(context) {
      return window.alert('action 2 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Display multiple actions with different contexts"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test1"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  }), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test2"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test2'
    },
    render: ButtonRenderer
  }), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test2'
    },
    render: ButtonRenderer
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test3"), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test3'
    },
    render: ButtonRenderer
  }), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test3'
    },
    render: ButtonRenderer
  })));
}).add('Renderer', function () {
  registry.addOrReplace('action', 'test-action-1', {
    label: 'test action 1',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "The same action can be rendered differently, depending on the render property"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      margin: '10px'
    }
  }, "Button renderer : "), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test'
    },
    render: ButtonRenderer
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("span", {
    style: {
      margin: '10px'
    }
  }, "Link renderer : "), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test'
    },
    render: LinkRenderer
  })));
}).add('Composition', function () {
  var base = registry.addOrReplace('action', 'base', {
    onClick: function onClick(context) {
      return window.alert('composed action - label=' + context.param + ', array=' + context.arrayExample);
    },
    // eslint-disable-line no-alert
    arrayExample: ['value1']
  });
  registry.addOrReplace('action', 'compose-1', base, {
    param: '1',
    label: 'compose 1',
    arrayExample: ['value2']
  });
  registry.addOrReplace('action', 'compose-2', base, {
    param: '2',
    label: 'compose 2',
    onClick: function onClick(context, event, superMethod) {
      return window.confirm('composed action - do you want to call overriden action ?') && superMethod(context, event);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Create a new action by extending an existing action, by adding or replacing information in context. Overriding context is merged with the base one following these rules :", /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Arrays are concatenated"), /*#__PURE__*/React.createElement("li", null, "Functions are replaced, but the overriden function is passed as the last argument on call"), /*#__PURE__*/React.createElement("li", null, "Other attributes are replaced"))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "compose-1",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  }), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "compose-2",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
}).add('Component action', function () {
  var TestComponent1 = function TestComponent1(_ref) {
    var context = _ref.context,
      Render = _ref.render;
    return /*#__PURE__*/React.createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        onClick: function onClick() {
          return window.alert('Component action');
        } // eslint-disable-line no-alert
      })
    });
  };

  TestComponent1.propTypes = {
    context: PropTypes.object.isRequired,
    render: PropTypes.func.isRequired
  };
  registry.addOrReplace('action', 'component-1', {
    label: 'component 1',
    component: TestComponent1
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Action rendering is fully handled by a dedicated component, delegating to render for displaying the button"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "component-1",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
}).add('Component composition', function () {
  var TestComponent1 = function TestComponent1(_ref2) {
    var context = _ref2.context,
      Render = _ref2.render;
    return /*#__PURE__*/React.createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        onClick: function onClick() {
          return window.alert('Component action');
        } // eslint-disable-line no-alert
      })
    });
  };

  TestComponent1.propTypes = {
    context: PropTypes.object.isRequired,
    render: PropTypes.func.isRequired
  };
  var TestComponent2 = function TestComponent2(_ref3, refOrContext, Previous) {
    var context = _ref3.context,
      render = _ref3.render;
    return /*#__PURE__*/React.createElement(Previous, {
      render: render,
      context: _objectSpread(_objectSpread({}, context), {}, {
        label: context.label + ' overriden'
      })
    });
  };
  TestComponent2.propTypes = {
    context: PropTypes.object.isRequired,
    render: PropTypes.func.isRequired
  };
  var base = registry.addOrReplace('action', 'base', {
    component: TestComponent1
  });
  registry.addOrReplace('action', 'component-compose-1', base, {
    label: 'compose 1'
  });
  registry.addOrReplace('action', 'component-compose-2', base, {
    label: 'compose 2',
    component: TestComponent2
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "Component actions can also be composed - the overriden component can still be used as its passed to the render function as last parameter."), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "component-compose-1",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  }), /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "component-compose-2",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
}).add('Async component action', function () {
  var AsyncComponent = function AsyncComponent(_ref4) {
    var context = _ref4.context,
      Render = _ref4.render;
    var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
    useEffect(function () {
      var t = setInterval(function () {
        return setValue(value + 1);
      }, 1000);
      return function () {
        clearInterval(t);
      };
    });
    return value > 1 ? /*#__PURE__*/React.createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        label: context.label + value,
        onClick: function onClick() {
          return window.alert('Async action');
        } // eslint-disable-line no-alert
      })
    }) : /*#__PURE__*/React.createElement("span", null, "loading..");
  };
  AsyncComponent.propTypes = {
    context: PropTypes.object.isRequired,
    render: PropTypes.func.isRequired
  };
  registry.addOrReplace('action', 'async', {
    label: 'async',
    component: AsyncComponent
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "An action can render asynchronously and update its context"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "async",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
}).add('Spawn actions', function () {
  var SpawnActionsComponent = function SpawnActionsComponent(_ref5) {
    var context = _ref5.context,
      Render = _ref5.render;
    return context.names.map(function (name) {
      return /*#__PURE__*/React.createElement(Render, {
        key: name,
        context: _objectSpread(_objectSpread({}, context), {}, {
          label: context.label + ' ' + name,
          onClick: function onClick() {
            return window.alert('Spawn action ' + name);
          } // eslint-disable-line no-alert
        })
      });
    });
  };

  SpawnActionsComponent.propTypes = {
    context: PropTypes.object.isRequired,
    render: PropTypes.func.isRequired
  };
  registry.addOrReplace('action', 'spawn', {
    label: 'child action',
    names: ['child1', 'child2', 'child3'],
    component: SpawnActionsComponent
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "description"
  }, "A single action can spawn multiple buttons"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(DisplayAction, {
    actionKey: "spawn",
    context: {
      path: '/test1'
    },
    render: ButtonRenderer
  })));
});
//# sourceMappingURL=DisplayAction.stories.js.map
