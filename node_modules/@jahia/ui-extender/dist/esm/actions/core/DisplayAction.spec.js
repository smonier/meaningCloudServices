import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["render"],
  _excluded2 = ["render"],
  _excluded3 = ["render", "label"],
  _excluded4 = ["render", "label"],
  _excluded5 = ["render", "names", "label"];
import React, { useEffect, useState } from 'react';
import { DisplayAction } from "./DisplayAction";
import { registry } from "../../registry";
import { mount } from 'enzyme';
import { ButtonRenderer } from "../samples/ButtonRenderer";
import { LinkRenderer } from "../samples/LinkRenderer";
import PropTypes from 'prop-types';
import { act } from 'react-dom/test-utils';
jest.useFakeTimers();
describe('DisplayAction', function () {
  beforeEach(function () {
    registry.clear();
  });
  it('should call onClick when button is click', function () {
    var action = registry.addOrReplace('action', 'test-action-1', {
      label: 'Simple action',
      onClick: jest.fn()
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test1",
      render: ButtonRenderer
    }));
    expect(action.onClick.mock.calls.length).toBe(0);
    wrapper.find('button').simulate('click');
    expect(action.onClick.mock.calls.length).toBe(1);
  });
  it('should call method with different values', function () {
    var fn1 = jest.fn();
    registry.addOrReplace('action', 'test-action-1', {
      label: 'test action 1',
      value: 'test1',
      onClick: fn1
    });
    registry.addOrReplace('action', 'test-action-2', {
      label: 'test action 2',
      value: 'test2',
      onClick: fn1
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test1",
      render: ButtonRenderer
    }), /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-2",
      path: "/test1",
      render: ButtonRenderer
    })));
    wrapper.find('button').forEach(function (b) {
      return b.simulate('click');
    });
    expect(fn1.mock.calls.length).toBe(2);
    expect(fn1.mock.calls[0][0].value).toBe('test1');
    expect(fn1.mock.calls[1][0].value).toBe('test2');
  });
  it('should call method with different contexts', function () {
    var fn1 = jest.fn();
    registry.addOrReplace('action', 'test-action-1', {
      label: 'test action 1',
      onClick: fn1
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test1",
      render: ButtonRenderer
    }), /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test2",
      render: ButtonRenderer
    })));
    wrapper.find('button').forEach(function (b) {
      return b.simulate('click');
    });
    expect(fn1.mock.calls.length).toBe(2);
    expect(fn1.mock.calls[0][0].path).toBe('/test1');
    expect(fn1.mock.calls[1][0].path).toBe('/test2');
  });
  it('Renderer', function () {
    registry.addOrReplace('action', 'test-action-1', {
      label: 'test action 1',
      onClick: jest.fn()
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test",
      render: ButtonRenderer
    }), /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "test-action-1",
      path: "/test",
      render: LinkRenderer
    })));
    expect(wrapper.find('button').length).toBe(1);
    expect(wrapper.find('span').length).toBe(1);
  });
  it('should handle composition on onClick', function () {
    var fn1 = jest.fn();
    var fn2 = jest.fn();
    var base = registry.addOrReplace('action', 'base', {
      onClick: fn1,
      arrayExample: ['value1']
    });
    registry.addOrReplace('action', 'compose-1', base, {
      param: '1',
      label: 'compose 1',
      arrayExample: ['value2']
    });
    registry.addOrReplace('action', 'compose-2', base, {
      param: '2',
      label: 'compose 2',
      onClick: fn2
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "compose-1",
      path: "/test1",
      render: ButtonRenderer
    }), /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "compose-2",
      path: "/test1",
      render: ButtonRenderer
    })));
    wrapper.find('button').forEach(function (b) {
      return b.simulate('click');
    });
    expect(fn1.mock.calls.length).toBe(1);
    expect(fn1.mock.calls[0][0].param).toBe('1');
    expect(fn2.mock.calls.length).toBe(1);
    expect(fn2.mock.calls[0][0].param).toBe('2');
    expect(fn2.mock.calls[0][2]).toBe(fn1);
  });
  it('should render component action', function () {
    var fn1 = jest.fn();
    var TestComponent1 = function TestComponent1(_ref) {
      var Render = _ref.render,
        props = _objectWithoutProperties(_ref, _excluded);
      return /*#__PURE__*/React.createElement(Render, _extends({}, props, {
        onClick: fn1
      }));
    };
    TestComponent1.propTypes = {
      render: PropTypes.func.isRequired
    };
    registry.addOrReplace('action', 'component-1', {
      label: 'component 1',
      component: TestComponent1
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "component-1",
      path: "/test1",
      render: ButtonRenderer
    }));
    wrapper.find('button').simulate('click');
    expect(fn1.mock.calls.length).toBe(1);
    expect(fn1.mock.calls[0][0].path).toBe('/test1');
  });
  it('handle component composition', function () {
    var fn1 = jest.fn();
    var TestComponent1 = function TestComponent1(_ref2) {
      var Render = _ref2.render,
        props = _objectWithoutProperties(_ref2, _excluded2);
      return /*#__PURE__*/React.createElement(Render, _extends({}, props, {
        onClick: fn1
      }));
    };
    TestComponent1.propTypes = {
      render: PropTypes.func.isRequired
    };
    var TestComponent2 = function TestComponent2(_ref3, refOrContext, Previous) {
      var render = _ref3.render,
        label = _ref3.label,
        props = _objectWithoutProperties(_ref3, _excluded3);
      return /*#__PURE__*/React.createElement(Previous, _extends({
        extended: true,
        render: render,
        label: label + ' overriden'
      }, props));
    };
    TestComponent2.propTypes = {
      label: PropTypes.string.isRequired,
      render: PropTypes.func.isRequired
    };
    var base = registry.addOrReplace('action', 'base', {
      component: TestComponent1
    });
    registry.addOrReplace('action', 'component-compose-1', base, {
      param: '1',
      label: 'compose 1'
    });
    registry.addOrReplace('action', 'component-compose-2', base, {
      param: '2',
      label: 'compose 2',
      component: TestComponent2
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "component-compose-1",
      path: "/test1",
      render: ButtonRenderer
    }), /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "component-compose-2",
      path: "/test1",
      render: ButtonRenderer
    })));
    wrapper.find('button').forEach(function (b) {
      return b.simulate('click');
    });
    expect(fn1.mock.calls.length).toBe(2);
    expect(fn1.mock.calls[0][0].path).toBe('/test1');
    expect(fn1.mock.calls[0][0].param).toBe('1');
    expect(fn1.mock.calls[1][0].path).toBe('/test1');
    expect(fn1.mock.calls[1][0].param).toBe('2');
    expect(fn1.mock.calls[1][0].extended).toBe(true);
  });
  it('should update its rendering when using async components', function () {
    var fn1 = jest.fn();
    var AsyncComponent = function AsyncComponent(_ref4) {
      var Render = _ref4.render,
        label = _ref4.label,
        props = _objectWithoutProperties(_ref4, _excluded4);
      var _useState = useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        value = _useState2[0],
        setValue = _useState2[1];
      useEffect(function () {
        var t = setInterval(function () {
          act(function () {
            return setValue(value + 1);
          });
        }, 1000);
        return function () {
          clearInterval(t);
        };
      });
      return value > 1 ? /*#__PURE__*/React.createElement(Render, _extends({
        label: label + value,
        value: value
      }, props, {
        onClick: fn1
      })) : /*#__PURE__*/React.createElement("span", null, "loading..");
    };
    AsyncComponent.propTypes = {
      label: PropTypes.string.isRequired,
      render: PropTypes.func.isRequired
    };
    registry.addOrReplace('action', 'async', {
      label: 'async',
      component: AsyncComponent
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "async",
      path: "/test1",
      render: ButtonRenderer
    }));
    expect(setInterval).toHaveBeenCalledTimes(1);
    expect(wrapper.find('button').length).toBe(0);
    jest.advanceTimersByTime(1000);
    wrapper.update();
    expect(wrapper.find('button').length).toBe(1);
    wrapper.find('button').simulate('click');
    expect(fn1.mock.calls.length).toBe(1);
    expect(fn1.mock.calls[0][0].value).toBe(2);
  });
  it('should be able to spawn multiple buttons', function () {
    var fn1 = jest.fn();
    var SpawnActionsComponent = function SpawnActionsComponent(_ref5) {
      var Render = _ref5.render,
        names = _ref5.names,
        label = _ref5.label,
        props = _objectWithoutProperties(_ref5, _excluded5);
      return names.map(function (name) {
        return /*#__PURE__*/React.createElement(Render, _extends({
          key: name,
          name: name,
          label: label + ' ' + name
        }, props, {
          onClick: fn1
        }));
      });
    };
    SpawnActionsComponent.propTypes = {
      label: PropTypes.string.isRequired,
      names: PropTypes.arrayOf(PropTypes.string).isRequired,
      render: PropTypes.func.isRequired
    };
    registry.addOrReplace('action', 'spawn', {
      label: 'child action',
      names: ['child1', 'child2', 'child3'],
      component: SpawnActionsComponent
    });
    var wrapper = mount( /*#__PURE__*/React.createElement(DisplayAction, {
      actionKey: "spawn",
      path: "/test1",
      render: ButtonRenderer
    }));
    wrapper.find('button').forEach(function (b) {
      return b.simulate('click');
    });
    expect(fn1.mock.calls.length).toBe(3);
    expect(fn1.mock.calls[0][0].path).toBe('/test1');
    expect(fn1.mock.calls[0][0].name).toBe('child1');
    expect(fn1.mock.calls[1][0].name).toBe('child2');
    expect(fn1.mock.calls[2][0].name).toBe('child3');
  });
});
//# sourceMappingURL=DisplayAction.spec.js.map
