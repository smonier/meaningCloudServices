import { registry } from "../registry";
import { useAdminRouteTreeStructure } from "./useAdminRoutesTreeStructure";
jest.mock('react', function () {
  return {
    useMemo: function useMemo(v) {
      return v();
    }
  };
});
jest.mock("../IframeRenderer", function () {
  //
});
describe('useAdminRoutesTreeStructure', function () {
  beforeEach(function () {
    registry.clear();
  });
  it('should get the items', function () {
    registry.addOrReplace('adminRoute', 'route1', {
      targets: ['test:1'],
      isSelectable: false,
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'route2', {
      targets: ['test:2'],
      isSelectable: true,
      label: 'test route 2'
    });
    registry.addOrReplace('adminRoute', 'route3', {
      targets: ['test:3'],
      isSelectable: true,
      label: 'test route 3'
    });
    var _useAdminRouteTreeStr = useAdminRouteTreeStructure('test'),
      tree = _useAdminRouteTreeStr.tree,
      routes = _useAdminRouteTreeStr.routes;
    expect(routes.length).toBe(3);
    expect(tree.getData().length).toBe(3);
  });
  it('should create a tree', function () {
    registry.addOrReplace('adminRoute', 'mainRoute', {
      targets: ['test:1'],
      isSelectable: false,
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'subroute-2', {
      targets: ['test-mainRoute:1'],
      isSelectable: true,
      label: 'test route 2'
    });
    registry.addOrReplace('adminRoute', 'subroute-3', {
      targets: ['test-mainRoute:2'],
      isSelectable: true,
      label: 'test route 3'
    });
    var _useAdminRouteTreeStr2 = useAdminRouteTreeStructure('test'),
      tree = _useAdminRouteTreeStr2.tree,
      routes = _useAdminRouteTreeStr2.routes;
    expect(routes.length).toBe(3);
    expect(tree.getData().length).toBe(1);
    expect(tree.getData()[0].children.length).toBe(2);
  });
  it('should open the tree', function () {
    registry.addOrReplace('adminRoute', 'mainRoute', {
      targets: ['test:1'],
      isSelectable: false,
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'subroute', {
      targets: ['test-mainRoute:1'],
      isSelectable: true,
      label: 'test route 2'
    });
    registry.addOrReplace('adminRoute', 'subsubroute', {
      targets: ['test-subroute:1'],
      isSelectable: true,
      label: 'test route 3'
    });
    var _useAdminRouteTreeStr3 = useAdminRouteTreeStructure('test', 'subsubroute'),
      defaultOpenedItems = _useAdminRouteTreeStr3.defaultOpenedItems;
    console.log(defaultOpenedItems);
    expect(defaultOpenedItems.length).toBe(2);
    expect(defaultOpenedItems).toContain('mainRoute');
    expect(defaultOpenedItems).toContain('subroute');
  });
  it('should gather permissions', function () {
    registry.addOrReplace('adminRoute', 'mainRoute', {
      targets: ['test:1'],
      isSelectable: false,
      requiredPermission: 'xx1',
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'subroute', {
      targets: ['test-mainRoute:1'],
      isSelectable: true,
      requiredPermission: 'xx2',
      label: 'test route 2'
    });
    registry.addOrReplace('adminRoute', 'subsubroute', {
      targets: ['test-subroute:1'],
      isSelectable: true,
      requiredPermission: 'xx1',
      label: 'test route 3'
    });
    var _useAdminRouteTreeStr4 = useAdminRouteTreeStructure('test', 'subsubroute'),
      allPermissions = _useAdminRouteTreeStr4.allPermissions;
    expect(allPermissions.length).toBe(2);
    expect(allPermissions).toContain('xx1');
    expect(allPermissions).toContain('xx2');
  });
  it('should filter tree', function () {
    registry.addOrReplace('adminRoute', 'mainRoute', {
      targets: ['test:1'],
      isSelectable: false,
      isMainNode: true,
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'subroute', {
      targets: ['test-mainRoute:1'],
      isSelectable: true,
      label: 'test route 2'
    });
    var _useAdminRouteTreeStr5 = useAdminRouteTreeStructure('test'),
      tree = _useAdminRouteTreeStr5.tree;
    expect(tree.filter(function (item) {
      return item.isSelectable;
    }).getData().length).toBe(0);
    expect(tree.filter(function (item) {
      return item.isMainNode;
    }).getData().length).toBe(1);
    expect(tree.filter(function (item) {
      return item.isMainNode;
    }).getData()[0].children.length).toBe(0);
  });
  it('should map tree', function () {
    registry.addOrReplace('adminRoute', 'mainRoute', {
      targets: ['test:1'],
      isSelectable: false,
      isMainNode: true,
      label: 'test route 1'
    });
    registry.addOrReplace('adminRoute', 'subroute', {
      targets: ['test-mainRoute:1'],
      isSelectable: true,
      label: 'test route 2'
    });
    var _useAdminRouteTreeStr6 = useAdminRouteTreeStructure('test'),
      tree = _useAdminRouteTreeStr6.tree;
    expect(tree.map(function (item) {
      return {
        value: item.label
      };
    }).getData()[0].value).toBe('test route 1');
    expect(tree.map(function (item) {
      return {
        value: item.label
      };
    }).getData()[0].children[0].value).toBe('test route 2');
  });
});
//# sourceMappingURL=useAdminRoutesTreeStructure.spec.js.map
