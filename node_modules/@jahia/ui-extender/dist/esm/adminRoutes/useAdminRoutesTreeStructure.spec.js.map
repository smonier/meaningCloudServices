{"version":3,"names":["registry","useAdminRouteTreeStructure","jest","mock","useMemo","v","describe","beforeEach","clear","it","addOrReplace","targets","isSelectable","label","_useAdminRouteTreeStr","tree","routes","expect","length","toBe","getData","_useAdminRouteTreeStr2","children","_useAdminRouteTreeStr3","defaultOpenedItems","console","log","toContain","requiredPermission","_useAdminRouteTreeStr4","allPermissions","isMainNode","_useAdminRouteTreeStr5","filter","item","_useAdminRouteTreeStr6","map","value"],"sources":["useAdminRoutesTreeStructure.spec.js"],"sourcesContent":["import {registry} from '../registry';\nimport {useAdminRouteTreeStructure} from './useAdminRoutesTreeStructure';\n\njest.mock('react', () => ({\n    useMemo: v => v()\n}));\n\njest.mock('../IframeRenderer', () => {\n    //\n});\n\ndescribe('useAdminRoutesTreeStructure', () => {\n    beforeEach(() => {\n        registry.clear();\n    });\n\n    it('should get the items', () => {\n        registry.addOrReplace('adminRoute', 'route1', {\n            targets: ['test:1'],\n            isSelectable: false,\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'route2', {\n            targets: ['test:2'],\n            isSelectable: true,\n            label: 'test route 2'\n        });\n        registry.addOrReplace('adminRoute', 'route3', {\n            targets: ['test:3'],\n            isSelectable: true,\n            label: 'test route 3'\n        });\n\n        const {tree, routes} = useAdminRouteTreeStructure('test');\n\n        expect(routes.length).toBe(3);\n        expect(tree.getData().length).toBe(3);\n    });\n\n    it('should create a tree', () => {\n        registry.addOrReplace('adminRoute', 'mainRoute', {\n            targets: ['test:1'],\n            isSelectable: false,\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'subroute-2', {\n            targets: ['test-mainRoute:1'],\n            isSelectable: true,\n            label: 'test route 2'\n        });\n        registry.addOrReplace('adminRoute', 'subroute-3', {\n            targets: ['test-mainRoute:2'],\n            isSelectable: true,\n            label: 'test route 3'\n        });\n\n        const {tree, routes} = useAdminRouteTreeStructure('test');\n\n        expect(routes.length).toBe(3);\n        expect(tree.getData().length).toBe(1);\n        expect(tree.getData()[0].children.length).toBe(2);\n    });\n\n    it('should open the tree', () => {\n        registry.addOrReplace('adminRoute', 'mainRoute', {\n            targets: ['test:1'],\n            isSelectable: false,\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'subroute', {\n            targets: ['test-mainRoute:1'],\n            isSelectable: true,\n            label: 'test route 2'\n        });\n        registry.addOrReplace('adminRoute', 'subsubroute', {\n            targets: ['test-subroute:1'],\n            isSelectable: true,\n            label: 'test route 3'\n        });\n\n        const {defaultOpenedItems} = useAdminRouteTreeStructure('test', 'subsubroute');\n\n        console.log(defaultOpenedItems);\n\n        expect(defaultOpenedItems.length).toBe(2);\n        expect(defaultOpenedItems).toContain('mainRoute');\n        expect(defaultOpenedItems).toContain('subroute');\n    });\n\n    it('should gather permissions', () => {\n        registry.addOrReplace('adminRoute', 'mainRoute', {\n            targets: ['test:1'],\n            isSelectable: false,\n            requiredPermission: 'xx1',\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'subroute', {\n            targets: ['test-mainRoute:1'],\n            isSelectable: true,\n            requiredPermission: 'xx2',\n            label: 'test route 2'\n        });\n        registry.addOrReplace('adminRoute', 'subsubroute', {\n            targets: ['test-subroute:1'],\n            isSelectable: true,\n            requiredPermission: 'xx1',\n            label: 'test route 3'\n        });\n\n        const {allPermissions} = useAdminRouteTreeStructure('test', 'subsubroute');\n\n        expect(allPermissions.length).toBe(2);\n        expect(allPermissions).toContain('xx1');\n        expect(allPermissions).toContain('xx2');\n    });\n\n    it('should filter tree', () => {\n        registry.addOrReplace('adminRoute', 'mainRoute', {\n            targets: ['test:1'],\n            isSelectable: false,\n            isMainNode: true,\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'subroute', {\n            targets: ['test-mainRoute:1'],\n            isSelectable: true,\n            label: 'test route 2'\n        });\n\n        const {tree} = useAdminRouteTreeStructure('test');\n\n        expect(tree.filter(item => item.isSelectable).getData().length).toBe(0);\n        expect(tree.filter(item => item.isMainNode).getData().length).toBe(1);\n        expect(tree.filter(item => item.isMainNode).getData()[0].children.length).toBe(0);\n    });\n\n    it('should map tree', () => {\n        registry.addOrReplace('adminRoute', 'mainRoute', {\n            targets: ['test:1'],\n            isSelectable: false,\n            isMainNode: true,\n            label: 'test route 1'\n        });\n        registry.addOrReplace('adminRoute', 'subroute', {\n            targets: ['test-mainRoute:1'],\n            isSelectable: true,\n            label: 'test route 2'\n        });\n\n        const {tree} = useAdminRouteTreeStructure('test');\n\n        expect(tree.map(item => ({value: item.label})).getData()[0].value).toBe('test route 1');\n        expect(tree.map(item => ({value: item.label})).getData()[0].children[0].value).toBe('test route 2');\n    });\n});\n"],"mappings":"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"}