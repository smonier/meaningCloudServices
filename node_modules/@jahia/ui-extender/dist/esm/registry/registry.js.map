{"version":3,"names":["composeServices","Registry","_classCallCheck","registry","_createClass","key","value","addOrReplace","type","registryKey","_len","arguments","length","services","Array","_key","service","apply","targets","map","t","spl","split","id","priority","storedService","_objectSpread","add","Error","_len2","_key2","concat","get","remove","_this","entries","find","forEach","entry","filters","result","Object","values","target","otherFilters","_objectWithoutProperties","_excluded","filter","item","includes","sort","a","b","foundA","foundB","priorityA","Number","priorityB","isNaN","keys","clear"],"sources":["registry.ts"],"sourcesContent":["import {composeServices} from './composeServices';\nimport {Service, StoredService, Target} from '~/registry/service';\n\nclass Registry {\n    registry: {[key: string]: StoredService};\n\n    constructor() {\n        this.registry = {};\n    }\n\n    addOrReplace(type: string, key: string, ...services: Partial<Service>[]): StoredService {\n        const registryKey = type + '-' + key;\n\n        const service = composeServices(...services);\n        const targets = (service.targets) ?\n            service.targets.map(t => {\n                if (typeof t === 'string') {\n                    const spl = t.split(':');\n                    return ({id: spl[0], priority: spl[1] ? spl[1] : 0}) as Target;\n                }\n\n                return t;\n            }) : [];\n\n        const storedService: StoredService = {\n            ...service,\n            targets,\n            type,\n            key\n        };\n        this.registry[registryKey] = storedService;\n\n        return storedService;\n    }\n\n    add(type: string, key: string, ...services: Partial<Service>[]): StoredService {\n        const registryKey = type + '-' + key;\n        if (this.registry[registryKey]) {\n            throw new Error('Entry already exist for key ' + key);\n        }\n\n        return this.addOrReplace(type, key, ...services);\n    }\n\n    get(type: string, key: string): StoredService {\n        return this.registry[type + '-' + key];\n    }\n\n    remove(type: string, key: string): void {\n        if (key) {\n            const registryKey = type + '-' + key;\n            if (this.registry[registryKey]) {\n                delete this.registry[type + '-' + key];\n            }\n        } else {\n            const entries = this.find({type});\n            if (entries) {\n                entries.forEach(entry => this.remove(type, entry.key));\n            }\n        }\n    }\n\n    find(filters: {target?:string, [key:string]: unknown}): StoredService[] {\n        let result = Object.values(this.registry);\n        const {target, ...otherFilters} = filters;\n        if (target) {\n            result = result\n                .filter(item => item.targets && item.targets\n                    .map(t => t.id)\n                    .includes(filters.target))\n                .sort((a, b) => {\n                    const foundA = a.targets && a.targets.find(t => t.id === filters.target);\n                    const foundB = b.targets && b.targets.find(t => t.id === filters.target);\n                    const priorityA = foundA && Number(foundA.priority);\n                    const priorityB = foundB && Number(foundB.priority);\n\n                    if (isNaN(priorityA) && isNaN(priorityB)) {\n                        return 0;\n                    }\n\n                    if (isNaN(priorityA)) {\n                        return -1;\n                    }\n\n                    if (isNaN(priorityB)) {\n                        return 1;\n                    }\n\n                    return priorityA - priorityB;\n                });\n        }\n\n        return result.filter(item =>\n            // Try to find one key that doesn't match\n            !Object.keys(otherFilters)\n                .find(key => item[key] !== otherFilters[key])\n        );\n    }\n\n    clear() {\n        this.registry = {};\n    }\n}\n\nconst registry = new Registry();\n\nexport {registry};\n"],"mappings":"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"}