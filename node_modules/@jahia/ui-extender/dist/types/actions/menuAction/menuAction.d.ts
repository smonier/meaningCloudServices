import React from 'react';
export declare type AnchorPosition = {
    top: number;
    left: number;
};
export declare type AnchorElOrigin = {
    horizontal: 'left' | 'center' | 'right';
    vertical: 'top' | 'center' | 'bottom';
};
export declare type TransformElOrigin = {
    horizontal: 'left' | 'right';
    vertical: 'top' | 'bottom';
};
type Anchor = {
    anchorEl?: unknown;
    anchorPosition?: AnchorPosition;
    anchorElOrigin?: AnchorElOrigin;
    transformElOrigin?: TransformElOrigin;
};
type MenuContext = {
    id: string;
    dispatch: (action: ActionType) => void;
    display: (currentCtx: object, anchor: Anchor) => void;
};
type MenuItemRendererProps = {
    onClick?: (event: React.MouseEvent) => void;
    onMouseEnter?: (event: React.MouseEvent) => void;
    onMouseLeave?: (event: React.MouseEvent) => void;
};
export type MenuProps = {
    id: string;
    actionKey: string;
    menuRenderer?: React.FunctionComponent<MenuRendererProps>;
    menuItemRenderer?: React.FunctionComponent<MenuItemRendererProps>;
    menuItemProps?: object;
    isMenuPreload?: boolean;
    menuTarget: string;
    menuFilter?: () => boolean;
    isMenuUseEventPosition?: boolean;
    buttonIcon?: React.ReactElement;
    originalContext?: object;
    rootMenuContext?: MenuContext;
    parentMenuContext?: MenuContext;
    menuContext: MenuContext;
    menuState?: MenuState;
};
export type MenuRendererProps = {
    id: string;
    context: object;
    menuKey: string;
    isOpen: boolean;
    isSubMenu: boolean;
    isLoading: boolean;
    anchor: Anchor;
    onMouseEnter?: (event: React.MouseEvent) => void;
    onMouseLeave?: (event: React.MouseEvent) => void;
    onClose?: (event: Event) => void;
    onExited?: (event: Event) => void;
};
type MenuState = {
    id: string;
    currentCtx: object & {
        originalContext?: object;
    };
    anchor: Anchor;
    isRendered: boolean;
    isOpen: boolean;
    isInMenu: boolean;
    isSubMenu: boolean;
    subMenuContext?: MenuContext;
    loadingItems: string[];
    loadedItems: string[];
};
type ActionType = {
    type: 'render';
    currentCtx: object;
} | {
    type: 'destroy';
} | {
    type: 'open';
    anchor: Anchor;
} | {
    type: 'close';
} | {
    type: 'leaveItem';
} | {
    type: 'enterMenu';
} | {
    type: 'leaveMenu';
} | {
    type: 'setSubMenuContext';
    value: MenuContext;
} | {
    type: 'loading';
    item: string;
} | {
    type: 'loaded';
    item: string;
    isVisible: boolean;
};
export type MenuActionComponentProps = {
    /**
     * Action unique id
     */
    id: string;
    /**
     * Renderer used to render the menu
     */
    menuRenderer?: React.FunctionComponent;
    actionKey: string;
    /**
     * Renderer used to render an item in the menu
     */
    menuItemRenderer?: React.FunctionComponent;
    /**
     * Should the actions of the menu be preloaded
     */
    isMenuPreload?: boolean;
    /**
     * Target defining which actions to display in the menu
     */
    menuTarget: string;
    /**
     * Filter actions to display in the menu
     */
    menuFilter?: () => boolean;
    /**
     * Should the menu be displayed at the event position, or under the current element
     */
    isMenuUseEventPosition?: boolean;
    /**
     * Props passed to the main DisplayAction
     */
    originalContext?: object;
    /**
     * Root menu context, if sub menu (internal)
     */
    rootMenuContext?: MenuContext;
    /**
     * Parent menu context, if sub menu (internal)
     */
    parentMenuContext?: MenuContext;
    /**
     * Render for the action button
     */
    render: React.FunctionComponent<any>;
    /**
     * Render for the action button
     */
    loading: React.FunctionComponent<any>;
    /**
     * Helps determine if action is visible
     */
    visibilityPredicate?: (state: MenuState) => boolean;
};
declare const MenuActionComponent: (props: MenuActionComponentProps) => React.JSX.Element;
/**
 * Context properties :
 *
 * menu : name of the target of actions to display in the menu
 * menuRenderer
 * menuItemRenderer
 */
declare const menuAction: {
    component: (props: MenuActionComponentProps) => React.JSX.Element;
};
export { menuAction, MenuActionComponent };
