"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _DisplayAction = require("../core/DisplayAction");
var _registry = require("../../registry");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _menuAction = require("./menuAction");
var _ButtonRenderer = require("../samples/ButtonRenderer");
var _enzyme = require("enzyme");
var _ComponentRenderer = require("../../ComponentRenderer");
var _testUtils = require("react-dom/test-utils");
var _excluded = ["render", "loading"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
jest.useFakeTimers();
var MenuRenderer = function MenuRenderer(_ref) {
  var menuKey = _ref.menuKey,
    isSubMenu = _ref.isSubMenu,
    isOpen = _ref.isOpen,
    isLoading = _ref.isLoading,
    onClose = _ref.onClose,
    onExited = _ref.onExited,
    onMouseEnter = _ref.onMouseEnter,
    onMouseLeave = _ref.onMouseLeave,
    children = _ref.children;
  // Simulate close animation, calls onExited after isOpen is set to false
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    previousOpen = _useState2[0],
    setPreviousOpen = _useState2[1];
  if (previousOpen !== isOpen) {
    setTimeout(function () {
      (0, _testUtils.act)(function () {
        if (isOpen) {
          setPreviousOpen(isOpen);
        } else {
          onExited();
        }
      });
    }, 0);
  }
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !isSubMenu && /*#__PURE__*/_react["default"].createElement("div", {
    className: "backdrop",
    onClick: onClose
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: isOpen && !isLoading ? 'menu' : 'xxxx',
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "menuItems",
    id: 'menu-' + menuKey
  }, children)));
};
MenuRenderer.propTypes = {
  menuKey: _propTypes["default"].string.isRequired,
  isSubMenu: _propTypes["default"].bool.isRequired,
  isOpen: _propTypes["default"].bool.isRequired,
  isLoading: _propTypes["default"].bool.isRequired,
  onExited: _propTypes["default"].func,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func,
  onClose: _propTypes["default"].func.isRequired,
  children: _propTypes["default"].node.isRequired
};
var MenuItemRenderer = function MenuItemRenderer(_ref2) {
  var label = _ref2.label,
    actionKey = _ref2.actionKey,
    onClick = _ref2.onClick,
    onMouseEnter = _ref2.onMouseEnter,
    onMouseLeave = _ref2.onMouseLeave;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "menuItem",
    id: 'item-' + actionKey,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, label);
};
MenuItemRenderer.propTypes = {
  actionKey: _propTypes["default"].string.isRequired,
  label: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func.isRequired,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func
};
var readyList = [];
var AsyncComponent = function AsyncComponent(_ref3) {
  var Render = _ref3.render,
    Loading = _ref3.loading,
    props = (0, _objectWithoutProperties2["default"])(_ref3, _excluded);
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    ready = _useState4[0],
    setReady = _useState4[1];
  (0, _react.useEffect)(function () {
    var t = setTimeout(function () {
      readyList.push(props.id);
      setReady(true);
    }, props.minTime);
    return function () {
      clearTimeout(t);
    };
  }, [props.id, props.minTime]);
  if (!ready && readyList.indexOf(props.id) === -1) {
    if (props.isUseLoading && Loading) {
      return /*#__PURE__*/_react["default"].createElement(Loading, props);
    }
    return false;
  }
  return /*#__PURE__*/_react["default"].createElement(Render, (0, _extends2["default"])({}, props, {
    onClick: jest.fn
  }));
};
AsyncComponent.propTypes = {
  id: _propTypes["default"].string.isRequired,
  minTime: _propTypes["default"].number,
  isUseLoading: _propTypes["default"].bool,
  render: _propTypes["default"].func.isRequired,
  loading: _propTypes["default"].func.isRequired
};
function addMenu(key, targets, isMenuPreload) {
  _registry.registry.addOrReplace('action', key, _menuAction.menuAction, {
    label: key,
    targets: targets,
    isMenuPreload: isMenuPreload,
    menuTarget: key,
    menuRenderer: MenuRenderer,
    menuItemRenderer: MenuItemRenderer
  });
}
function addItem(key, targets, fn) {
  _registry.registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    onClick: fn
  });
}
function addAsyncItem(key, targets, minTime, isUseLoading, isVisible) {
  _registry.registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    minTime: minTime,
    isUseLoading: isUseLoading,
    isVisible: isVisible,
    component: AsyncComponent
  });
}
function advanceTime(wrapper) {
  (0, _testUtils.act)(function () {
    jest.advanceTimersByTime(100);
    wrapper.update();
  });
}
function getWrapper() {
  return (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_ComponentRenderer.ComponentRendererProvider, null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer
  })));
}
describe('Menu', function () {
  beforeEach(function () {
    _registry.registry.clear();
    readyList.length = 0;
  });
  it('should open menu on click', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    expect(wrapper.find('.menu').length).toBe(0);
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should close when clicking on backdrop', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.backdrop').length).toBe(1);
    wrapper.find('.backdrop').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
  });
  it('should call method and close when clicking on an item', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addItem('item1', ['menu'], fn);
    addItem('item2', ['menu'], fn);
    addItem('item3', ['menu'], fn);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    wrapper.find('.menuItem').first().simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    expect(fn.mock.calls.length).toBe(1);
    expect(fn.mock.calls[0][0].label).toBe('item1');
  });
  it('should open sub menu on hover and close all on click item', function () {
    var fn = jest.fn();
    addMenu('menu', []);
    addMenu('submenu1', ['menu:4']);
    addMenu('submenu2', ['menu:5', 'submenu1:2']);
    addItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], fn);
    addItem('item2', ['menu:2'], fn);
    addItem('item3', ['menu:3'], fn);
    var wrapper = getWrapper();

    // Open main menu
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(5);

    // Hover 5th item (submenu-3)
    wrapper.find('.menu .menuItem').at(4).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(2);
    expect(wrapper.find('.menu .menuItem').length).toBe(6);

    // Hover 4th item (submenu-2), previous sub-menu should be closed
    wrapper.find('.menu .menuItem').at(3).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(2);
    expect(wrapper.find('.menu .menuItem').length).toBe(7);

    // Hover sub-sub-menu item
    var subMenu = wrapper.find('.menu').at(1);
    subMenu.find('.menuItem').at(1).simulate('mouseenter');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(3);
    expect(wrapper.find('.menu .menuItem').length).toBe(8);

    // Click item in sub-sub-menu
    wrapper.find('#menu-submenu2 #item-item1').last().simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    expect(fn.mock.calls.length).toBe(1);
    expect(fn.mock.calls[0][0].label).toBe('item1');
  });
  it('should update when using asynchronouns items', function () {
    addMenu('menu', []);
    addAsyncItem('async-item1', ['menu'], 0);
    addAsyncItem('async-item2', ['menu'], 200);
    addAsyncItem('async-item3', ['menu'], 300);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(1);
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(2);
    advanceTime(wrapper);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should appear when loaded when using asynchronouns items with loading', function () {
    addMenu('menu', [], false);
    addAsyncItem('async-item1', ['menu'], 0, true);
    addAsyncItem('async-item2', ['menu'], 200, true);
    addAsyncItem('async-item3', ['menu'], 300, true);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(0);
    //
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should preload menu', function () {
    addMenu('menu', [], true);
    addAsyncItem('async-item0', ['menu:1'], 0, true);
    addAsyncItem('async-item1', ['menu:1'], 200, true);
    addAsyncItem('async-item2', ['menu:1'], 300, true);
    var wrapper = getWrapper();
    advanceTime(wrapper);
    advanceTime(wrapper);
    advanceTime(wrapper);
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(3);
  });
  it('should not render empty menu', function () {
    addMenu('menu', [], false);
    addMenu('submenu1', ['menu'], true);
    addMenu('submenu2', ['menu'], true);
    addAsyncItem('async-item1', ['menu', 'submenu1', 'submenu2'], 100, true, false);
    addAsyncItem('async-item2', ['menu'], 100, true);
    addAsyncItem('async-item3', ['menu'], 100, true);
    var wrapper = getWrapper();
    wrapper.find('button').simulate('click');
    advanceTime(wrapper);
    expect(wrapper.find('.menu').length).toBe(1);
    expect(wrapper.find('.menu .menuItem').length).toBe(2);
  });
});
//# sourceMappingURL=menuAction.spec.js.map
