"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@storybook/react");
var _DisplayAction = require("../core/DisplayAction");
var _registry = require("../../registry");
var _addonKnobs = require("@storybook/addon-knobs");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _ComponentRenderer = require("../../ComponentRenderer");
var _menuAction = require("./menuAction");
var _addonActions = require("@storybook/addon-actions");
var _README = _interopRequireDefault(require("./README.md"));
var _ButtonRenderer = require("../samples/ButtonRenderer");
var _excluded = ["render", "loading"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var MenuRenderer = function MenuRenderer(_ref) {
  var isSubMenu = _ref.isSubMenu,
    anchor = _ref.anchor,
    isOpen = _ref.isOpen,
    isLoading = _ref.isLoading,
    onClose = _ref.onClose,
    onExited = _ref.onExited,
    onMouseEnter = _ref.onMouseEnter,
    onMouseLeave = _ref.onMouseLeave,
    children = _ref.children;
  var top = anchor.anchorPosition ? anchor.anchorPosition.top : anchor.anchorEl.getBoundingClientRect().top;
  var left = anchor.anchorPosition ? anchor.anchorPosition.left : anchor.anchorEl.getBoundingClientRect().right;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !isSubMenu && /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      position: 'fixed',
      width: '100vw',
      height: '100vh',
      top: 0,
      left: 0,
      pointerEvents: isOpen ? 'auto' : 'none',
      opacity: isOpen ? 0.4 : 0,
      transition: 'opacity 1s',
      backgroundColor: 'black'
    },
    onClick: onClose
  }), /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      position: 'fixed',
      top: top,
      left: left,
      border: '1px solid',
      backgroundColor: 'white',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      opacity: isOpen && !isLoading ? 1 : 0,
      transition: 'opacity 1s',
      zIndex: 100
    },
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onTransitionEnd: function onTransitionEnd() {
      return !isOpen && onExited();
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      flex: '0 1 auto'
    }
  }, children)));
};
MenuRenderer.propTypes = {
  isSubMenu: _propTypes["default"].bool.isRequired,
  isOpen: _propTypes["default"].bool.isRequired,
  isLoading: _propTypes["default"].bool.isRequired,
  anchor: _propTypes["default"].object.isRequired,
  onExited: _propTypes["default"].func.isRequired,
  onMouseEnter: _propTypes["default"].func.isRequired,
  onMouseLeave: _propTypes["default"].func.isRequired,
  onClose: _propTypes["default"].func.isRequired,
  children: _propTypes["default"].node.isRequired
};
var MenuItemRenderer = function MenuItemRenderer(_ref2) {
  var label = _ref2.label,
    onClick = _ref2.onClick,
    onMouseEnter = _ref2.onMouseEnter,
    onMouseLeave = _ref2.onMouseLeave;
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      margin: 5
    },
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, label);
};
MenuItemRenderer.propTypes = {
  label: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func.isRequired,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func
};
var readyList = [];
var AsyncComponent = function AsyncComponent(_ref3) {
  var Render = _ref3.render,
    Loading = _ref3.loading,
    props = (0, _objectWithoutProperties2["default"])(_ref3, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    ready = _useState2[0],
    setReady = _useState2[1];
  (0, _react.useEffect)(function () {
    var t = setTimeout(function () {
      readyList.push(props.id);
      setReady(true);
    }, props.minTime);
    return function () {
      clearTimeout(t);
    };
  });
  if (!ready && readyList.indexOf(props.id) === -1) {
    if (props.isUseLoading && Loading) {
      return /*#__PURE__*/_react["default"].createElement(Loading, props);
    }
    return false;
  }
  return /*#__PURE__*/_react["default"].createElement(Render, (0, _extends2["default"])({}, props, {
    onClick: function onClick() {
      return window.alert('Async action');
    } // eslint-disable-line no-alert
  }));
};

AsyncComponent.propTypes = {
  id: _propTypes["default"].string.isRequired,
  minTime: _propTypes["default"].number,
  isUseLoading: _propTypes["default"].bool,
  render: _propTypes["default"].func.isRequired,
  loading: _propTypes["default"].func.isRequired
};
function addMenu(key, targets, isMenuPreload) {
  _registry.registry.addOrReplace('action', key, _menuAction.menuAction, {
    label: key,
    targets: targets,
    isMenuPreload: isMenuPreload,
    menuTarget: key,
    menuRenderer: MenuRenderer,
    menuItemRenderer: MenuItemRenderer
  });
}
function addItem(key, targets, fn) {
  _registry.registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    onClick: fn
  });
}
function addAsyncItem(key, targets, minTime, isUseLoading, isVisible) {
  _registry.registry.addOrReplace('action', key, {
    targets: targets,
    label: key,
    minTime: minTime,
    isUseLoading: isUseLoading,
    isVisible: isVisible,
    component: AsyncComponent
  });
}
(0, _react2.storiesOf)('actions|menuAction', module).addParameters({
  component: _menuAction.MenuActionComponent,
  componentSubtitle: 'Menu action',
  notes: {
    markdown: _README["default"]
  }
}).addDecorator(function (storyFn) {
  return /*#__PURE__*/_react["default"].createElement(_ComponentRenderer.ComponentRendererProvider, null, storyFn());
}).addDecorator(_addonKnobs.withKnobs).add('default', function () {
  _registry.registry.clear();
  addMenu('menu');
  addItem('item1', ['menu:1'], (0, _addonActions.action)('menu item 1'));
  addItem('item2', ['menu:2'], (0, _addonActions.action)('menu item 2'));
  addItem('item3', ['menu:3'], (0, _addonActions.action)('menu item 3'));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Display all items that have the specified target"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer
  }));
}).add('Sub menu', function () {
  _registry.registry.clear();
  addMenu('menu');
  addMenu('submenu1', ['menu:4']);
  addMenu('submenu2', ['menu:5', 'submenu1:2']);
  addItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], (0, _addonActions.action)('menu item 1'));
  addItem('item2', ['menu:2'], (0, _addonActions.action)('menu item 2'));
  addItem('item3', ['menu:3'], (0, _addonActions.action)('menu item 3'));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Displays a menu with items registered with a specific target"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer
  }));
}).add('Async actions', function () {
  _registry.registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addAsyncItem('item1', ['menu'], (0, _addonKnobs.number)('time item1', 0));
  addAsyncItem('item2', ['menu'], (0, _addonKnobs.number)('time item2', 100));
  addAsyncItem('item3', ['menu'], (0, _addonKnobs.number)('time item3', 500));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer
  }));
}).add('Async with loading', function () {
  _registry.registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addAsyncItem('item1', ['menu'], (0, _addonKnobs.number)('time item1', 0), true);
  addAsyncItem('item2', ['menu'], (0, _addonKnobs.number)('time item2', 100), true);
  addAsyncItem('item3', ['menu'], (0, _addonKnobs.number)('time item3', 500), true);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - delayed menu open until loaded"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/_react["default"].createElement(_ButtonRenderer.ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
}).add('Async loading / preload', function () {
  _registry.registry.clear();
  readyList.length = 0;
  addMenu('menu', [], true);
  addAsyncItem('item1', ['menu'], (0, _addonKnobs.number)('time item1', 0), true);
  addAsyncItem('item2', ['menu'], (0, _addonKnobs.number)('time item2', 100), true);
  addAsyncItem('item3', ['menu'], (0, _addonKnobs.number)('time item3', 500), true);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - preload"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/_react["default"].createElement(_ButtonRenderer.ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
}).add('Empty async submenu', function () {
  _registry.registry.clear();
  readyList.length = 0;
  addMenu('menu');
  addMenu('submenu1', ['menu:4'], true);
  addMenu('submenu2', ['menu:5', 'submenu1:2'], true);
  addAsyncItem('item1', ['menu:1', 'submenu1:1', 'submenu2:1'], (0, _addonKnobs.number)('time item1', 0), true, (0, _addonKnobs["boolean"])('item1 visible', true));
  addAsyncItem('item2', ['menu:2', 'submenu1:2'], (0, _addonKnobs.number)('time item2', 100), true, (0, _addonKnobs["boolean"])('item2 visible', true));
  addAsyncItem('item3', ['menu:3'], (0, _addonKnobs.number)('time item3', 500), true, (0, _addonKnobs["boolean"])('item3 visible', true));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Example with asynchronous menu items - preload"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "menu",
    path: "/test",
    render: _ButtonRenderer.ButtonRenderer,
    loading: function loading() {
      return /*#__PURE__*/_react["default"].createElement(_ButtonRenderer.ButtonRenderer, {
        label: "loading..."
      });
    }
  }));
});
//# sourceMappingURL=menuAction.stories.js.map
