"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _DisplayActions = require("./DisplayActions");
var _ButtonRenderer = require("../samples/ButtonRenderer");
var _registry = require("../../registry");
var _enzyme = require("enzyme");
describe('DisplayActions', function () {
  beforeEach(function () {
    _registry.registry.clear();
  });
  it('should render all actions matching the target', function () {
    var base = {
      onClick: function onClick() {
        return window.alert('Action');
      } // eslint-disable-line no-alert
    };

    _registry.registry.addOrReplace('action', 'test-action-1', base, {
      targets: ['target-1:1'],
      label: 'test action 1 (filter false)'
    });
    _registry.registry.addOrReplace('action', 'test-action-2', base, {
      targets: ['target-1:2'],
      valueToFilter: true,
      label: 'test action 2 (filter true)'
    });
    _registry.registry.addOrReplace('action', 'test-action-3', base, {
      targets: ['target-1:3'],
      label: 'test action 3 (filter false)'
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_DisplayActions.DisplayActions, {
      target: "target-1",
      context: {
        path: '/test'
      },
      render: _ButtonRenderer.ButtonRenderer
    }));
    expect(wrapper.find('button').length).toBe(3);
  });
  it('should use the otional filter', function () {
    var base = {
      onClick: function onClick() {
        return window.alert('Action');
      } // eslint-disable-line no-alert
    };

    _registry.registry.addOrReplace('action', 'test-action-1', base, {
      targets: ['target-2:1'],
      label: 'test action 1 (filter false)'
    });
    _registry.registry.addOrReplace('action', 'test-action-2', base, {
      targets: ['target-2:2'],
      valueToFilter: true,
      label: 'test action 2 (filter true)'
    });
    _registry.registry.addOrReplace('action', 'test-action-3', base, {
      targets: ['target-2:3'],
      label: 'test action 3 (filter false)'
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_DisplayActions.DisplayActions, {
      target: "target-2",
      context: {
        path: '/test'
      },
      filter: function filter(context) {
        return context.valueToFilter;
      },
      render: _ButtonRenderer.ButtonRenderer
    }));
    expect(wrapper.find('button').length).toBe(1);
  });
});
//# sourceMappingURL=DisplayActions.spec.js.map
