"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@storybook/react");
var _DisplayAction = require("./DisplayAction");
var _registry = require("../../registry");
var _addonKnobs = require("@storybook/addon-knobs");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _DisplayAction2 = _interopRequireDefault(require("./DisplayAction.md"));
var _ButtonRenderer = require("../samples/ButtonRenderer");
var _LinkRenderer = require("../samples/LinkRenderer");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
(0, _react2.storiesOf)('actions|DisplayAction', module).addParameters({
  component: _DisplayAction.DisplayAction,
  notes: {
    markdown: _DisplayAction2["default"]
  }
}).addDecorator(_addonKnobs.withKnobs).add('default', function () {
  _registry.registry.addOrReplace('action', 'test-action-1', {
    label: 'Simple action',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Display a single action"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Simple action', function () {
  _registry.registry.addOrReplace('action', 'test-action-1', {
    label: 'test action 1',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  _registry.registry.addOrReplace('action', 'test-action-2', {
    label: 'test action 2',
    onClick: function onClick(context) {
      return window.alert('action 2 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Display multiple actions with different contexts"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test1"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  }), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test2"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test2'
    },
    render: _ButtonRenderer.ButtonRenderer
  }), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test2'
    },
    render: _ButtonRenderer.ButtonRenderer
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      margin: '10px'
    }
  }, "path = /test3"), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test3'
    },
    render: _ButtonRenderer.ButtonRenderer
  }), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-2",
    context: {
      path: '/test3'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Renderer', function () {
  _registry.registry.addOrReplace('action', 'test-action-1', {
    label: 'test action 1',
    onClick: function onClick(context) {
      return window.alert('action 1 on ' + context.path);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "The same action can be rendered differently, depending on the render property"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      margin: '10px'
    }
  }, "Button renderer : "), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test'
    },
    render: _ButtonRenderer.ButtonRenderer
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", {
    style: {
      margin: '10px'
    }
  }, "Link renderer : "), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "test-action-1",
    context: {
      path: '/test'
    },
    render: _LinkRenderer.LinkRenderer
  })));
}).add('Composition', function () {
  var base = _registry.registry.addOrReplace('action', 'base', {
    onClick: function onClick(context) {
      return window.alert('composed action - label=' + context.param + ', array=' + context.arrayExample);
    },
    // eslint-disable-line no-alert
    arrayExample: ['value1']
  });
  _registry.registry.addOrReplace('action', 'compose-1', base, {
    param: '1',
    label: 'compose 1',
    arrayExample: ['value2']
  });
  _registry.registry.addOrReplace('action', 'compose-2', base, {
    param: '2',
    label: 'compose 2',
    onClick: function onClick(context, event, superMethod) {
      return window.confirm('composed action - do you want to call overriden action ?') && superMethod(context, event);
    } // eslint-disable-line no-alert
  });

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Create a new action by extending an existing action, by adding or replacing information in context. Overriding context is merged with the base one following these rules :", /*#__PURE__*/_react["default"].createElement("ul", null, /*#__PURE__*/_react["default"].createElement("li", null, "Arrays are concatenated"), /*#__PURE__*/_react["default"].createElement("li", null, "Functions are replaced, but the overriden function is passed as the last argument on call"), /*#__PURE__*/_react["default"].createElement("li", null, "Other attributes are replaced"))), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "compose-1",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  }), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "compose-2",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Component action', function () {
  var TestComponent1 = function TestComponent1(_ref) {
    var context = _ref.context,
      Render = _ref.render;
    return /*#__PURE__*/_react["default"].createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        onClick: function onClick() {
          return window.alert('Component action');
        } // eslint-disable-line no-alert
      })
    });
  };

  TestComponent1.propTypes = {
    context: _propTypes["default"].object.isRequired,
    render: _propTypes["default"].func.isRequired
  };
  _registry.registry.addOrReplace('action', 'component-1', {
    label: 'component 1',
    component: TestComponent1
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Action rendering is fully handled by a dedicated component, delegating to render for displaying the button"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "component-1",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Component composition', function () {
  var TestComponent1 = function TestComponent1(_ref2) {
    var context = _ref2.context,
      Render = _ref2.render;
    return /*#__PURE__*/_react["default"].createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        onClick: function onClick() {
          return window.alert('Component action');
        } // eslint-disable-line no-alert
      })
    });
  };

  TestComponent1.propTypes = {
    context: _propTypes["default"].object.isRequired,
    render: _propTypes["default"].func.isRequired
  };
  var TestComponent2 = function TestComponent2(_ref3, refOrContext, Previous) {
    var context = _ref3.context,
      render = _ref3.render;
    return /*#__PURE__*/_react["default"].createElement(Previous, {
      render: render,
      context: _objectSpread(_objectSpread({}, context), {}, {
        label: context.label + ' overriden'
      })
    });
  };
  TestComponent2.propTypes = {
    context: _propTypes["default"].object.isRequired,
    render: _propTypes["default"].func.isRequired
  };
  var base = _registry.registry.addOrReplace('action', 'base', {
    component: TestComponent1
  });
  _registry.registry.addOrReplace('action', 'component-compose-1', base, {
    label: 'compose 1'
  });
  _registry.registry.addOrReplace('action', 'component-compose-2', base, {
    label: 'compose 2',
    component: TestComponent2
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "Component actions can also be composed - the overriden component can still be used as its passed to the render function as last parameter."), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "component-compose-1",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  }), /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "component-compose-2",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Async component action', function () {
  var AsyncComponent = function AsyncComponent(_ref4) {
    var context = _ref4.context,
      Render = _ref4.render;
    var _useState = (0, _react.useState)(1),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];
    (0, _react.useEffect)(function () {
      var t = setInterval(function () {
        return setValue(value + 1);
      }, 1000);
      return function () {
        clearInterval(t);
      };
    });
    return value > 1 ? /*#__PURE__*/_react["default"].createElement(Render, {
      context: _objectSpread(_objectSpread({}, context), {}, {
        label: context.label + value,
        onClick: function onClick() {
          return window.alert('Async action');
        } // eslint-disable-line no-alert
      })
    }) : /*#__PURE__*/_react["default"].createElement("span", null, "loading..");
  };
  AsyncComponent.propTypes = {
    context: _propTypes["default"].object.isRequired,
    render: _propTypes["default"].func.isRequired
  };
  _registry.registry.addOrReplace('action', 'async', {
    label: 'async',
    component: AsyncComponent
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "An action can render asynchronously and update its context"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "async",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
}).add('Spawn actions', function () {
  var SpawnActionsComponent = function SpawnActionsComponent(_ref5) {
    var context = _ref5.context,
      Render = _ref5.render;
    return context.names.map(function (name) {
      return /*#__PURE__*/_react["default"].createElement(Render, {
        key: name,
        context: _objectSpread(_objectSpread({}, context), {}, {
          label: context.label + ' ' + name,
          onClick: function onClick() {
            return window.alert('Spawn action ' + name);
          } // eslint-disable-line no-alert
        })
      });
    });
  };

  SpawnActionsComponent.propTypes = {
    context: _propTypes["default"].object.isRequired,
    render: _propTypes["default"].func.isRequired
  };
  _registry.registry.addOrReplace('action', 'spawn', {
    label: 'child action',
    names: ['child1', 'child2', 'child3'],
    component: SpawnActionsComponent
  });
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, "A single action can spawn multiple buttons"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_DisplayAction.DisplayAction, {
    actionKey: "spawn",
    context: {
      path: '/test1'
    },
    render: _ButtonRenderer.ButtonRenderer
  })));
});
//# sourceMappingURL=DisplayAction.stories.js.map
