{"version":3,"names":["_composeServices","require","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","Registry","_classCallCheck2","registry","_createClass2","value","addOrReplace","type","registryKey","_len","services","Array","_key","service","composeServices","targets","map","t","spl","split","id","priority","storedService","add","Error","_len2","_key2","concat","get","remove","_this","entries","find","entry","filters","result","values","otherFilters","_objectWithoutProperties2","item","includes","sort","a","b","foundA","foundB","priorityA","Number","priorityB","isNaN","clear","exports"],"sources":["registry.ts"],"sourcesContent":["import {composeServices} from './composeServices';\nimport {Service, StoredService, Target} from '~/registry/service';\n\nclass Registry {\n    registry: {[key: string]: StoredService};\n\n    constructor() {\n        this.registry = {};\n    }\n\n    addOrReplace(type: string, key: string, ...services: Partial<Service>[]): StoredService {\n        const registryKey = type + '-' + key;\n\n        const service = composeServices(...services);\n        const targets = (service.targets) ?\n            service.targets.map(t => {\n                if (typeof t === 'string') {\n                    const spl = t.split(':');\n                    return ({id: spl[0], priority: spl[1] ? spl[1] : 0}) as Target;\n                }\n\n                return t;\n            }) : [];\n\n        const storedService: StoredService = {\n            ...service,\n            targets,\n            type,\n            key\n        };\n        this.registry[registryKey] = storedService;\n\n        return storedService;\n    }\n\n    add(type: string, key: string, ...services: Partial<Service>[]): StoredService {\n        const registryKey = type + '-' + key;\n        if (this.registry[registryKey]) {\n            throw new Error('Entry already exist for key ' + key);\n        }\n\n        return this.addOrReplace(type, key, ...services);\n    }\n\n    get(type: string, key: string): StoredService {\n        return this.registry[type + '-' + key];\n    }\n\n    remove(type: string, key: string): void {\n        if (key) {\n            const registryKey = type + '-' + key;\n            if (this.registry[registryKey]) {\n                delete this.registry[type + '-' + key];\n            }\n        } else {\n            const entries = this.find({type});\n            if (entries) {\n                entries.forEach(entry => this.remove(type, entry.key));\n            }\n        }\n    }\n\n    find(filters: {target?:string, [key:string]: unknown}): StoredService[] {\n        let result = Object.values(this.registry);\n        const {target, ...otherFilters} = filters;\n        if (target) {\n            result = result\n                .filter(item => item.targets && item.targets\n                    .map(t => t.id)\n                    .includes(filters.target))\n                .sort((a, b) => {\n                    const foundA = a.targets && a.targets.find(t => t.id === filters.target);\n                    const foundB = b.targets && b.targets.find(t => t.id === filters.target);\n                    const priorityA = foundA && Number(foundA.priority);\n                    const priorityB = foundB && Number(foundB.priority);\n\n                    if (isNaN(priorityA) && isNaN(priorityB)) {\n                        return 0;\n                    }\n\n                    if (isNaN(priorityA)) {\n                        return -1;\n                    }\n\n                    if (isNaN(priorityB)) {\n                        return 1;\n                    }\n\n                    return priorityA - priorityB;\n                });\n        }\n\n        return result.filter(item =>\n            // Try to find one key that doesn't match\n            !Object.keys(otherFilters)\n                .find(key => item[key] !== otherFilters[key])\n        );\n    }\n\n    clear() {\n        this.registry = {};\n    }\n}\n\nconst registry = new Registry();\n\nexport {registry};\n"],"mappings":"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"}