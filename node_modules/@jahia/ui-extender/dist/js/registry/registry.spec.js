"use strict";

var _registry = require("./registry");
describe('registry', function () {
  beforeEach(function () {
    _registry.registry.clear();
  });
  it('should set key', function () {
    var comp = _registry.registry.add('comp', 'test', {
      foo: 'bar'
    });
    expect(comp.key).toBe('test');
  });
  it('should register component', function () {
    var comp = _registry.registry.add('comp', 'test', {
      foo: 'bar'
    });
    expect(_registry.registry.get('comp', 'test')).toBe(comp);
  });
  it('should not allow double registration', function () {
    _registry.registry.add('comp', 'test', {
      foo: 'bar'
    });
    expect(function () {
      return _registry.registry.add('comp', 'test', {
        foo: 'bar'
      });
    }).toThrow(Error);
  });
  it('should allow double registration with addOrReplace', function () {
    _registry.registry.add('comp', 'test', {
      foo: 'bar'
    });
    expect(function () {
      return _registry.registry.addOrReplace('comp', 'test', {
        foo: 'bar'
      });
    }).not.toThrow(Error);
  });
  it('should clear', function () {
    _registry.registry.add('comp', 'test', {
      foo: 'bar'
    });
    _registry.registry.clear();
    expect(_registry.registry.get('comp', 'test')).toBeUndefined();
  });
  it('should find things based on filter', function () {
    _registry.registry.add('comp', 'test1', {
      foo: 'bar'
    });
    _registry.registry.add('comp', 'test2', {
      foo: 'bar'
    });
    _registry.registry.add('not-a-comp', 'test3', {
      foo: 'bar'
    });
    _registry.registry.add('comp', 'test3', {
      foo: 'not-bar'
    });
    var res = _registry.registry.find({
      type: 'comp',
      foo: 'bar'
    });
    expect(res.length).toBe(2);
  });
  it('should find things based on target filter', function () {
    var test1 = _registry.registry.add('comp', 'test1', {
      targets: ['bar']
    });
    var test2 = _registry.registry.add('comp', 'test2', {
      targets: ['bar']
    });
    var test3 = _registry.registry.add('comp', 'test3', {
      targets: ['bar']
    });
    _registry.registry.add('comp', 'test4', {
      targets: ['not-bar']
    });
    expect(_registry.registry.find({
      type: 'comp',
      target: 'bar'
    })).toEqual([test1, test2, test3]);
  });
  it('should find things based on target filter, sorted', function () {
    var test1 = _registry.registry.add('comp', 'test1', {
      targets: ['bar:1']
    });
    var test2 = _registry.registry.add('comp', 'test2', {
      targets: [{
        id: 'bar',
        priority: 3
      }]
    });
    var test3 = _registry.registry.add('comp', 'test3', {
      targets: ['bar:2']
    });
    var res = _registry.registry.find({
      type: 'comp',
      target: 'bar'
    });
    expect(res).toEqual([test1, test3, test2]);
  });
  it('should remove the object for the given key / name pair', function () {
    var item1 = _registry.registry.add('item-to-delete', 'item1', {
      targets: ['bar']
    });
    var item2 = _registry.registry.add('item-to-delete', 'item2', {
      targets: ['bar']
    });
    expect(_registry.registry.find({
      type: 'item-to-delete'
    })).toEqual([item1, item2]);
    _registry.registry.remove('item-to-delete', 'item1');
    expect(_registry.registry.find({
      type: 'item-to-delete'
    })).toEqual([item2]);
  });
  it('should remove the objects for the given key', function () {
    var item1 = _registry.registry.add('item-to-delete', 'item1', {
      targets: ['bar']
    });
    var item2 = _registry.registry.add('item-to-delete', 'item2', {
      targets: ['bar']
    });
    var item3 = _registry.registry.add('item-to-not-delete', 'item3', {
      targets: ['bar']
    });
    expect(_registry.registry.find({
      type: 'item-to-delete'
    })).toEqual([item1, item2]);
    _registry.registry.remove('item-to-delete');
    expect(_registry.registry.find({
      type: 'item-to-delete'
    })).toEqual([]);
    expect(_registry.registry.find({
      type: 'item-to-not-delete'
    })).toEqual([item3]);
  });
});
//# sourceMappingURL=registry.spec.js.map
