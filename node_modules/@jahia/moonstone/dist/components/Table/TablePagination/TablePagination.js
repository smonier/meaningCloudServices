import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "label", "rowsPerPage", "rowsPerPageOptions", "totalNumberOfRows", "currentPage", "onRowsPerPageChange", "onPageChange"];
import React from 'react';
import clsx from 'clsx';
import { Button, Dropdown, Typography } from "../..";
import { ChevronFirstPage, ChevronLastPage, ChevronLeft, ChevronRight } from "../../../icons";
import "./TablePagination.css";
var cssClass = 'moonstone-tablePagination';
var cssClass32 = 'moonstone-marginRight32';
var cssClass16 = 'moonstone-marginRight16';
export var TablePagination = function TablePagination(_ref) {
  var className = _ref.className,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? {
    rowsPerPage: 'Rows per page',
    of: 'of'
  } : _ref$label,
      _ref$rowsPerPage = _ref.rowsPerPage,
      rowsPerPage = _ref$rowsPerPage === void 0 ? 10 : _ref$rowsPerPage,
      _ref$rowsPerPageOptio = _ref.rowsPerPageOptions,
      rowsPerPageOptions = _ref$rowsPerPageOptio === void 0 ? [5, 10, 25] : _ref$rowsPerPageOptio,
      totalNumberOfRows = _ref.totalNumberOfRows,
      currentPage = _ref.currentPage,
      onRowsPerPageChange = _ref.onRowsPerPageChange,
      onPageChange = _ref.onPageChange,
      props = _objectWithoutProperties(_ref, _excluded);

  if (currentPage < 1) {
    throw new Error('currentPage must always be >= 1');
  }

  if (rowsPerPageOptions.indexOf(rowsPerPage) === -1) {
    throw new Error('rowsPerPage must exist in rowsPerPageOptions');
  }

  var lastPage = Math.ceil(totalNumberOfRows / rowsPerPage);
  var visibleRowsRangeLeft = (currentPage - 1) * rowsPerPage + 1;
  var visibleRowsRangeRight = Math.min(totalNumberOfRows, currentPage * rowsPerPage);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: clsx(cssClass, 'flexRow_reverse', 'alignCenter', className)
  }, props), /*#__PURE__*/React.createElement(Typography, {
    variant: "caption"
  }, label.rowsPerPage), /*#__PURE__*/React.createElement(Dropdown, {
    className: clsx('alignCenter', cssClass16),
    size: "small",
    "data-sel-role": "table-pagination-dropdown-rows-per-page",
    data: rowsPerPageOptions.map(function (opt) {
      return {
        label: opt.toString(),
        value: opt.toString()
      };
    }),
    value: rowsPerPage.toString(),
    label: rowsPerPage.toString(),
    onChange: function onChange(event, item) {
      return onRowsPerPageChange(parseInt(item.value, 10));
    }
  }), /*#__PURE__*/React.createElement(Typography, {
    variant: "caption",
    className: clsx(cssClass, 'flexRow_reverse', 'alignCenter', cssClass32),
    "data-sel-role": "table-pagination-total-rows"
  }, "".concat(visibleRowsRangeLeft, "-").concat(visibleRowsRangeRight, " ").concat(label.of, " ").concat(totalNumberOfRows)), /*#__PURE__*/React.createElement(Button, {
    className: clsx(cssClass32),
    icon: /*#__PURE__*/React.createElement(ChevronFirstPage, null),
    variant: "ghost",
    "data-sel-role": "table-pagination-button-first-page",
    isDisabled: currentPage === 1,
    onClick: function onClick() {
      return onPageChange(1);
    }
  }), /*#__PURE__*/React.createElement(Button, {
    className: clsx(cssClass32),
    icon: /*#__PURE__*/React.createElement(ChevronLeft, null),
    variant: "ghost",
    "data-sel-role": "table-pagination-button-previous-page",
    isDisabled: currentPage === 1,
    onClick: function onClick() {
      return onPageChange(currentPage - 1);
    }
  }), /*#__PURE__*/React.createElement(Button, {
    className: clsx(cssClass32),
    icon: /*#__PURE__*/React.createElement(ChevronRight, null),
    variant: "ghost",
    "data-sel-role": "table-pagination-button-next-page",
    isDisabled: lastPage === currentPage,
    onClick: function onClick() {
      return onPageChange(currentPage + 1);
    }
  }), /*#__PURE__*/React.createElement(Button, {
    className: clsx(cssClass16),
    icon: /*#__PURE__*/React.createElement(ChevronLastPage, null),
    variant: "ghost",
    "data-sel-role": "table-pagination-button-last-page",
    isDisabled: lastPage === currentPage,
    onClick: function onClick() {
      return onPageChange(lastPage);
    }
  }));
};
TablePagination.displayName = 'TablePagination';
//# sourceMappingURL=TablePagination.js.map
