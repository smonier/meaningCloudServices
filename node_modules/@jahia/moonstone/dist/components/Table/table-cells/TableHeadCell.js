import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component", "width", "textAlign", "verticalAlign", "className", "iconStart", "iconEnd", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import { Typography } from "../..";
import { capitalize } from "../../../utils/helpers";
import { TableCell } from "./TableCell";
export var TableHeadCell = function TableHeadCell(_ref) {
  var _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'th' : _ref$component,
      width = _ref.width,
      _ref$textAlign = _ref.textAlign,
      textAlign = _ref$textAlign === void 0 ? 'left' : _ref$textAlign,
      _ref$verticalAlign = _ref.verticalAlign,
      verticalAlign = _ref$verticalAlign === void 0 ? 'center' : _ref$verticalAlign,
      className = _ref.className,
      iconStart = _ref.iconStart,
      iconEnd = _ref.iconEnd,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Typography, _extends({}, props, {
    className: clsx({
      flexFluid: typeof width === 'undefined'
    }, 'textAlign' + capitalize(textAlign), 'moonstone-verticalAlign' + capitalize(verticalAlign), className),
    component: component,
    weight: "bold",
    variant: "body",
    style: _objectSpread(_objectSpread({}, props.style), {}, {
      width: width
    })
  }), /*#__PURE__*/React.createElement(TableCell, {
    iconStart: iconStart,
    iconEnd: iconEnd
  }, children));
};
TableHeadCell.displayName = 'TableHeadCell';
//# sourceMappingURL=TableHeadCell.js.map
