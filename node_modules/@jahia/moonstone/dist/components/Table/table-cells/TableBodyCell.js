import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component", "textAlign", "verticalAlign", "className", "iconStart", "iconEnd", "isExpandableColumn", "width", "row", "children", "isScrollable"];
import React from 'react';
import clsx from 'clsx';
import { IconTextIcon, Typography } from "../..";
import { ChevronDown, ChevronRight } from "../../../icons";
import { capitalize } from "../../../utils/helpers";
import { TableCell } from "./TableCell";
import "./TableCell.css";

var TableBodyCellForwardRef = function TableBodyCellForwardRef(_ref, ref) {
  var _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'td' : _ref$component,
      _ref$textAlign = _ref.textAlign,
      textAlign = _ref$textAlign === void 0 ? 'left' : _ref$textAlign,
      _ref$verticalAlign = _ref.verticalAlign,
      verticalAlign = _ref$verticalAlign === void 0 ? 'center' : _ref$verticalAlign,
      className = _ref.className,
      iconStart = _ref.iconStart,
      iconEnd = _ref.iconEnd,
      isExpandableColumn = _ref.isExpandableColumn,
      width = _ref.width,
      row = _ref.row,
      children = _ref.children,
      isScrollable = _ref.isScrollable,
      props = _objectWithoutProperties(_ref, _excluded);

  var leftMarginBuffer = 20; // Px

  var leftMarginIndentDepth = (row === null || row === void 0 ? void 0 : row.depth) * 20; // Px

  var scrollableClass = isScrollable ? 'moonstone-tableCellContent' : '';

  var renderCellContent = function renderCellContent() {
    return /*#__PURE__*/React.createElement(IconTextIcon, {
      component: "div",
      iconStart: iconStart,
      iconEnd: iconEnd,
      typographyProps: {
        className: clsx(scrollableClass, 'flexFluid')
      }
    }, children);
  };

  var renderTableCell = function renderTableCell() {
    // These are cells that are in the expandable row (canExpand) and it is the column in
    // which the cells show the chevron icon to expand and collapse sub-rows (isExpandableColumn)
    if (isExpandableColumn && row !== null && row !== void 0 && row.canExpand) {
      return /*#__PURE__*/React.createElement(TableCell, _extends({
        ref: ref
      }, row === null || row === void 0 ? void 0 : row.getToggleRowExpandedProps({
        style: {
          marginLeft: "".concat(leftMarginIndentDepth, "px")
        }
      })), row !== null && row !== void 0 && row.isExpanded ? /*#__PURE__*/React.createElement(ChevronDown, {
        className: "moonstone-marginRightNano"
      }) : /*#__PURE__*/React.createElement(ChevronRight, {
        className: "moonstone-marginRightNano"
      }), renderCellContent());
    } // These are cells which are in the expandable column (isExpandableColumn), but themselves
    // do now have sub-rows. Therefore, they need to have the appropriate nested indentation,
    // but do not have the chevron to expand/collapse rows underneath them.
    // Also, a buffer of 20px is added so that they are aligned with the cells that do have
    // the chevron icons for expand/collapse


    if (isExpandableColumn && !(row !== null && row !== void 0 && row.canExpand)) {
      return /*#__PURE__*/React.createElement(TableCell, {
        ref: ref,
        style: {
          marginLeft: "".concat(leftMarginIndentDepth + leftMarginBuffer, "px")
        }
      }, renderCellContent());
    } // These are just the normal cells in the other columns which don't display anything with
    // relation to the row expansion feature


    return /*#__PURE__*/React.createElement(TableCell, {
      ref: ref
    }, renderCellContent());
  };

  return /*#__PURE__*/React.createElement(Typography, _extends({
    className: clsx('moonstone-tableBodyCell', 'textAlign' + capitalize(textAlign), 'moonstone-verticalAlign' + capitalize(verticalAlign), {
      flexFluid: typeof width === 'undefined'
    }, className),
    component: component,
    variant: "body",
    style: {
      width: width
    }
  }, props), renderTableCell());
};

export var TableBodyCell = /*#__PURE__*/React.forwardRef(TableBodyCellForwardRef);
TableBodyCell.displayName = 'TableBodyCell';
//# sourceMappingURL=TableBodyCell.js.map
