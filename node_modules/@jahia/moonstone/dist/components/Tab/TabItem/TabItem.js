import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component", "label", "size", "isReversed", "isDisabled", "icon", "variant", "color", "className", "isSelected", "onClick"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import "./TabItem.css";
import { Typography } from "../../Typography";
export var TabItem = function TabItem(_ref) {
  var _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'button' : _ref$component,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? '' : _ref$label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      _ref$isReversed = _ref.isReversed,
      isReversed = _ref$isReversed === void 0 ? false : _ref$isReversed,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? null : _ref$icon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'ghost' : _ref$variant,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'default' : _ref$color,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? function () {
    return undefined;
  } : _ref$onClick,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(component, _objectSpread({
    className: clsx('moonstone-tab-item', "moonstone-size_".concat(size), "moonstone-variant_".concat(variant), "moonstone-color_".concat(color), {
      'moonstone-icon': icon && label
    }, {
      'moonstone-icon-tab-item': !label
    }, {
      'moonstone-selected': isSelected
    }, {
      'moonstone-reverse': isReversed
    }, className),
    disabled: isDisabled,
    onClick: onClick
  }, props), /*#__PURE__*/React.createElement(React.Fragment, null, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: size === 'big' ? 'default' : size
  })), label && /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    component: "span",
    variant: size === 'big' ? 'heading' : 'button',
    weight: size === 'big' ? 'light' : 'default'
  }, label)));
};
TabItem.displayName = 'TabItem';
//# sourceMappingURL=TabItem.js.map
