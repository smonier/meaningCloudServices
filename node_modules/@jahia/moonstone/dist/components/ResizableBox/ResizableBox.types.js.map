{"version":3,"sources":["ResizableBox.types.ts"],"names":["zones"],"mappings":"AAcA;AACA;AACA,OAAO,IAAMA,KAAmB,GAAG,CAAC,OAAD,CAA5B","sourcesContent":["import * as React from 'react';\nimport {Size, ResizeStartCallback, ResizeCallback} from 're-resizable';\n\nexport type EnableZonesProps = {\n    // Top?: boolean;\n    right?: boolean;\n    // Bottom?: boolean;\n    // left?: boolean;\n    // topRight?: boolean;\n    // bottomRight?: boolean;\n    // bottomLeft?: boolean;\n    // topLeft?: boolean;\n};\n\n// WIP\n// const zones = ['top', 'right', 'bottom', 'left', 'topRight', 'bottomRight', 'bottomLeft', 'topLeft'];\nexport const zones: ZonesProps[] = ['right'];\n\nexport type ZonesProps = keyof EnableZonesProps;\n\nexport type ResizableBoxEnable = 'right';\n\nexport type ResizableBoxMinWidth = string | number;\n\nexport type ResizableBoxMaxWidth = string | number;\n\nexport type ResizableBoxProps = {\n    /**\n     * Content of the component\n     */\n    children?: React.ReactNode;\n    /**\n     * Set the resizable area of the box\n     */\n    enable?: ResizableBoxEnable[];\n    /**\n     * Set the minimum width\n     */\n    minWidth?: ResizableBoxMinWidth;\n    /**\n     * Set the maximum width\n     */\n    maxWidth?: ResizableBoxMaxWidth;\n    /**\n     * Set the default size\n     */\n    defaultSize?: Size;\n    /**\n     * Manage the size\n     */\n    size?: Size;\n    /**\n     * Additional classname\n     */\n    className?: string;\n    /**\n     * Role\n     */\n    role?: string;\n    /**\n     * Function triggered when the resize begins\n     * @param {object} e - Mouse event\n     * @param {string} dir - Direction resized\n     * @param {node} ref - HTML element resized\n     */\n    onResizeStart?: ResizeStartCallback;\n    /**\n     * Function on resizing\n     * @param {object} e - event\n     */\n    onResizing?: ResizeCallback;\n    /**\n     * Function triggered when the resize is finished\n     * @param {object} e - Mouse event\n     * @param {string} dir - Direction resized\n     * @param {node} ref - HTML element resized\n     * @param {object} delta - delta between after resize\n     */\n    onResizeStop?: ResizeCallback;\n}\n\n"]}