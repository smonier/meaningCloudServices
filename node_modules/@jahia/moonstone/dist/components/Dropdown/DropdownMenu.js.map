{"version":3,"sources":["DropdownMenu.tsx"],"names":["React","Menu","MenuItem","Separator","CheckboxChecked","CheckboxUnchecked","DropdownMenu","isDisplayed","anchorPosition","minWidth","maxWidth","maxHeight","anchorEl","hasSearch","autoAddSearchLimit","searchEmptyText","data","value","values","imageSize","handleSelect","handleKeyPress","onClose","isEmpty","length","isGrouped","options","getIcon","item","indexOf","dropdownOption","iconStart","label","description","iconEnd","isDisabled","image","e","attributes","dropdownGrouped","children","groupLabel","index","map","o"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {DropdownDataOption} from '~/components/Dropdown/Dropdown.types';\nimport {Menu, MenuItem, Separator} from '~/components';\nimport {DropdownMenuProps} from '~/components/Dropdown/DropdownMenu.types';\nimport {CheckboxChecked, CheckboxUnchecked} from '~/icons';\n\nexport const DropdownMenu: React.FC<DropdownMenuProps> = ({\n    isDisplayed,\n    anchorPosition,\n    minWidth,\n    maxWidth,\n    maxHeight,\n    anchorEl,\n    hasSearch,\n    autoAddSearchLimit,\n    searchEmptyText,\n    data,\n    value,\n    values,\n    imageSize,\n    handleSelect,\n    handleKeyPress,\n    onClose\n}) => {\n    const isEmpty = data.length < 1;\n    const isGrouped = !isEmpty && typeof data[0].options !== 'undefined';\n\n    const getIcon = (item: DropdownDataOption) => values?.indexOf(item.value) > -1 ? <CheckboxChecked role=\"checkbox\" color=\"blue\"/> : <CheckboxUnchecked role=\"checkbox\"/>;\n\n    // ---\n    // Generate options\n    // ---\n    const dropdownOption = (item: DropdownDataOption) => (\n        <MenuItem\n            key={item.value}\n            role=\"option\"\n            iconStart={values ? getIcon(item) : item.iconStart}\n            iconSize=\"default\"\n            label={item.label}\n            description={item.description}\n            iconEnd={item.iconEnd}\n            isDisabled={item.isDisabled}\n            isSelected={value === item.value}\n            image={item.image}\n            imageSize={imageSize}\n            onClick={e => handleSelect(e, item)}\n            onKeyPress={e => handleKeyPress(e, item)}\n            {...item.attributes}\n        />\n    );\n\n    const dropdownGrouped = (children: [DropdownDataOption], groupLabel: string, index: number) => {\n        return (\n            <div key={`${groupLabel}-${index}`} data-option-type=\"group\">\n                {index > 0 && (\n                    <Separator/>\n                )}\n\n                <MenuItem variant=\"title\" label={groupLabel}/>\n\n                {children.map(item => {\n                    return dropdownOption(item);\n                })}\n            </div>\n        );\n    };\n\n    if (data.length === 0) {\n        return null;\n    }\n\n    return (\n        <Menu\n            isDisplayed={isDisplayed}\n            position=\"fixed\"\n            anchorPosition={anchorPosition}\n            minWidth={minWidth}\n            maxWidth={maxWidth}\n            maxHeight={maxHeight}\n            anchorEl={anchorEl}\n            hasSearch={hasSearch}\n            autoAddSearchLimit={autoAddSearchLimit}\n            searchEmptyText={searchEmptyText}\n            onClose={onClose}\n        >\n            {\n                data.map((item, index) => {\n                    if (isGrouped) {\n                        item.options.map((o: DropdownDataOption) => {\n                            return dropdownOption(o);\n                        });\n                        return dropdownGrouped(item.options, item.groupLabel, index);\n                    }\n\n                    return dropdownOption(item);\n                })\n            }\n        </Menu>\n    );\n};\n\n"]}