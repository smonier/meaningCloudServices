{"version":3,"sources":["Dropdown.tsx"],"names":["React","useEffect","useMemo","useRef","useState","clsx","DropdownImageSizes","DropdownSizes","DropdownVariants","DropdownMenu","TreeViewMenu","Tag","Button","Typography","Cancel","ChevronDown","flatten","data","res","fn","current","push","children","forEach","Dropdown","treeData","label","placeholder","value","values","isDisabled","variant","Ghost","size","Medium","icon","hasSearch","autoAddSearchLimit","searchEmptyText","imageSize","onClear","onChange","onBlur","onFocus","className","props","isOpened","setIsOpened","focused","event","lastSent","focusData","setFocusData","anchorEl","setAnchorEl","minWidth","setMinWith","ref","isTree","Array","isArray","flatData","isEmpty","length","p","menuMinWidth","anchorPosition","top","left","menuMaxWidth","menuMaxHeight","Big","Small","handleOpenMenu","e","dropdownWidth","currentTarget","offsetWidth","handleSelect","item","stopPropagation","canClose","handleCloseMenu","handleKeyPress","key","isFilled","cssDropdown","View","map","v","find","i","focus","blur","displayName"],"mappings":"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","sourcesContent":["import React, {MutableRefObject, useEffect, useMemo, useRef, useState} from 'react';\nimport clsx from 'clsx';\nimport './Dropdown.scss';\n\nimport {\n    DropdownDataOption,\n    DropdownImageSizes,\n    DropdownProps,\n    DropdownSizes,\n    DropdownVariants,\n    HandleSelect\n} from './Dropdown.types';\nimport {DropdownMenu} from '~/components/Dropdown/DropdownMenu';\nimport {TreeViewMenu} from '~/components/Dropdown/TreeViewMenu';\nimport {Tag} from '../Tag';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\nimport {Button, Typography} from '~/components';\nimport {Cancel, ChevronDown} from '~/icons';\n\nconst flatten = (data: TreeViewData[]): TreeViewData[] => {\n    const res: TreeViewData[] = [];\n\n    const fn = (current: TreeViewData) => {\n        res.push(current);\n        if (current.children) {\n            current.children.forEach(fn);\n        }\n    };\n\n    data?.forEach?.(fn);\n\n    return res;\n};\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n    data,\n    treeData,\n    label,\n    placeholder,\n    value,\n    values,\n    isDisabled,\n    variant = DropdownVariants.Ghost,\n    size = DropdownSizes.Medium,\n    icon,\n    hasSearch,\n    autoAddSearchLimit = 7,\n    searchEmptyText = 'No results found.',\n    imageSize,\n    onClear,\n    onChange,\n    onBlur,\n    onFocus,\n    className,\n    ...props\n}) => {\n    const [isOpened, setIsOpened] = useState(false);\n    const [focusData, setFocusData] = useState({focused: false, event: null, lastSent: false});\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [minWidth, setMinWith] = useState(null);\n    const ref: MutableRefObject<HTMLDivElement> = useRef();\n\n    const isTree = Array.isArray(treeData);\n    const flatData: DropdownDataOption[] = useMemo(() => isTree ? flatten(treeData) : data, [treeData, data, isTree]);\n    const isEmpty = flatData.length === 0;\n\n    useEffect(() => {\n        if (focusData.focused && focusData.event && !focusData.lastSent && onFocus) {\n            onFocus(focusData.event);\n            setFocusData(p => ({...p, lastSent: true}));\n        }\n    }, [onFocus, focusData]);\n\n    useEffect(() => {\n        if (!focusData.focused && !isOpened && focusData.event && focusData.lastSent && onBlur) {\n            onBlur(focusData.event);\n            setFocusData(p => ({...p, lastSent: false}));\n        }\n    }, [onBlur, isOpened, focusData]);\n\n    // Return nothing if `data` isn't an array\n    if (!Array.isArray(flatData)) {\n        return null;\n    }\n\n    const menuMinWidth = 80;\n    const anchorPosition = {\n        top: 4,\n        left: 0\n    };\n    let menuMaxWidth;\n    let menuMaxHeight;\n\n    switch (imageSize) {\n        case DropdownImageSizes.Big:\n            menuMaxWidth = '400px';\n            menuMaxHeight = '440px';\n            break;\n        case DropdownImageSizes.Small:\n            menuMaxWidth = '264px';\n            menuMaxHeight = '320px';\n            break;\n        default:\n            // Default menu size for the dropdown when no image size is provided\n            menuMaxWidth = '250px';\n            menuMaxHeight = '270px';\n    }\n\n    // ---\n    // Functions to handle events\n    // ---\n    const handleOpenMenu = (e: React.MouseEvent | React.KeyboardEvent) => {\n        const dropdownWidth = (e.currentTarget as HTMLElement).offsetWidth;\n        setMinWith(`${dropdownWidth < menuMinWidth ? menuMinWidth : dropdownWidth}px`);\n        setAnchorEl(e.currentTarget);\n        setIsOpened(true);\n    };\n\n    const handleSelect: HandleSelect = (e, item) => {\n        if (item) {\n            if (values) {\n                if (!item.isDisabled) {\n                    e.stopPropagation();\n                    (onChange as (e: React.MouseEvent | React.KeyboardEvent, item: DropdownDataOption) => void)(e, item);\n                }\n            } else {\n                let canClose: boolean | void = !item.isDisabled;\n                if (!item.isDisabled && item.value !== value) {\n                    e.stopPropagation();\n                    canClose = (onChange as (e: React.MouseEvent | React.KeyboardEvent, item: DropdownDataOption) => void)(e, item);\n                }\n\n                if (canClose !== false) {\n                    setIsOpened(false);\n                }\n            }\n        }\n    };\n\n    const handleCloseMenu = () => {\n        setIsOpened(false);\n        setAnchorEl(null);\n    };\n\n    const handleKeyPress = (e: React.KeyboardEvent, item: DropdownDataOption) => {\n        if (e.key === 'Enter') {\n            handleSelect(e, item);\n        }\n    };\n\n    // ---\n    // CSS classes\n    // ---\n\n    const isFilled = value || values?.length > 0;\n\n    const cssDropdown = clsx(\n        !label && !icon ? 'flexRow_reverse' : 'flexRow_between',\n        'alignCenter',\n        'moonstone-dropdown',\n        `moonstone-${size}`,\n        `moonstone-dropdown_${variant}`,\n        {\n            'moonstone-disabled': (typeof isDisabled === 'undefined' && isEmpty) ? true : isDisabled,\n            'moonstone-filled': isFilled,\n            'moonstone-opened': isOpened\n        }\n    );\n\n    const View = isTree ? TreeViewMenu : DropdownMenu;\n\n    return (\n        <div\n            className={clsx('moonstone-dropdown_container', className)}\n            {...props}\n            onKeyPress={e => {\n                if (e.key === 'Enter') {\n                    handleOpenMenu(e);\n                }\n            }}\n        >\n            <div\n                ref={ref}\n                role=\"dropdown\"\n                className={clsx(cssDropdown)}\n                tabIndex={0}\n                onClick={handleOpenMenu}\n                onKeyPress={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter') {\n                        handleSelect(e);\n                    }\n                }}\n                onBlur={event => {\n                    setFocusData(p => ({...p, focused: false, event}));\n                }}\n                onFocus={event => {\n                    setFocusData(p => ({...p, focused: true, event}));\n                }}\n            >\n                {\n                    icon &&\n                    <icon.type {...icon.props} size=\"default\" className={clsx('moonstone-dropdown_icon')}/>\n                }\n                {!label && values && values.length > 0 ? (\n                    <div className=\"moonstone-dropdown_tags flexFluid flexRow\">\n                        {values.map(v => {\n                            const item = flatData.find(i => i.value === v);\n                            return item && (\n                                <Tag key={item.value}\n                                     label={item.label}\n                                     value={item.value}\n                                     size={size}\n                                     onClick={e => {\n                                         ref.current.focus();\n                                         ref.current.blur();\n                                         handleSelect(e, item);\n                                     }}\n                                />\n                            );\n                        })}\n                    </div>\n                ) : (\n                    <Typography\n                        isNowrap\n                        variant={size === 'small' ? 'caption' : 'body'}\n                        component=\"span\"\n                        className={clsx('flexFluid', 'moonstone-dropdown_label')}\n                        title={label}\n                    >\n                        {label || flatData.find(i => i.value === value)?.label || placeholder}\n                    </Typography>\n                )}\n                {onClear && isFilled && !isDisabled && (\n                    <Button\n                        className=\"moonstone-baseInput_clearButton flexRow_center alignCenter\"\n                        variant=\"ghost\"\n                        icon={<Cancel/>}\n                        aria-label=\"Reset\"\n                        onClick={e => {\n                            e.stopPropagation();\n                            ref.current.focus();\n                            ref.current.blur();\n                            onClear(e);\n                        }}\n                    />\n                )}\n                <ChevronDown className=\"moonstone-dropdown_chevronDown\"/>\n            </div>\n\n            {isOpened && (\n                <View\n                    isDisplayed\n                    data={data}\n                    treeData={treeData}\n                    value={value}\n                    values={values}\n                    anchorPosition={anchorPosition}\n                    minWidth={minWidth}\n                    maxWidth={menuMaxWidth}\n                    maxHeight={menuMaxHeight}\n                    anchorEl={anchorEl}\n                    hasSearch={hasSearch}\n                    autoAddSearchLimit={autoAddSearchLimit}\n                    searchEmptyText={searchEmptyText}\n                    handleKeyPress={handleKeyPress}\n                    handleSelect={handleSelect}\n                    imageSize={imageSize}\n                    onClose={handleCloseMenu}\n                />\n            )}\n        </div>\n    );\n};\n\nDropdown.displayName = 'Dropdown';\n"]}