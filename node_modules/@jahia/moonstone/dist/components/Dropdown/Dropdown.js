import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["data", "treeData", "label", "placeholder", "value", "values", "isDisabled", "variant", "size", "icon", "hasSearch", "autoAddSearchLimit", "searchEmptyText", "imageSize", "onClear", "onChange", "onBlur", "onFocus", "className"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useEffect, useMemo, useRef, useState } from 'react';
import clsx from 'clsx';
import "./Dropdown.css";
import { DropdownImageSizes, DropdownSizes, DropdownVariants } from "./Dropdown.types";
import { DropdownMenu } from "./DropdownMenu";
import { TreeViewMenu } from "./TreeViewMenu";
import { Tag } from "../Tag";
import { Button, Typography } from "./..";
import { Cancel, ChevronDown } from "../../icons";

var flatten = function flatten(data) {
  var _data$forEach;

  var res = [];

  var fn = function fn(current) {
    res.push(current);

    if (current.children) {
      current.children.forEach(fn);
    }
  };

  data === null || data === void 0 ? void 0 : (_data$forEach = data.forEach) === null || _data$forEach === void 0 ? void 0 : _data$forEach.call(data, fn);
  return res;
};

export var Dropdown = function Dropdown(_ref) {
  var _flatData$find;

  var data = _ref.data,
      treeData = _ref.treeData,
      label = _ref.label,
      placeholder = _ref.placeholder,
      value = _ref.value,
      values = _ref.values,
      isDisabled = _ref.isDisabled,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? DropdownVariants.Ghost : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? DropdownSizes.Medium : _ref$size,
      icon = _ref.icon,
      hasSearch = _ref.hasSearch,
      _ref$autoAddSearchLim = _ref.autoAddSearchLimit,
      autoAddSearchLimit = _ref$autoAddSearchLim === void 0 ? 7 : _ref$autoAddSearchLim,
      _ref$searchEmptyText = _ref.searchEmptyText,
      searchEmptyText = _ref$searchEmptyText === void 0 ? 'No results found.' : _ref$searchEmptyText,
      imageSize = _ref.imageSize,
      onClear = _ref.onClear,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpened = _useState2[0],
      setIsOpened = _useState2[1];

  var _useState3 = useState({
    focused: false,
    event: null,
    lastSent: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      focusData = _useState4[0],
      setFocusData = _useState4[1];

  var _useState5 = useState(null),
      _useState6 = _slicedToArray(_useState5, 2),
      anchorEl = _useState6[0],
      setAnchorEl = _useState6[1];

  var _useState7 = useState(null),
      _useState8 = _slicedToArray(_useState7, 2),
      minWidth = _useState8[0],
      setMinWith = _useState8[1];

  var ref = useRef();
  var isTree = Array.isArray(treeData);
  var flatData = useMemo(function () {
    return isTree ? flatten(treeData) : data;
  }, [treeData, data, isTree]);
  var isEmpty = flatData.length === 0;
  useEffect(function () {
    if (focusData.focused && focusData.event && !focusData.lastSent && onFocus) {
      onFocus(focusData.event);
      setFocusData(function (p) {
        return _objectSpread(_objectSpread({}, p), {}, {
          lastSent: true
        });
      });
    }
  }, [onFocus, focusData]);
  useEffect(function () {
    if (!focusData.focused && !isOpened && focusData.event && focusData.lastSent && onBlur) {
      onBlur(focusData.event);
      setFocusData(function (p) {
        return _objectSpread(_objectSpread({}, p), {}, {
          lastSent: false
        });
      });
    }
  }, [onBlur, isOpened, focusData]); // Return nothing if `data` isn't an array

  if (!Array.isArray(flatData)) {
    return null;
  }

  var menuMinWidth = 80;
  var anchorPosition = {
    top: 4,
    left: 0
  };
  var menuMaxWidth;
  var menuMaxHeight;

  switch (imageSize) {
    case DropdownImageSizes.Big:
      menuMaxWidth = '400px';
      menuMaxHeight = '440px';
      break;

    case DropdownImageSizes.Small:
      menuMaxWidth = '264px';
      menuMaxHeight = '320px';
      break;

    default:
      // Default menu size for the dropdown when no image size is provided
      menuMaxWidth = '250px';
      menuMaxHeight = '270px';
  } // ---
  // Functions to handle events
  // ---


  var handleOpenMenu = function handleOpenMenu(e) {
    var dropdownWidth = e.currentTarget.offsetWidth;
    setMinWith("".concat(dropdownWidth < menuMinWidth ? menuMinWidth : dropdownWidth, "px"));
    setAnchorEl(e.currentTarget);
    setIsOpened(true);
  };

  var handleSelect = function handleSelect(e, item) {
    if (item) {
      if (values) {
        if (!item.isDisabled) {
          e.stopPropagation();
          onChange(e, item);
        }
      } else {
        var canClose = !item.isDisabled;

        if (!item.isDisabled && item.value !== value) {
          e.stopPropagation();
          canClose = onChange(e, item);
        }

        if (canClose !== false) {
          setIsOpened(false);
        }
      }
    }
  };

  var handleCloseMenu = function handleCloseMenu() {
    setIsOpened(false);
    setAnchorEl(null);
  };

  var handleKeyPress = function handleKeyPress(e, item) {
    if (e.key === 'Enter') {
      handleSelect(e, item);
    }
  }; // ---
  // CSS classes
  // ---


  var isFilled = value || (values === null || values === void 0 ? void 0 : values.length) > 0;
  var cssDropdown = clsx(!label && !icon ? 'flexRow_reverse' : 'flexRow_between', 'alignCenter', 'moonstone-dropdown', "moonstone-".concat(size), "moonstone-dropdown_".concat(variant), {
    'moonstone-disabled': typeof isDisabled === 'undefined' && isEmpty ? true : isDisabled,
    'moonstone-filled': isFilled,
    'moonstone-opened': isOpened
  });
  var View = isTree ? TreeViewMenu : DropdownMenu;
  return /*#__PURE__*/React.createElement("div", _extends({
    className: clsx('moonstone-dropdown_container', className)
  }, props, {
    onKeyPress: function onKeyPress(e) {
      if (e.key === 'Enter') {
        handleOpenMenu(e);
      }
    }
  }), /*#__PURE__*/React.createElement("div", {
    ref: ref,
    role: "dropdown",
    className: clsx(cssDropdown),
    tabIndex: 0,
    onClick: handleOpenMenu,
    onKeyPress: function onKeyPress(e) {
      if (e.key === 'Enter') {
        handleSelect(e);
      }
    },
    onBlur: function onBlur(event) {
      setFocusData(function (p) {
        return _objectSpread(_objectSpread({}, p), {}, {
          focused: false,
          event: event
        });
      });
    },
    onFocus: function onFocus(event) {
      setFocusData(function (p) {
        return _objectSpread(_objectSpread({}, p), {}, {
          focused: true,
          event: event
        });
      });
    }
  }, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: "default",
    className: clsx('moonstone-dropdown_icon')
  })), !label && values && values.length > 0 ? /*#__PURE__*/React.createElement("div", {
    className: "moonstone-dropdown_tags flexFluid flexRow"
  }, values.map(function (v) {
    var item = flatData.find(function (i) {
      return i.value === v;
    });
    return item && /*#__PURE__*/React.createElement(Tag, {
      key: item.value,
      label: item.label,
      value: item.value,
      size: size,
      onClick: function onClick(e) {
        ref.current.focus();
        ref.current.blur();
        handleSelect(e, item);
      }
    });
  })) : /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    variant: size === 'small' ? 'caption' : 'body',
    component: "span",
    className: clsx('flexFluid', 'moonstone-dropdown_label'),
    title: label
  }, label || ((_flatData$find = flatData.find(function (i) {
    return i.value === value;
  })) === null || _flatData$find === void 0 ? void 0 : _flatData$find.label) || placeholder), onClear && isFilled && !isDisabled && /*#__PURE__*/React.createElement(Button, {
    className: "moonstone-baseInput_clearButton flexRow_center alignCenter",
    variant: "ghost",
    icon: /*#__PURE__*/React.createElement(Cancel, null),
    "aria-label": "Reset",
    onClick: function onClick(e) {
      e.stopPropagation();
      ref.current.focus();
      ref.current.blur();
      onClear(e);
    }
  }), /*#__PURE__*/React.createElement(ChevronDown, {
    className: "moonstone-dropdown_chevronDown"
  })), isOpened && /*#__PURE__*/React.createElement(View, {
    isDisplayed: true,
    data: data,
    treeData: treeData,
    value: value,
    values: values,
    anchorPosition: anchorPosition,
    minWidth: minWidth,
    maxWidth: menuMaxWidth,
    maxHeight: menuMaxHeight,
    anchorEl: anchorEl,
    hasSearch: hasSearch,
    autoAddSearchLimit: autoAddSearchLimit,
    searchEmptyText: searchEmptyText,
    handleKeyPress: handleKeyPress,
    handleSelect: handleSelect,
    imageSize: imageSize,
    onClose: handleCloseMenu
  }));
};
Dropdown.displayName = 'Dropdown';
//# sourceMappingURL=Dropdown.js.map
