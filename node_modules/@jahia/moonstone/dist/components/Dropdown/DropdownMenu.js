import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import { Menu, MenuItem, Separator } from "./..";
import { CheckboxChecked, CheckboxUnchecked } from "../../icons";
export var DropdownMenu = function DropdownMenu(_ref) {
  var isDisplayed = _ref.isDisplayed,
      anchorPosition = _ref.anchorPosition,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      maxHeight = _ref.maxHeight,
      anchorEl = _ref.anchorEl,
      hasSearch = _ref.hasSearch,
      autoAddSearchLimit = _ref.autoAddSearchLimit,
      searchEmptyText = _ref.searchEmptyText,
      data = _ref.data,
      value = _ref.value,
      values = _ref.values,
      imageSize = _ref.imageSize,
      handleSelect = _ref.handleSelect,
      handleKeyPress = _ref.handleKeyPress,
      onClose = _ref.onClose;
  var isEmpty = data.length < 1;
  var isGrouped = !isEmpty && typeof data[0].options !== 'undefined';

  var getIcon = function getIcon(item) {
    return (values === null || values === void 0 ? void 0 : values.indexOf(item.value)) > -1 ? /*#__PURE__*/React.createElement(CheckboxChecked, {
      role: "checkbox",
      color: "blue"
    }) : /*#__PURE__*/React.createElement(CheckboxUnchecked, {
      role: "checkbox"
    });
  }; // ---
  // Generate options
  // ---


  var dropdownOption = function dropdownOption(item) {
    return /*#__PURE__*/React.createElement(MenuItem, _extends({
      key: item.value,
      role: "option",
      iconStart: values ? getIcon(item) : item.iconStart,
      iconSize: "default",
      label: item.label,
      description: item.description,
      iconEnd: item.iconEnd,
      isDisabled: item.isDisabled,
      isSelected: value === item.value,
      image: item.image,
      imageSize: imageSize,
      onClick: function onClick(e) {
        return handleSelect(e, item);
      },
      onKeyPress: function onKeyPress(e) {
        return handleKeyPress(e, item);
      }
    }, item.attributes));
  };

  var dropdownGrouped = function dropdownGrouped(children, groupLabel, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: "".concat(groupLabel, "-").concat(index),
      "data-option-type": "group"
    }, index > 0 && /*#__PURE__*/React.createElement(Separator, null), /*#__PURE__*/React.createElement(MenuItem, {
      variant: "title",
      label: groupLabel
    }), children.map(function (item) {
      return dropdownOption(item);
    }));
  };

  if (data.length === 0) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Menu, {
    isDisplayed: isDisplayed,
    position: "fixed",
    anchorPosition: anchorPosition,
    minWidth: minWidth,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    anchorEl: anchorEl,
    hasSearch: hasSearch,
    autoAddSearchLimit: autoAddSearchLimit,
    searchEmptyText: searchEmptyText,
    onClose: onClose
  }, data.map(function (item, index) {
    if (isGrouped) {
      item.options.map(function (o) {
        return dropdownOption(o);
      });
      return dropdownGrouped(item.options, item.groupLabel, index);
    }

    return dropdownOption(item);
  }));
};
//# sourceMappingURL=DropdownMenu.js.map
