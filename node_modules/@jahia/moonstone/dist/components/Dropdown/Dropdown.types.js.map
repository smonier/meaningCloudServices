{"version":3,"sources":["Dropdown.types.ts"],"names":["DropdownVariants","DropdownSizes","DropdownImageSizes"],"mappings":"AAIA,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAMZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAMZ,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["import React from 'react';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\n\nexport type DropdownVariant = 'ghost' | 'outlined';\nexport enum DropdownVariants {\n    Ghost = 'ghost',\n    Outlined = 'outlined'\n}\n\nexport type DropdownSize = 'small' | 'medium';\nexport enum DropdownSizes {\n    Small = 'small',\n    Medium = 'medium'\n}\n\nexport type DropdownImageSize = 'small' | 'big';\nexport enum DropdownImageSizes {\n    Small = 'small',\n    Big = 'big'\n}\n\nexport type DropdownDataOption = {\n    label: string;\n    description?: string;\n    value?: string;\n    isDisabled?: boolean;\n    iconStart?: React.ReactElement;\n    iconEnd?: React.ReactElement;\n    attributes?: unknown;\n    image?: React.ReactElement;\n    imageSize?: DropdownImageSize;\n    groupLabel?: string;\n    options?: [DropdownDataOption];\n}\n\nexport type HandleSelect = (e: React.MouseEvent | React.KeyboardEvent, item?: DropdownDataOption) => void;\n\nexport type DropdownProps = {\n    /**\n     * Content of the dropdown\n     */\n    data?: DropdownDataOption[];\n\n    /**\n     * Content of the dropdown, if tree\n     */\n    treeData?: TreeViewData[];\n\n    /**\n     * Text for dropdown, when no value is selected\n     */\n    placeholder?: string;\n\n    /**\n     * Label of the dropdown\n     */\n    label?: string;\n\n    /**\n     * Value of the dropdown\n     */\n    value?: string;\n\n    /**\n     * Value of the dropdown\n     */\n    values?: string[];\n\n    /**\n     * Icon displays before the dropdown's label\n     */\n    icon?: React.ReactElement;\n\n    /**\n     * Dropdown's variants\n     */\n    variant?: DropdownVariant;\n\n    /**\n     * Dropdown's sizes\n     */\n    size?: DropdownSize;\n\n    /**\n     * Size of images to show in the Dropdown\n     */\n    imageSize?: DropdownImageSize;\n\n    /**\n     * Dropdown is disabled\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Whether the Menu within the Dropdown has a search input\n     * Autosearch is enabled if undefined\n     * Autosearch is when search input is automatically added in the dropdown when autoAddSearchLimit is reached\n     * @see autoAddSearchLimit\n     */\n    hasSearch?: boolean;\n\n    /**\n     * Autosearch is triggered when data items exceed this limit\n     * Applies only when autosearch is enabled (i.e. hasSearch is undefined)\n     * Defaults to 7 if undefined or < 0\n     * Autosearch is when search input is automatically added in the dropdown\n     */\n    autoAddSearchLimit?: number;\n\n    /**\n     * The text to display if the Dropdown Menu has a search input and the search doesn't have any results\n     */\n    searchEmptyText?: string;\n\n    /**\n     * Additional classname\n     */\n    className?: string;\n\n    /**\n     * Function - when passed in, the Clear icon appears at the end of the input and its click event is passed back when the Clear icon is clicked\n     */\n    onClear?: React.MouseEventHandler;\n\n    /**\n     * Function trigger on change with the current option as param\n     * @param {object} event - Mouse event\n     * @param {object} item - The current item selected\n     */\n    onChange?: (event: React.MouseEvent, item :DropdownDataOption) => void;\n\n    /**\n     * Function triggered on focus of the checkbox value\n     */\n    onFocus?: React.FocusEventHandler;\n\n    /**\n     * Function triggered when the checkbox value loses focus\n     */\n    onBlur?: React.FocusEventHandler;\n}\n"]}