{"version":3,"sources":["TreeViewMenu.tsx"],"names":["React","useState","usePositioning","SearchInput","TreeView","clsx","filterNodes","predicate","nodes","opened","filtered","forEach","c","filterResult","filterNode","push","node","match","children","filteredChildren","length","id","treeItemProps","className","isDisabled","find","data","res","reduce","current","child","flatten","fn","TreeViewMenu","isDisplayed","minWidth","maxWidth","maxHeight","anchorEl","anchorPosition","anchorElOrigin","transformElOrigin","position","hasOverlay","hasSearch","autoAddSearchLimit","treeData","value","values","handleSelect","onClose","stylePosition","itemRef","inputValue","setInputValue","openedItems","setOpenedItems","onOpenItem","previousOpenedItems","onCloseItem","filter","item","openedBySearch","selected","label","toLowerCase","includes","single","v","styleMenu","hasAutoSearch","e","target","key","Boolean","defaultProps","searchEmptyText","top","left","vertical","horizontal","displayName"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {usePositioning} from '~/hooks/usePositioning';\nimport {TreeViewMenuProps} from './TreeViewMenu.types';\nimport {SearchInput, TreeView} from '~/components';\nimport '../Menu/Menu.scss';\nimport {TreeViewData} from '~/components/TreeView/TreeView.types';\nimport clsx from 'clsx';\n\nfunction filterNodes(predicate: (data: TreeViewData) => boolean, nodes: TreeViewData[], opened: string[]) {\n    const filtered: TreeViewData[] = [];\n    nodes.forEach(c => {\n        const filterResult = filterNode(predicate, c, opened);\n        if (filterResult) {\n            filtered.push(filterResult);\n        }\n    });\n    return filtered;\n}\n\nconst filterNode = (predicate: (data: TreeViewData) => boolean, node: TreeViewData, opened: string[]) => {\n    const match = predicate(node);\n    const children: TreeViewData[] = [];\n    if (node.children) {\n        const filteredChildren = filterNodes(predicate, node.children, opened);\n        if (filteredChildren.length > 0) {\n            children.push(...filteredChildren);\n            opened.push(node.id);\n        }\n    }\n\n    if (match || children.length > 0) {\n        return {\n            ...node,\n            treeItemProps: {className: clsx({\n                'moonstone-disabled': !match\n            })},\n            isDisabled: !match,\n            children\n        };\n    }\n};\n\nconst find = (predicate: (data: TreeViewData) => boolean, data: TreeViewData, opened?: string[]): TreeViewData => {\n    if (predicate(data)) {\n        return data;\n    }\n\n    if (data.children) {\n        const res = data.children.reduce((current, child) => {\n            return current || find(predicate, child, opened);\n        }, null);\n\n        if (res && opened) {\n            opened.push(data.id);\n        }\n\n        return res;\n    }\n};\n\nconst flatten = (data: TreeViewData[]): TreeViewData[] => {\n    const res: TreeViewData[] = [];\n\n    const fn = (current: TreeViewData) => {\n        res.push(current);\n        if (current.children) {\n            current.children.forEach(fn);\n        }\n    };\n\n    data?.forEach?.(fn);\n\n    return res;\n};\n\nexport const TreeViewMenu: React.FC<TreeViewMenuProps> = ({\n    isDisplayed,\n    minWidth,\n    maxWidth,\n    maxHeight,\n    anchorEl,\n    anchorPosition,\n    anchorElOrigin,\n    transformElOrigin,\n    position,\n    hasOverlay,\n    hasSearch,\n    autoAddSearchLimit,\n    // SearchEmptyText,\n    treeData,\n    value,\n    values,\n    handleSelect,\n    // HandleKeyPress,\n    onClose\n}) => {\n    const [stylePosition, itemRef] = usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position);\n    // UseEnterExitCallbacks(isDisplayed, onExiting, onExited, onEntering, onEntered);\n    const [inputValue, setInputValue] = useState('');\n    const [openedItems, setOpenedItems] = useState([]);\n\n    const onOpenItem = (node: TreeViewData) => {\n        setOpenedItems(previousOpenedItems => [...previousOpenedItems, node.id]);\n    };\n\n    const onCloseItem = (node: TreeViewData) => {\n        setOpenedItems(previousOpenedItems => previousOpenedItems.filter(item => item !== node.id));\n    };\n\n    const openedBySearch: string[] = [];\n    const selected: string[] = [];\n\n    if (inputValue !== '') {\n        treeData = filterNodes(node => node.label.toLowerCase().includes(inputValue.toLowerCase()), treeData, openedBySearch);\n    }\n\n    if (value) {\n        treeData.forEach(single => {\n            const item = find(data => data.value === value, single, openedBySearch);\n            if (item) {\n                selected.push(item.id);\n            }\n        });\n    }\n\n    if (values) {\n        values.forEach(v => {\n            treeData.forEach(single => {\n                const item = find(data => data.value === v, single, openedBySearch);\n                if (item) {\n                    selected.push(item.id);\n                }\n            });\n        });\n    }\n\n    // ---\n    // Styling\n    // ---\n    const styleMenu: React.CSSProperties = {\n        position,\n        ...stylePosition as React.CSSProperties\n    };\n\n    if (minWidth) {\n        styleMenu.minWidth = minWidth;\n    }\n\n    if (maxWidth) {\n        styleMenu.maxWidth = maxWidth;\n    }\n\n    if (maxHeight) {\n        styleMenu.maxHeight = maxHeight;\n    }\n\n    let hasAutoSearch: boolean = hasSearch;\n    if (typeof hasSearch === 'undefined') {\n        hasAutoSearch = flatten(treeData)?.length > autoAddSearchLimit;\n    }\n\n    // ---\n    // Render\n    // ---\n    return (\n        <>\n            <menu ref={itemRef}\n                  className=\"moonstone-menu\"\n                  style={styleMenu}\n            >\n                {hasAutoSearch && (\n                    <div className=\"moonstone-menu_searchInput\">\n                        <SearchInput\n                            value={inputValue}\n                            onChange={e => setInputValue(e.target.value)}\n                            onKeyPress={e => {\n                                if (e.key === 'Enter' && treeData.length > 0) {\n                                    const item = find(data => !data.isDisabled, treeData[0]);\n                                    if (item) {\n                                        handleSelect(e, item);\n                                    }\n                                }\n                            }}\n                            onClear={() => setInputValue('')}\n                        />\n                    </div>\n                )}\n                <TreeView data={treeData}\n                          selectedItems={selected}\n                          size=\"small\"\n                          showCheckbox={Boolean(values)}\n                          openedItems={[...openedItems, ...openedBySearch]}\n                          onOpenItem={onOpenItem}\n                          onCloseItem={onCloseItem}\n                          onClickItem={(node, e) => {\n                              handleSelect(e, node);\n                          }}\n                />\n            </menu>\n            {\n                hasOverlay && isDisplayed && (\n                    <div\n                        aria-hidden=\"true\"\n                        className=\"moonstone-menu_overlay\"\n                        onClick={onClose}\n                        onContextMenu={onClose}\n                    />\n                )\n            }\n        </>\n    );\n};\n\n// Kept defaultProps here because of unnecessary re-rendering when provided as default parameters to the function component\n/* eslint-disable react/default-props-match-prop-types */\nTreeViewMenu.defaultProps = {\n    hasOverlay: true,\n    autoAddSearchLimit: 7,\n    searchEmptyText: 'No results found.',\n    position: 'fixed',\n    anchorEl: null,\n    anchorPosition: {\n        top: 0,\n        left: 0\n    },\n    anchorElOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n    },\n    transformElOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n    }\n};\n/* eslint-enable react/default-props-match-prop-types */\n\nTreeViewMenu.displayName = 'TreeViewMenu';\n"]}