import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["label", "size", "isReversed", "isDisabled", "isLoading", "icon", "iconEnd", "variant", "color", "className", "onClick"];
import React, { useRef } from 'react';
import clsx from 'clsx';
import "./Button.css";
import { Typography } from "../Typography";
import { Loader } from "../Loader";
export var Button = function Button(_ref) {
  var _ref$label = _ref.label,
      label = _ref$label === void 0 ? '' : _ref$label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      _ref$isReversed = _ref.isReversed,
      isReversed = _ref$isReversed === void 0 ? false : _ref$isReversed,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? null : _ref$icon,
      _ref$iconEnd = _ref.iconEnd,
      iconEnd = _ref$iconEnd === void 0 ? null : _ref$iconEnd,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'default' : _ref$variant,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'default' : _ref$color,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? null : _ref$className,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? function () {
    return undefined;
  } : _ref$onClick,
      props = _objectWithoutProperties(_ref, _excluded);

  var typoWeight = 'default';
  var ButtonEl = useRef(null);

  if (size === 'small') {
    typoWeight = 'light';
  }

  if (size === 'big') {
    typoWeight = 'semiBold';
  }

  var handleOnClick = function handleOnClick(e) {
    onClick(e);
    ButtonEl.current.blur();
  };

  var LoaderReversed = Boolean(variant === 'default' && (color === 'accent' || color === 'danger'));
  return /*#__PURE__*/React.createElement("button", _extends({
    ref: ButtonEl,
    className: clsx('moonstone-button', "moonstone-size_".concat(size), "moonstone-variant_".concat(variant), "moonstone-color_".concat(color), {
      'moonstone-icon': label && (icon || iconEnd)
    }, {
      'moonstone-icon-button': !label
    }, {
      'moonstone-reverse': isReversed
    }, {
      'moonstone-button_loading': isLoading
    }, className),
    type: "button",
    disabled: isDisabled,
    onClick: function onClick(e) {
      return handleOnClick(e);
    }
  }, props), isLoading && /*#__PURE__*/React.createElement(Loader, {
    size: "small",
    isReversed: LoaderReversed,
    className: clsx('moonstone-button_loader')
  }), icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: size === 'big' ? 'default' : size
  })), label && /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    component: "span",
    variant: "button",
    isUpperCase: size === 'big',
    weight: typoWeight,
    className: clsx('flexFluid')
  }, label), label && iconEnd && /*#__PURE__*/React.createElement(iconEnd.type, _extends({}, iconEnd.props, {
    size: size === 'big' ? 'default' : size
  })));
};
Button.displayName = 'Button';
//# sourceMappingURL=Button.js.map
