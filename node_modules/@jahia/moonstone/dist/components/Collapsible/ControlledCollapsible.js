import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["label", "className", "children", "onClick", "id", "isExpanded"];
import React, { useEffect, useRef } from 'react';
import clsx from 'clsx';
import "./Collapsible.css";
import { Typography } from "./..";
import { ChevronRight } from "../../icons/components";

var ControlledCollapsibleForwardRef = function ControlledCollapsibleForwardRef(_ref, ref) {
  var label = _ref.label,
      className = _ref.className,
      children = _ref.children,
      _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? function () {
    return undefined;
  } : _ref$onClick,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? null : _ref$id,
      _ref$isExpanded = _ref.isExpanded,
      isExpanded = _ref$isExpanded === void 0 ? false : _ref$isExpanded,
      other = _objectWithoutProperties(_ref, _excluded);

  var classNameProps = clsx('moonstone-collapsible', className);
  var topDivRef = useRef();
  var buttonRef = useRef();
  useEffect(function () {
    var observer = new IntersectionObserver(function (entries) {
      if (buttonRef.current) {
        if (entries[0].intersectionRatio === 0) {
          buttonRef.current.classList.add('moonstone-collapsible_button_sticky');
        } else if (entries[0].intersectionRatio === 1) {
          buttonRef.current.classList.remove('moonstone-collapsible_button_sticky');
        }
      }
    }, {
      threshold: [0, 1]
    });

    if (isExpanded) {
      var htmlDivElement = topDivRef.current;
      observer.observe(htmlDivElement);
      return function () {
        if (buttonRef.current) {
          buttonRef.current.classList.remove('moonstone-collapsible_button_sticky');
        }

        observer.unobserve(htmlDivElement);
      };
    }
  }, [isExpanded]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: classNameProps
  }, other), /*#__PURE__*/React.createElement("div", {
    ref: topDivRef,
    className: "moonstone-collapsible_topdiv"
  }), /*#__PURE__*/React.createElement("button", {
    ref: buttonRef,
    type: "button",
    className: clsx('moonstone-collapsible_button', {
      'moonstone-collapsible_button_expanded': isExpanded
    }, 'flexRow', 'alignCenter'),
    "aria-expanded": isExpanded,
    "aria-controls": id,
    onClick: function onClick(e) {
      return _onClick(e);
    }
  }, /*#__PURE__*/React.createElement(ChevronRight, {
    className: clsx('moonstone-collapsible_icon', {
      'moonstone-collapsible_icon_expanded': isExpanded
    }),
    size: "big"
  }), /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    isUpperCase: true,
    component: "span",
    variant: "heading"
  }, label)), /*#__PURE__*/React.createElement("div", {
    id: id,
    className: clsx([isExpanded ? 'moonstone-collapsible_content_expanded' : 'moonstone-collapsible_content_collapsed']),
    hidden: !isExpanded
  }, children));
};

export var ControlledCollapsible = /*#__PURE__*/React.forwardRef(ControlledCollapsibleForwardRef);
ControlledCollapsible.displayName = 'ControlledCollapsible';
//# sourceMappingURL=ControlledCollapsible.js.map
