import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React from 'react';
import { ListItem, SearchInput } from "../..";
import { HandleDrag } from "../../../icons";
import cslx from 'clsx';
import clsx from 'clsx';
import "./ValueList.css";
export var ValueList = function ValueList(_ref) {
  var values = _ref.values,
      setFilter = _ref.setFilter,
      iconEnd = _ref.iconEnd,
      draggedId = _ref.draggedId,
      isReadOnly = _ref.isReadOnly,
      _ref$listClasses = _ref.listClasses,
      listClasses = _ref$listClasses === void 0 ? [] : _ref$listClasses,
      role = _ref.role,
      _onClick = _ref.onClick,
      _onDragStart = _ref.onDragStart,
      _onDragEnd = _ref.onDragEnd,
      _onDragOver = _ref.onDragOver,
      _onDrop = _ref.onDrop;
  return /*#__PURE__*/React.createElement("div", {
    className: cslx('flexCol', 'moonstone-wrapper')
  }, /*#__PURE__*/React.createElement("div", {
    className: clsx('flexCol', 'moonstone-listHolder')
  }, /*#__PURE__*/React.createElement(SearchInput, {
    onChange: function onChange(e) {
      return setFilter(e.target.value.trim());
    }
  }), /*#__PURE__*/React.createElement("ul", {
    className: clsx.apply(void 0, ['moonstone-valueList'].concat(_toConsumableArray(listClasses))),
    onDragOver: function onDragOver(e) {
      return _onDragOver(e, null);
    },
    onDrop: function onDrop(e) {
      return _onDrop(e, null);
    }
  }, values.map(function (v) {
    var classNames = ['moonstone-valueListItem'];

    if (draggedId === v.value && v.tempItem) {
      classNames.push('moonstone-noHoveEffect', 'moonstone-noOpacity');
    } else if (draggedId && draggedId !== v.value) {
      classNames.push('moonstone-noHoveEffect');
    } else if (draggedId && draggedId === v.value) {
      classNames.push('moonstone-valueListItem', 'moonstone-dragging');
    }

    return /*#__PURE__*/React.createElement(ListItem, {
      key: v.label,
      role: role,
      iconStart: !isReadOnly && /*#__PURE__*/React.createElement("div", {
        className: "moonstone-iconContainer",
        draggable: "true",
        onDragStart: function onDragStart(e) {
          return _onDragStart(e, v);
        },
        onDragEnd: function onDragEnd(e) {
          return _onDragEnd(e, v);
        }
      }, /*#__PURE__*/React.createElement(HandleDrag, {
        className: "moonstone-dragHandle"
      })),
      iconEnd: !isReadOnly && (role === 'left-list' ? /*#__PURE__*/React.createElement("div", {
        className: "moonstone-iconContainer"
      }, iconEnd) : /*#__PURE__*/React.createElement("div", {
        className: "moonstone-iconContainer",
        onClick: function onClick(e) {
          return _onClick(e, v);
        }
      }, iconEnd)),
      className: clsx.apply(void 0, classNames),
      typographyVariant: "body",
      label: v.label,
      onClick: function onClick(e) {
        if (!isReadOnly && role === 'left-list') {
          _onClick(e, v);
        }
      },
      onDragOver: function onDragOver(e) {
        if (!isReadOnly) {
          _onDragOver(e, v);
        }
      },
      onDrop: function onDrop(e) {
        if (!isReadOnly) {
          _onDrop(e, v);
        }
      }
    });
  }))));
};
ValueList.displayName = 'ValueList';
//# sourceMappingURL=ValueList.js.map
