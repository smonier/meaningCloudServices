import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["component", "iconStart", "iconEnd", "iconSize", "typographyProps", "className", "children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import "./IconTextIcon.css";
import { Typography } from "./..";
export var IconTextIcon = function IconTextIcon(_ref) {
  var _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'div' : _ref$component,
      iconStart = _ref.iconStart,
      iconEnd = _ref.iconEnd,
      _ref$iconSize = _ref.iconSize,
      iconSize = _ref$iconSize === void 0 ? 'default' : _ref$iconSize,
      typographyProps = _ref.typographyProps,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  // Default Typography component props to use. Can be overwritten through
  // the use of the typographyProps property
  var typoProps = _objectSpread({
    component: 'span'
  }, typographyProps);

  return /*#__PURE__*/React.createElement(component, _objectSpread({
    className: clsx('moonstone-IconTextIcon', 'flexRow_nowrap', 'alignCenter', className)
  }, props), /*#__PURE__*/React.createElement(React.Fragment, null, iconStart && /*#__PURE__*/React.createElement(iconStart.type, _extends({
    size: iconSize,
    className: clsx('moonstone-IconTextIcon_iconStart', iconStart.props.className)
  }, iconStart.props)), /*#__PURE__*/React.createElement(Typography, _extends({
    isNowrap: true,
    className: clsx('flexFluid')
  }, typoProps), children), iconEnd && /*#__PURE__*/React.createElement(iconEnd.type, _extends({
    size: iconSize,
    className: clsx('moonstone-IconTextIcon_iconEnd', iconEnd.props.className)
  }, iconEnd.props))));
};
//# sourceMappingURL=IconTextIcon.js.map
