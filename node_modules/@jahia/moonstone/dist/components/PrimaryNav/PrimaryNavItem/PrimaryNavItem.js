import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["label", "icon", "className", "subtitle", "url", "button", "isSelected", "onClick", "badge"];
import React, { useContext } from 'react';
import clsx from 'clsx';
import "./PrimaryNavItem.css";
import { Typography } from "../../Typography";
import { PrimaryNavContext } from "../PrimaryNav.context"; // Internal component

var Item = function Item(_ref) {
  var icon = _ref.icon,
      label = _ref.label,
      textVariant = _ref.textVariant,
      subtitle = _ref.subtitle,
      button = _ref.button;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-primaryNavItem_content')
  }, /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-primaryNavItem_iconContainer')
  }, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: "big"
  }))), /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-primaryNavItem_textContainer')
  }, /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    variant: textVariant,
    component: "span",
    className: clsx('moonstone-primaryNavItem_label')
  }, label), subtitle && /*#__PURE__*/React.createElement(Typography, {
    isNowrap: true,
    component: "div",
    variant: "caption",
    className: clsx('moonstone-primaryNavItem_label', 'moonstone-subtitle')
  }, subtitle))), button && /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-primaryNavItem_buttonContainer')
  }, button));
}; // Internal component


var ItemTypeResolver = function ItemTypeResolver(_ref2) {
  var url = _ref2.url,
      icon = _ref2.icon,
      label = _ref2.label,
      subtitle = _ref2.subtitle,
      button = _ref2.button;

  if (url) {
    return /*#__PURE__*/React.createElement("a", {
      className: clsx('moonstone-primaryNavItem', 'moonstone-primaryNavItem_linkItem'),
      href: url,
      target: "_blank",
      rel: "noopener noreferrer"
    }, /*#__PURE__*/React.createElement(Item, {
      icon: icon,
      label: label,
      subtitle: subtitle,
      textVariant: "body",
      button: button
    }));
  }

  return /*#__PURE__*/React.createElement(Item, {
    icon: icon,
    label: label,
    subtitle: subtitle,
    textVariant: "subheading",
    button: button
  });
};

export var PrimaryNavItem = function PrimaryNavItem(_ref3) {
  var _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      _ref3$icon = _ref3.icon,
      icon = _ref3$icon === void 0 ? null : _ref3$icon,
      _ref3$className = _ref3.className,
      className = _ref3$className === void 0 ? null : _ref3$className,
      _ref3$subtitle = _ref3.subtitle,
      subtitle = _ref3$subtitle === void 0 ? null : _ref3$subtitle,
      _ref3$url = _ref3.url,
      url = _ref3$url === void 0 ? null : _ref3$url,
      _ref3$button = _ref3.button,
      button = _ref3$button === void 0 ? null : _ref3$button,
      _ref3$isSelected = _ref3.isSelected,
      isSelected = _ref3$isSelected === void 0 ? false : _ref3$isSelected,
      _ref3$onClick = _ref3.onClick,
      _onClick = _ref3$onClick === void 0 ? function () {
    return undefined;
  } : _ref3$onClick,
      _ref3$badge = _ref3.badge,
      badge = _ref3$badge === void 0 ? null : _ref3$badge,
      props = _objectWithoutProperties(_ref3, _excluded);

  var primaryNavContext = useContext(PrimaryNavContext);
  return /*#__PURE__*/React.createElement("li", _extends({
    className: clsx('moonstone-primaryNavItem', {
      'moonstone-selected': isSelected
    }, className),
    title: label,
    onClick: function onClick(e) {
      primaryNavContext.collapse();

      _onClick(e);
    }
  }, props), /*#__PURE__*/React.createElement(ItemTypeResolver, {
    icon: icon,
    label: label,
    subtitle: subtitle,
    url: url,
    button: button
  }), badge && /*#__PURE__*/React.createElement(badge.type, {
    className: clsx('moonstone-primaryNavItem_badge'),
    color: "danger",
    type: "round",
    label: badge.props.label
  }));
};
PrimaryNavItem.displayName = 'PrimaryNavItem';
//# sourceMappingURL=PrimaryNavItem.js.map
