import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["isDisplayedWhenCollapsed", "children"];
import React, { useContext } from 'react';
import clsx from 'clsx';
import "./PrimaryNavItemsGroup.css";
import { PrimaryNavContext } from "../PrimaryNav.context";
import { Separator } from "../../Separator";
export var PrimaryNavItemsGroup = function PrimaryNavItemsGroup(_ref) {
  var _ref$isDisplayedWhenC = _ref.isDisplayedWhenCollapsed,
      isDisplayedWhenCollapsed = _ref$isDisplayedWhenC === void 0 ? true : _ref$isDisplayedWhenC,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  var primaryNavContext = useContext(PrimaryNavContext);

  if (!primaryNavContext.isExpanded && !isDisplayedWhenCollapsed) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("li", {
    className: clsx('moonstone-primaryNavItemsGroup')
  }, /*#__PURE__*/React.createElement(Separator, {
    size: "large",
    spacing: "small"
  })), /*#__PURE__*/React.createElement("li", _extends({
    className: clsx('moonstone-primaryNavItemsGroup')
  }, props), /*#__PURE__*/React.createElement("ul", null, children)));
};
PrimaryNavItemsGroup.displayName = 'PrimaryNavItemsGroup';
//# sourceMappingURL=PrimaryNavItemsGroup.js.map
