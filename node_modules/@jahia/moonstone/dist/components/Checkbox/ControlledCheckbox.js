import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "checked", "indeterminate", "size", "isDisabled", "isReadOnly"];
import React, { useRef } from 'react';
import clsx from 'clsx';
import { capitalize } from "../../utils/helpers";
import "./Checkbox.css";
export var ControlledCheckbox = function ControlledCheckbox(_ref) {
  var className = _ref.className,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$indeterminate = _ref.indeterminate,
      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      isDisabled = _ref.isDisabled,
      isReadOnly = _ref.isReadOnly,
      props = _objectWithoutProperties(_ref, _excluded);

  var inputRef = useRef(null);
  return /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-checkbox', className)
  }, /*#__PURE__*/React.createElement("input", _extends({}, props, {
    ref: inputRef,
    className: clsx('moonstone-checkbox_input', "moonstone-checkbox_size".concat(capitalize(size))),
    type: "checkbox",
    checked: checked,
    disabled: isDisabled,
    "aria-readonly": isReadOnly,
    "aria-checked": indeterminate ? 'mixed' : checked
  })), /*#__PURE__*/React.createElement("svg", {
    className: clsx('moonstone-checkbox_icon', "moonstone-checkbox_size".concat(capitalize(size))),
    viewBox: "0 0 21 21"
  }, indeterminate ? /*#__PURE__*/React.createElement("path", {
    d: "M4.5 10.5L16.5 10.5",
    strokeLinecap: "round"
  }) : /*#__PURE__*/React.createElement("path", {
    d: "M5 10.75L8.5 14.25L16 6",
    strokeLinecap: "round"
  })));
};
ControlledCheckbox.displayName = 'ControlledCheckbox';
//# sourceMappingURL=ControlledCheckbox.js.map
