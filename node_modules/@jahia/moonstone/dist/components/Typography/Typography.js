import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "component", "variant", "weight", "className", "hasLineThrough", "isItalic", "isUpperCase", "isNowrap"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import "./Typography.css";
export var Typography = function Typography(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? '' : _ref$children,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'p' : _ref$component,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'body' : _ref$variant,
      _ref$weight = _ref.weight,
      weight = _ref$weight === void 0 ? 'default' : _ref$weight,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$hasLineThrough = _ref.hasLineThrough,
      hasLineThrough = _ref$hasLineThrough === void 0 ? false : _ref$hasLineThrough,
      _ref$isItalic = _ref.isItalic,
      isItalic = _ref$isItalic === void 0 ? false : _ref$isItalic,
      _ref$isUpperCase = _ref.isUpperCase,
      isUpperCase = _ref$isUpperCase === void 0 ? false : _ref$isUpperCase,
      _ref$isNowrap = _ref.isNowrap,
      isNowrap = _ref$isNowrap === void 0 ? false : _ref$isNowrap,
      props = _objectWithoutProperties(_ref, _excluded);

  if (!children) {
    return null;
  }

  return /*#__PURE__*/React.createElement(component, _objectSpread(_objectSpread({}, props), {}, {
    className: clsx('moonstone-typography', "moonstone-variant_".concat(variant), "moonstone-weight_".concat(weight), className, {
      'moonstone-nowrap': isNowrap
    }, {
      'moonstone-italic': isItalic
    }, {
      'moonstone-upperCase': isUpperCase
    }, {
      'moonstone-lineThrough': hasLineThrough
    })
  }), children);
};
Typography.displayName = 'Typography';
//# sourceMappingURL=Typography.js.map
