{"version":3,"sources":["Menu.tsx"],"names":["React","useState","useEffect","usePositioning","useEnterExitCallbacks","clsx","SearchInput","Typography","getChildrenToFilter","children","props","reduce","acc","curr","Menu","isDisplayed","position","minWidth","maxWidth","maxHeight","className","style","onMouseEnter","onMouseLeave","anchorEl","anchorElOrigin","transformElOrigin","anchorPosition","onClose","onEntering","onEntered","onExiting","onExited","hasOverlay","hasSearch","autoAddSearchLimit","searchEmptyText","stylePosition","itemRef","inputValue","setInputValue","filteredChildren","setFilteredChildren","isEmptySearch","setIsEmptySearch","Array","isArray","_childrenToFilter","_filtered","filter","child","label","contains","toLowerCase","includes","variant","length","Children","count","hasAutoSearch","flatChildren","styleMenu","e","target","value","key","list","toArray","onClick","defaultProps","top","left","vertical","horizontal","displayName"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {usePositioning} from '~/hooks/usePositioning';\nimport {useEnterExitCallbacks} from '~/hooks/useEnterExitCallbacks';\nimport clsx from 'clsx';\nimport './Menu.scss';\nimport {MenuProps} from './Menu.types';\nimport {SearchInput} from '~/components/Input';\nimport {Typography} from '~/components/Typography';\n\nconst getChildrenToFilter = (children: [React.ReactElement]) => {\n    if (children[0].props['data-option-type'] === 'group') {\n        return children.reduce((acc, curr) => {\n            return [...acc, ...curr.props.children[2]];\n        }, []);\n    }\n\n    return children;\n};\n\nexport const Menu: React.FC<MenuProps> = ({\n    children,\n    isDisplayed,\n    position,\n    minWidth,\n    maxWidth,\n    maxHeight,\n    className,\n    style,\n    onMouseEnter,\n    onMouseLeave,\n    anchorEl,\n    anchorElOrigin,\n    transformElOrigin,\n    anchorPosition,\n    onClose,\n    onEntering,\n    onEntered,\n    onExiting,\n    onExited,\n    hasOverlay,\n    hasSearch,\n    autoAddSearchLimit,\n    searchEmptyText,\n    ...props\n}) => {\n    const [stylePosition, itemRef] = usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position);\n    useEnterExitCallbacks(isDisplayed, onExiting, onExited, onEntering, onEntered);\n    const [inputValue, setInputValue] = useState('');\n    const [filteredChildren, setFilteredChildren] = useState(children);\n    const [isEmptySearch, setIsEmptySearch] = useState(false);\n    // UseEffect hook to filter the search results and determine whether to show the no search results text\n    useEffect(() => {\n        if (inputValue !== '' && Array.isArray(children)) {\n            const _childrenToFilter = getChildrenToFilter(children as [React.ReactElement]);\n            const _filtered = _childrenToFilter.filter((child: React.ReactElement) => {\n                if (child.props && child.props.label) {\n                    const contains = child.props.label.toLowerCase().includes(inputValue.toLowerCase());\n                    return contains && child.props.variant !== 'title';\n                }\n\n                return false;\n            });\n            setFilteredChildren(_filtered);\n\n            if (_filtered.length === 0) {\n                setIsEmptySearch(true);\n            } else {\n                setIsEmptySearch(false);\n            }\n        } else {\n            setFilteredChildren(null);\n            setIsEmptySearch(false);\n        }\n    }, [inputValue, children]);\n\n    if (!children || React.Children.count(children) < 1) {\n        return null;\n    }\n\n    let hasAutoSearch = hasSearch;\n    if (typeof hasSearch === 'undefined') {\n        const flatChildren = (Array.isArray(children)) ? getChildrenToFilter(children as [React.ReactElement]) : children; // Check for grouped data\n        hasAutoSearch = React.Children.count(flatChildren) > autoAddSearchLimit;\n    }\n\n    // ---\n    // Styling\n    // ---\n    const styleMenu: React.CSSProperties = {\n        position,\n        ...stylePosition as React.CSSProperties,\n        ...style\n    };\n\n    if (minWidth) {\n        styleMenu.minWidth = minWidth;\n    }\n\n    if (maxWidth) {\n        styleMenu.maxWidth = maxWidth;\n    }\n\n    if (maxHeight) {\n        styleMenu.maxHeight = maxHeight;\n    }\n\n    // ---\n    // Render\n    // ---\n    return (\n        <>\n            <menu\n                ref={itemRef}\n                style={styleMenu}\n                role=\"listbox\"\n                className={clsx(\n                    'moonstone-menu',\n                    className,\n                    {'moonstone-hidden': !isDisplayed || !stylePosition}\n                )}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                {...props}\n            >\n                { hasAutoSearch && (\n                    <div className=\"moonstone-menu_searchInput\">\n                        <SearchInput\n                            focusOnField\n                            value={inputValue}\n                            onChange={e => setInputValue(e.target.value)}\n                            onKeyPress={e => {\n                                if (e.key === 'Enter') {\n                                    const list = React.Children.toArray(filteredChildren);\n                                    if (list.length > 0) {\n                                        (list[0] as React.ReactElement).props.onClick(e);\n                                    }\n                                }\n                            }}\n                            onClear={() => setInputValue('')}\n                        />\n                    </div>\n                )}\n                {filteredChildren || children}\n                {isEmptySearch && (\n                    <Typography\n                        className=\"moonstone-menu_emptySearchText\"\n                        variant=\"caption\"\n                    >\n                        {searchEmptyText}\n                    </Typography>\n                )}\n            </menu>\n            {\n                hasOverlay && isDisplayed && (\n                    <div\n                        aria-hidden=\"true\"\n                        className=\"moonstone-menu_overlay\"\n                        onClick={onClose}\n                        onContextMenu={onClose}\n                    />\n                )\n            }\n        </>\n    );\n};\n\n// Kept defaultProps here because of unnecessary re-rendering when provided as default parameters to the function component\n/* eslint-disable react/default-props-match-prop-types */\nMenu.defaultProps = {\n    hasOverlay: true,\n    autoAddSearchLimit: 7,\n    searchEmptyText: 'No results found.',\n    position: 'fixed',\n    anchorEl: null,\n    anchorPosition: {\n        top: 0,\n        left: 0\n    },\n    anchorElOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n    },\n    transformElOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n    }\n};\n/* eslint-enable react/default-props-match-prop-types */\n\nMenu.displayName = 'Menu';\n"]}