import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
var _excluded = ["children", "isDisplayed", "position", "minWidth", "maxWidth", "maxHeight", "className", "style", "onMouseEnter", "onMouseLeave", "anchorEl", "anchorElOrigin", "transformElOrigin", "anchorPosition", "onClose", "onEntering", "onEntered", "onExiting", "onExited", "hasOverlay", "hasSearch", "autoAddSearchLimit", "searchEmptyText"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useState, useEffect } from 'react';
import { usePositioning } from "../../hooks/usePositioning";
import { useEnterExitCallbacks } from "../../hooks/useEnterExitCallbacks";
import clsx from 'clsx';
import "./Menu.css";
import { SearchInput } from "../Input";
import { Typography } from "../Typography";

var getChildrenToFilter = function getChildrenToFilter(children) {
  if (children[0].props['data-option-type'] === 'group') {
    return children.reduce(function (acc, curr) {
      return [].concat(_toConsumableArray(acc), _toConsumableArray(curr.props.children[2]));
    }, []);
  }

  return children;
};

export var Menu = function Menu(_ref) {
  var children = _ref.children,
      isDisplayed = _ref.isDisplayed,
      position = _ref.position,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      maxHeight = _ref.maxHeight,
      className = _ref.className,
      style = _ref.style,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      anchorEl = _ref.anchorEl,
      anchorElOrigin = _ref.anchorElOrigin,
      transformElOrigin = _ref.transformElOrigin,
      anchorPosition = _ref.anchorPosition,
      onClose = _ref.onClose,
      onEntering = _ref.onEntering,
      onEntered = _ref.onEntered,
      onExiting = _ref.onExiting,
      onExited = _ref.onExited,
      hasOverlay = _ref.hasOverlay,
      hasSearch = _ref.hasSearch,
      autoAddSearchLimit = _ref.autoAddSearchLimit,
      searchEmptyText = _ref.searchEmptyText,
      props = _objectWithoutProperties(_ref, _excluded);

  var _usePositioning = usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position),
      _usePositioning2 = _slicedToArray(_usePositioning, 2),
      stylePosition = _usePositioning2[0],
      itemRef = _usePositioning2[1];

  useEnterExitCallbacks(isDisplayed, onExiting, onExited, onEntering, onEntered);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var _useState3 = useState(children),
      _useState4 = _slicedToArray(_useState3, 2),
      filteredChildren = _useState4[0],
      setFilteredChildren = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isEmptySearch = _useState6[0],
      setIsEmptySearch = _useState6[1]; // UseEffect hook to filter the search results and determine whether to show the no search results text


  useEffect(function () {
    if (inputValue !== '' && Array.isArray(children)) {
      var _childrenToFilter = getChildrenToFilter(children);

      var _filtered = _childrenToFilter.filter(function (child) {
        if (child.props && child.props.label) {
          var contains = child.props.label.toLowerCase().includes(inputValue.toLowerCase());
          return contains && child.props.variant !== 'title';
        }

        return false;
      });

      setFilteredChildren(_filtered);

      if (_filtered.length === 0) {
        setIsEmptySearch(true);
      } else {
        setIsEmptySearch(false);
      }
    } else {
      setFilteredChildren(null);
      setIsEmptySearch(false);
    }
  }, [inputValue, children]);

  if (!children || React.Children.count(children) < 1) {
    return null;
  }

  var hasAutoSearch = hasSearch;

  if (typeof hasSearch === 'undefined') {
    var flatChildren = Array.isArray(children) ? getChildrenToFilter(children) : children; // Check for grouped data

    hasAutoSearch = React.Children.count(flatChildren) > autoAddSearchLimit;
  } // ---
  // Styling
  // ---


  var styleMenu = _objectSpread(_objectSpread({
    position: position
  }, stylePosition), style);

  if (minWidth) {
    styleMenu.minWidth = minWidth;
  }

  if (maxWidth) {
    styleMenu.maxWidth = maxWidth;
  }

  if (maxHeight) {
    styleMenu.maxHeight = maxHeight;
  } // ---
  // Render
  // ---


  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("menu", _extends({
    ref: itemRef,
    style: styleMenu,
    role: "listbox",
    className: clsx('moonstone-menu', className, {
      'moonstone-hidden': !isDisplayed || !stylePosition
    }),
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, props), hasAutoSearch && /*#__PURE__*/React.createElement("div", {
    className: "moonstone-menu_searchInput"
  }, /*#__PURE__*/React.createElement(SearchInput, {
    focusOnField: true,
    value: inputValue,
    onChange: function onChange(e) {
      return setInputValue(e.target.value);
    },
    onKeyPress: function onKeyPress(e) {
      if (e.key === 'Enter') {
        var list = React.Children.toArray(filteredChildren);

        if (list.length > 0) {
          list[0].props.onClick(e);
        }
      }
    },
    onClear: function onClear() {
      return setInputValue('');
    }
  })), filteredChildren || children, isEmptySearch && /*#__PURE__*/React.createElement(Typography, {
    className: "moonstone-menu_emptySearchText",
    variant: "caption"
  }, searchEmptyText)), hasOverlay && isDisplayed && /*#__PURE__*/React.createElement("div", {
    "aria-hidden": "true",
    className: "moonstone-menu_overlay",
    onClick: onClose,
    onContextMenu: onClose
  }));
}; // Kept defaultProps here because of unnecessary re-rendering when provided as default parameters to the function component

/* eslint-disable react/default-props-match-prop-types */

Menu.defaultProps = {
  hasOverlay: true,
  autoAddSearchLimit: 7,
  searchEmptyText: 'No results found.',
  position: 'fixed',
  anchorEl: null,
  anchorPosition: {
    top: 0,
    left: 0
  },
  anchorElOrigin: {
    vertical: 'bottom',
    horizontal: 'left'
  },
  transformElOrigin: {
    vertical: 'top',
    horizontal: 'left'
  }
};
/* eslint-enable react/default-props-match-prop-types */

Menu.displayName = 'Menu';
//# sourceMappingURL=Menu.js.map
