import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value", "id", "role", "placeholder", "isDisabled", "isReadOnly", "className", "size", "icon", "variant", "isShowClearButton", "isShowTriggerButton", "triggerButtonIcon", "prefixComponents", "onClick", "onKeyPress", "onTrigger", "onClear", "onChange", "onBlur", "onFocus", "focusOnField"];
import React, { useEffect, useRef } from 'react';
import clsx from 'clsx';
import { Cancel, ChevronDown } from "../../../icons";
import { Button } from "../..";
import "./BaseInput.css";
export var ControlledBaseInput = function ControlledBaseInput(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      id = _ref.id,
      role = _ref.role,
      placeholder = _ref.placeholder,
      _ref$isDisabled = _ref.isDisabled,
      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,
      _ref$isReadOnly = _ref.isReadOnly,
      isReadOnly = _ref$isReadOnly === void 0 ? false : _ref$isReadOnly,
      className = _ref.className,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      icon = _ref.icon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'outlined' : _ref$variant,
      isShowClearButton = _ref.isShowClearButton,
      isShowTriggerButton = _ref.isShowTriggerButton,
      _ref$triggerButtonIco = _ref.triggerButtonIcon,
      triggerButtonIcon = _ref$triggerButtonIco === void 0 ? /*#__PURE__*/React.createElement(ChevronDown, null) : _ref$triggerButtonIco,
      prefixComponents = _ref.prefixComponents,
      onClick = _ref.onClick,
      onKeyPress = _ref.onKeyPress,
      onTrigger = _ref.onTrigger,
      onClear = _ref.onClear,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      _ref$focusOnField = _ref.focusOnField,
      focusOnField = _ref$focusOnField === void 0 ? false : _ref$focusOnField,
      props = _objectWithoutProperties(_ref, _excluded);

  var isFilled = value !== '';
  var inputRef = useRef(null);
  var classNameProps = clsx('moonstone-baseInput', "moonstone-".concat(size), "moonstone-".concat(variant), className);
  useEffect(function () {
    if (focusOnField) {
      inputRef.current.focus({
        preventScroll: true
      });
    }
  }, [focusOnField]);

  if (isShowClearButton && !onClear) {
    onClear = function onClear() {
      inputRef.current.value = '';
      var inputEvent = new Event('change');
      inputRef.current.dispatchEvent(inputEvent);
      onChange(inputEvent);
    };
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classNameProps,
    onClick: onClick
  }, icon && /*#__PURE__*/React.createElement("div", {
    className: clsx('moonstone-baseInput_icon', 'flexRow_nowrap', 'alignCenter')
  }, /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    focusable: "false"
  }))), /*#__PURE__*/React.createElement("div", {
    className: "flexRow alignCenter flexFluid moonstone-baseInput_elementsWrapper"
  }, prefixComponents, /*#__PURE__*/React.createElement("input", _extends({
    ref: inputRef,
    className: clsx('moonstone-baseInput-element', "moonstone-".concat(size)),
    type: "text",
    role: role,
    value: value,
    id: id,
    placeholder: placeholder,
    disabled: isDisabled,
    readOnly: isReadOnly,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    onKeyPress: onKeyPress
  }, props))), onClear && isFilled && !isDisabled && !isReadOnly && /*#__PURE__*/React.createElement(Button, {
    className: "moonstone-baseInput_clearButton flexRow_center alignCenter",
    variant: "ghost",
    icon: /*#__PURE__*/React.createElement(Cancel, null),
    "aria-label": "Reset",
    onClick: onClear
  }), isShowTriggerButton && /*#__PURE__*/React.createElement(Button, {
    className: "moonstone-baseInput_clearButton flexRow_center alignCenter",
    variant: "ghost",
    icon: triggerButtonIcon,
    "aria-label": "Open",
    onClick: onTrigger
  }));
};
ControlledBaseInput.displayName = 'ControlledBaseInput';
//# sourceMappingURL=ControlledBaseInput.js.map
