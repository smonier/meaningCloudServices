{"version":3,"sources":["ControlledBaseInput.tsx"],"names":["React","useEffect","useRef","clsx","Cancel","ChevronDown","Button","ControlledBaseInput","value","id","role","placeholder","isDisabled","isReadOnly","className","size","icon","variant","isShowClearButton","isShowTriggerButton","triggerButtonIcon","prefixComponents","onClick","onKeyPress","onTrigger","onClear","onChange","onBlur","onFocus","focusOnField","props","isFilled","inputRef","classNameProps","current","focus","preventScroll","inputEvent","Event","dispatchEvent","displayName"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport clsx from 'clsx';\nimport {Cancel, ChevronDown} from '~/icons';\nimport {Button} from '~/components';\nimport './BaseInput.scss';\nimport {BaseInputProps} from './BaseInput.types';\n\nexport const ControlledBaseInput: React.FC<BaseInputProps> = ({\n    value = '',\n    id,\n    role,\n    placeholder,\n    isDisabled = false,\n    isReadOnly = false,\n    className,\n    size = 'default',\n    icon,\n    variant = 'outlined',\n    isShowClearButton,\n    isShowTriggerButton,\n    triggerButtonIcon = <ChevronDown/>,\n    prefixComponents,\n    onClick,\n    onKeyPress,\n    onTrigger,\n    onClear,\n    onChange,\n    onBlur,\n    onFocus,\n    focusOnField = false,\n    ...props\n}) => {\n    const isFilled = value !== '';\n    const inputRef = useRef(null);\n    const classNameProps = clsx('moonstone-baseInput', `moonstone-${size}`, `moonstone-${variant}`, className);\n\n    useEffect(() => {\n        if (focusOnField) {\n            inputRef.current.focus({preventScroll: true});\n        }\n    }, [focusOnField]);\n\n    if (isShowClearButton && !onClear) {\n        onClear = () => {\n            inputRef.current.value = '';\n            const inputEvent: unknown = new Event('change');\n            inputRef.current.dispatchEvent(inputEvent);\n            onChange(inputEvent as React.ChangeEvent<HTMLInputElement>);\n        };\n    }\n\n    return (\n        <div className={classNameProps} onClick={onClick}>\n            {icon && (\n                <div\n                    className={clsx(\n                        'moonstone-baseInput_icon',\n                        'flexRow_nowrap',\n                        'alignCenter'\n                    )}\n                >\n                    <icon.type {...icon.props} focusable=\"false\"/>\n                </div>\n            )}\n            <div className=\"flexRow alignCenter flexFluid moonstone-baseInput_elementsWrapper\">\n                {prefixComponents}\n                <input\n                    ref={inputRef}\n                    className={clsx('moonstone-baseInput-element', `moonstone-${size}`)}\n                    type=\"text\"\n                    role={role}\n                    value={value}\n                    id={id}\n                    placeholder={placeholder}\n                    disabled={isDisabled}\n                    readOnly={isReadOnly}\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    onFocus={onFocus}\n                    onKeyPress={onKeyPress}\n                    {...props}\n                />\n            </div>\n            {onClear && isFilled && !isDisabled && !isReadOnly && (\n                <Button\n                    className=\"moonstone-baseInput_clearButton flexRow_center alignCenter\"\n                    variant=\"ghost\"\n                    icon={<Cancel/>}\n                    aria-label=\"Reset\"\n                    onClick={onClear}\n                />\n            )}\n            {isShowTriggerButton && (\n                <Button\n                    className=\"moonstone-baseInput_clearButton flexRow_center alignCenter\"\n                    variant=\"ghost\"\n                    icon={triggerButtonIcon}\n                    aria-label=\"Open\"\n                    onClick={onTrigger}\n                />\n            )}\n        </div>\n    );\n};\n\nControlledBaseInput.displayName = 'ControlledBaseInput';\n"]}