{"version":3,"sources":["ControlledTreeView.tsx"],"names":["React","clsx","Loading","ChevronDown","ChevronRight","CheckboxChecked","CheckboxUnchecked","Typography","displayIcon","icon","size","className","parentHasIconStart","props","displayIconOrLoading","isLoading","i","ControlledTreeViewForwardRef","ref","data","openedItems","selectedItems","showCheckbox","onClickItem","undefined","onDoubleClickItem","onContextMenuItem","onOpenItem","onCloseItem","isReversed","component","itemComponent","isFlatData","filter","item","children","length","generateLevelJSX","nodeData","depth","map","node","hasChild","Boolean","hasChildren","hasIconStart","iconStart","isClosable","isOpen","includes","id","isSelected","toggleNode","e","handleNodeClick","handleNodeDoubleClick","handleNodeContextMenu","cssTreeViewItem","isDisabled","createElement","role","key","style","treeItemProps","typographyOptions","label","iconEnd","ControlledTreeView","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport './TreeView.scss';\nimport {ControlledTreeViewProps} from './ControlledTreeView.types';\nimport {TreeViewData} from './TreeView.types';\n\nimport {Loading, ChevronDown, ChevronRight, CheckboxChecked, CheckboxUnchecked} from '~/icons';\nimport {Typography} from '~/components/Typography';\n\n// Manage treeView_item's icon\nconst displayIcon = (icon: React.ReactElement, size: string, className: string, parentHasIconStart = false) => {\n    if (!icon && !parentHasIconStart) {\n        return;\n    }\n\n    return (\n        <i className={clsx('flexRow', 'alignCenter', className)}>\n            {icon &&\n            <icon.type {...icon.props} size={size}/>}\n        </i>\n    );\n};\n\n// Manage if we display icon or loading\nconst displayIconOrLoading = (icon: React.ReactElement, isLoading: boolean) => {\n    const i = isLoading ? <Loading size=\"big\" className=\"moonstone-icon_isLoading\"/> : icon;\n\n    return displayIcon(i, 'default', 'moonstone-treeView_itemIconEnd');\n};\n\nconst ControlledTreeViewForwardRef: React.ForwardRefRenderFunction<HTMLUListElement, ControlledTreeViewProps> = (\n    {\n        data,\n        openedItems = [],\n        selectedItems = [],\n        showCheckbox = false,\n        onClickItem = () => undefined,\n        onDoubleClickItem = () => undefined,\n        onContextMenuItem = () => undefined,\n        onOpenItem = () => undefined,\n        onCloseItem = () => undefined,\n        isReversed = false,\n        component = 'ul',\n        itemComponent = 'li',\n        size = 'default',\n        ...props\n    }, ref) => {\n    const isFlatData = data.filter(item => item.children && item.children.length > 0).length === 0;\n\n    function generateLevelJSX(nodeData: TreeViewData[], depth: number, parentHasIconStart: boolean): React.ReactNode[] {\n        return nodeData.map(node => {\n            const hasChild = Boolean(node.hasChildren || (node.children && node.children.length !== 0));\n            const hasIconStart = Boolean(node.iconStart);\n            const isClosable = Boolean(node.isClosable !== false);\n            const isOpen = Boolean(openedItems.includes(node.id)) || !isClosable;\n            const isLoading = Boolean(node.isLoading);\n            const isSelected = Boolean(selectedItems.includes(node.id));\n\n            // ---\n            // Manage clicks events\n            // ---\n            const toggleNode = (e: React.MouseEvent) => {\n                if (isOpen) {\n                    onCloseItem(node, e);\n                } else {\n                    onOpenItem(node, e);\n                }\n            };\n\n            const handleNodeClick = (e: React.MouseEvent) => {\n                if (onClickItem.length === 0) {\n                    toggleNode(e);\n                }\n\n                onClickItem(node, e, toggleNode);\n            };\n\n            const handleNodeDoubleClick = (e: React.MouseEvent) => {\n                onDoubleClickItem(node, e);\n            };\n\n            const handleNodeContextMenu = (e: React.MouseEvent) => {\n                onContextMenuItem(node, e);\n            };\n\n            // ---\n            // Define CSS treeView_item classes\n            // ---\n            const cssTreeViewItem = clsx(\n                'flexRow_between',\n                'alignCenter',\n                'moonstone-treeView_item',\n                {\n                    'moonstone-small': size === 'small',\n                    'moonstone-selected': isSelected && !showCheckbox,\n                    'moonstone-reversed': isReversed,\n                    'moonstone-disabled': node.isDisabled\n                }\n            );\n\n            return [\n                React.createElement(\n                    itemComponent,\n                    {\n                        role: 'treeitem',\n                        'aria-expanded': isOpen,\n                        key: `${depth}-${node.id}`,\n                        style: {'--treeItem-depth': depth},\n                        ...node.treeItemProps\n                    },\n                    <div className={cssTreeViewItem}>\n                        {/* Icon arrow */}\n                        {isClosable && hasChild && (\n                            <div\n                                className={clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')}\n                                onClick={toggleNode}\n                            >\n                                {isOpen ? <ChevronDown size={size}/> : <ChevronRight size={size}/>}\n                            </div>\n                        )}\n                        {!isFlatData && !hasChild &&\n                            <div className={clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')}/>}\n\n                        {/* TreeViewItem */}\n                        <div\n                            className={clsx('flexRow_nowrap', 'alignCenter', 'flexFluid', 'moonstone-treeView_itemLabel', node.className)}\n                            onClick={node.isDisabled ? undefined : handleNodeClick}\n                            onDoubleClick={handleNodeDoubleClick}\n                            onContextMenu={handleNodeContextMenu}\n                        >\n                            {showCheckbox ?\n                                (isSelected ? <CheckboxChecked className=\"moonstone-treeView_itemIconStart\" role=\"checkbox\" color=\"blue\"/> : <CheckboxUnchecked className=\"moonstone-treeView_itemIconStart\" role=\"checkbox\"/>) :\n                                (displayIcon(node.iconStart, 'small', 'moonstone-treeView_itemIconStart', parentHasIconStart))}\n                            <Typography isNowrap\n                                        className={clsx('flexFluid')}\n                                        component=\"span\"\n                                        variant={size === 'default' ? 'body' : 'caption'}\n                                        {...node.typographyOptions}\n                            >\n                                {node.label}\n                            </Typography>\n                            {displayIconOrLoading(node.iconEnd, isLoading)}\n                        </div>\n                    </div>\n                ),\n                ...((isOpen && node.children) ? generateLevelJSX(node.children, isClosable ? (depth + 1) : depth, hasIconStart) : [])\n            ];\n        });\n    }\n\n    // TreeView component\n    return React.createElement(component, {ref, role: 'tree', ...props}, generateLevelJSX(data, 0, false));\n};\n\nexport const ControlledTreeView = React.forwardRef(ControlledTreeViewForwardRef);\n"]}