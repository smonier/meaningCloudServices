import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["data", "openedItems", "selectedItems", "showCheckbox", "onClickItem", "onDoubleClickItem", "onContextMenuItem", "onOpenItem", "onCloseItem", "isReversed", "component", "itemComponent", "size"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import clsx from 'clsx';
import "./TreeView.css";
import { Loading, ChevronDown, ChevronRight, CheckboxChecked, CheckboxUnchecked } from "../../icons";
import { Typography } from "../Typography"; // Manage treeView_item's icon

var displayIcon = function displayIcon(icon, size, className) {
  var parentHasIconStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (!icon && !parentHasIconStart) {
    return;
  }

  return /*#__PURE__*/React.createElement("i", {
    className: clsx('flexRow', 'alignCenter', className)
  }, icon && /*#__PURE__*/React.createElement(icon.type, _extends({}, icon.props, {
    size: size
  })));
}; // Manage if we display icon or loading


var displayIconOrLoading = function displayIconOrLoading(icon, isLoading) {
  var i = isLoading ? /*#__PURE__*/React.createElement(Loading, {
    size: "big",
    className: "moonstone-icon_isLoading"
  }) : icon;
  return displayIcon(i, 'default', 'moonstone-treeView_itemIconEnd');
};

var ControlledTreeViewForwardRef = function ControlledTreeViewForwardRef(_ref, ref) {
  var data = _ref.data,
      _ref$openedItems = _ref.openedItems,
      openedItems = _ref$openedItems === void 0 ? [] : _ref$openedItems,
      _ref$selectedItems = _ref.selectedItems,
      selectedItems = _ref$selectedItems === void 0 ? [] : _ref$selectedItems,
      _ref$showCheckbox = _ref.showCheckbox,
      showCheckbox = _ref$showCheckbox === void 0 ? false : _ref$showCheckbox,
      _ref$onClickItem = _ref.onClickItem,
      onClickItem = _ref$onClickItem === void 0 ? function () {
    return undefined;
  } : _ref$onClickItem,
      _ref$onDoubleClickIte = _ref.onDoubleClickItem,
      onDoubleClickItem = _ref$onDoubleClickIte === void 0 ? function () {
    return undefined;
  } : _ref$onDoubleClickIte,
      _ref$onContextMenuIte = _ref.onContextMenuItem,
      onContextMenuItem = _ref$onContextMenuIte === void 0 ? function () {
    return undefined;
  } : _ref$onContextMenuIte,
      _ref$onOpenItem = _ref.onOpenItem,
      onOpenItem = _ref$onOpenItem === void 0 ? function () {
    return undefined;
  } : _ref$onOpenItem,
      _ref$onCloseItem = _ref.onCloseItem,
      onCloseItem = _ref$onCloseItem === void 0 ? function () {
    return undefined;
  } : _ref$onCloseItem,
      _ref$isReversed = _ref.isReversed,
      isReversed = _ref$isReversed === void 0 ? false : _ref$isReversed,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'ul' : _ref$component,
      _ref$itemComponent = _ref.itemComponent,
      itemComponent = _ref$itemComponent === void 0 ? 'li' : _ref$itemComponent,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'default' : _ref$size,
      props = _objectWithoutProperties(_ref, _excluded);

  var isFlatData = data.filter(function (item) {
    return item.children && item.children.length > 0;
  }).length === 0;

  function generateLevelJSX(nodeData, depth, parentHasIconStart) {
    return nodeData.map(function (node) {
      var hasChild = Boolean(node.hasChildren || node.children && node.children.length !== 0);
      var hasIconStart = Boolean(node.iconStart);
      var isClosable = Boolean(node.isClosable !== false);
      var isOpen = Boolean(openedItems.includes(node.id)) || !isClosable;
      var isLoading = Boolean(node.isLoading);
      var isSelected = Boolean(selectedItems.includes(node.id)); // ---
      // Manage clicks events
      // ---

      var toggleNode = function toggleNode(e) {
        if (isOpen) {
          onCloseItem(node, e);
        } else {
          onOpenItem(node, e);
        }
      };

      var handleNodeClick = function handleNodeClick(e) {
        if (onClickItem.length === 0) {
          toggleNode(e);
        }

        onClickItem(node, e, toggleNode);
      };

      var handleNodeDoubleClick = function handleNodeDoubleClick(e) {
        onDoubleClickItem(node, e);
      };

      var handleNodeContextMenu = function handleNodeContextMenu(e) {
        onContextMenuItem(node, e);
      }; // ---
      // Define CSS treeView_item classes
      // ---


      var cssTreeViewItem = clsx('flexRow_between', 'alignCenter', 'moonstone-treeView_item', {
        'moonstone-small': size === 'small',
        'moonstone-selected': isSelected && !showCheckbox,
        'moonstone-reversed': isReversed,
        'moonstone-disabled': node.isDisabled
      });
      return [/*#__PURE__*/React.createElement(itemComponent, _objectSpread({
        role: 'treeitem',
        'aria-expanded': isOpen,
        key: "".concat(depth, "-").concat(node.id),
        style: {
          '--treeItem-depth': depth
        }
      }, node.treeItemProps), /*#__PURE__*/React.createElement("div", {
        className: cssTreeViewItem
      }, isClosable && hasChild && /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle'),
        onClick: toggleNode
      }, isOpen ? /*#__PURE__*/React.createElement(ChevronDown, {
        size: size
      }) : /*#__PURE__*/React.createElement(ChevronRight, {
        size: size
      })), !isFlatData && !hasChild && /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow', 'alignCenter', 'moonstone-treeView_itemToggle')
      }), /*#__PURE__*/React.createElement("div", {
        className: clsx('flexRow_nowrap', 'alignCenter', 'flexFluid', 'moonstone-treeView_itemLabel', node.className),
        onClick: node.isDisabled ? undefined : handleNodeClick,
        onDoubleClick: handleNodeDoubleClick,
        onContextMenu: handleNodeContextMenu
      }, showCheckbox ? isSelected ? /*#__PURE__*/React.createElement(CheckboxChecked, {
        className: "moonstone-treeView_itemIconStart",
        role: "checkbox",
        color: "blue"
      }) : /*#__PURE__*/React.createElement(CheckboxUnchecked, {
        className: "moonstone-treeView_itemIconStart",
        role: "checkbox"
      }) : displayIcon(node.iconStart, 'small', 'moonstone-treeView_itemIconStart', parentHasIconStart), /*#__PURE__*/React.createElement(Typography, _extends({
        isNowrap: true,
        className: clsx('flexFluid'),
        component: "span",
        variant: size === 'default' ? 'body' : 'caption'
      }, node.typographyOptions), node.label), displayIconOrLoading(node.iconEnd, isLoading))))].concat(_toConsumableArray(isOpen && node.children ? generateLevelJSX(node.children, isClosable ? depth + 1 : depth, hasIconStart) : []));
    });
  } // TreeView component


  return /*#__PURE__*/React.createElement(component, _objectSpread({
    ref: ref,
    role: 'tree'
  }, props), generateLevelJSX(data, 0, false));
};

export var ControlledTreeView = /*#__PURE__*/React.forwardRef(ControlledTreeViewForwardRef);
//# sourceMappingURL=ControlledTreeView.js.map
