import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["header", "content", "hasPadding", "isLoading", "isCentered", "className"];
import React from 'react';
import clsx from 'clsx';
import "./LayoutContent.css";
import { Loader } from "../../components/Loader";
export var LayoutContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var header = _ref.header,
      content = _ref.content,
      _ref$hasPadding = _ref.hasPadding,
      hasPadding = _ref$hasPadding === void 0 ? true : _ref$hasPadding,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
      _ref$isCentered = _ref.isCentered,
      isCentered = _ref$isCentered === void 0 ? false : _ref$isCentered,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, _excluded);

  var classNameProps = clsx('flexFluid', 'moonstone-layoutContent', {
    'moonstone-layoutContent_withPadding': hasPadding
  }, isLoading ? ['flexCol_center', 'alignCenter'] : 'flexCol_nowrap');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: clsx('flexCol', 'flexFluid', 'moonstone-layoutContent_wrapper', className)
  }, props), header, /*#__PURE__*/React.createElement("div", {
    className: classNameProps,
    "role-busy": isLoading ? 'true' : undefined
  }, isLoading ? /*#__PURE__*/React.createElement(Loader, {
    size: "big"
  }) : isCentered ? /*#__PURE__*/React.createElement("div", {
    className: "flexCol_nowrap flexFluid moonstone-layoutContent_centered"
  }, content) : content));
});
LayoutContent.displayName = 'LayoutContent';
//# sourceMappingURL=LayoutContent.js.map
