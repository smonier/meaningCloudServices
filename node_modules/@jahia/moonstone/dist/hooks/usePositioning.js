import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { useEffect, useRef, useState } from 'react';
import toPX from 'to-px';
var initialPosition = {
  top: -1000,
  left: -1000
};

var getPosition = function getPosition(anchorPosition) {
  return {
    top: typeof anchorPosition.top === 'string' ? toPX(anchorPosition.top) : anchorPosition.top,
    left: typeof anchorPosition.left === 'string' ? toPX(anchorPosition.left) : anchorPosition.left
  };
};

var getClosestRelativeAncestor = function getClosestRelativeAncestor(el) {
  el = el.parentElement;

  while (el.parentElement) {
    if (window.getComputedStyle(el).position !== 'static') {
      return el;
    }

    el = el.parentElement;
  }

  return el;
};

var getAbsolutePositionCSS = function getAbsolutePositionCSS(anchorElOrigin, transformElOrigin, anchorPosition) {
  var style = {};

  switch (anchorElOrigin.vertical) {
    case 'bottom':
      style.top = "calc(100% + ".concat(anchorPosition.top, "px)");
      break;

    case 'center':
      style.top = "calc(50% + ".concat(anchorPosition.top, "px)");
      break;

    case 'top':
      style.top = anchorPosition.top;
      break;

    default: // For linter

  }

  switch (anchorElOrigin.horizontal) {
    case 'left':
      style.left = anchorPosition.left;
      break;

    case 'center':
      style.left = "calc(50% + ".concat(anchorPosition.left, "px)");
      break;

    case 'right':
      style.left = "calc(100% + ".concat(anchorPosition.left, "px)");
      break;

    default: // For linter

  }

  if (transformElOrigin.vertical === 'bottom') {
    style.transform = 'translateY(-100%)';
  }

  if (transformElOrigin.horizontal === 'right') {
    style.transform = style.transform || '';
    style.transform += 'translateX(-100%)';
  }

  return style;
};

var getAbsolutePosition = function getAbsolutePosition(itemRef, anchorElOrigin, transformElOrigin, anchorPosition) {
  var _itemRef$current;

  var menuRectangle = itemRef === null || itemRef === void 0 ? void 0 : (_itemRef$current = itemRef.current) === null || _itemRef$current === void 0 ? void 0 : _itemRef$current.getBoundingClientRect();
  var closestRelativeAncestorRect = getClosestRelativeAncestor(itemRef === null || itemRef === void 0 ? void 0 : itemRef.current).getBoundingClientRect();
  var stylePosition = getAbsolutePositionCSS(anchorElOrigin, transformElOrigin, anchorPosition);

  if (stylePosition.left && closestRelativeAncestorRect.left + anchorPosition.left + menuRectangle.width > window.document.body.clientWidth && anchorElOrigin.horizontal === 'right') {
    stylePosition = getAbsolutePositionCSS(_objectSpread(_objectSpread({}, anchorElOrigin), {}, {
      horizontal: 'left'
    }), _objectSpread(_objectSpread({}, transformElOrigin), {}, {
      horizontal: 'right'
    }), anchorPosition);
  }

  if (stylePosition.top && closestRelativeAncestorRect.top + closestRelativeAncestorRect.height + anchorPosition.top + menuRectangle.height > window.document.body.clientHeight && anchorElOrigin.vertical === 'bottom') {
    stylePosition = getAbsolutePositionCSS(_objectSpread(_objectSpread({}, anchorElOrigin), {}, {
      vertical: 'top'
    }), _objectSpread(_objectSpread({}, transformElOrigin), {}, {
      vertical: 'bottom'
    }), anchorPosition);
  }

  return _objectSpread(_objectSpread({}, stylePosition), {}, {
    position: 'absolute'
  });
};

var getPositionRelativeToEl = function getPositionRelativeToEl(resolvedAnchorEl, anchorElOrigin, transformElOrigin, anchorPosition) {
  var anchorElRectangle = resolvedAnchorEl.getBoundingClientRect();
  var point = {};

  switch (anchorElOrigin.vertical) {
    case 'top':
      point.top = anchorElRectangle.top;
      break;

    case 'center':
      point.top = anchorElRectangle.top + anchorElRectangle.height / 2;
      break;

    case 'bottom':
      point.top = anchorElRectangle.bottom;
      break;

    default: // For linter

  }

  switch (anchorElOrigin.horizontal) {
    case 'left':
      point.left = anchorElRectangle.left;
      break;

    case 'center':
      point.left = anchorElRectangle.left + anchorElRectangle.width / 2;
      break;

    case 'right':
      point.left = anchorElRectangle.right;
      break;

    default: // For linter

  }

  var stylePosition = getPosition(anchorPosition);

  if (!transformElOrigin || transformElOrigin.vertical === 'top') {
    stylePosition.top += point.top;
  } else if (transformElOrigin.vertical === 'bottom') {
    stylePosition.bottom = window.document.body.clientHeight - point.top - stylePosition.top;
    delete stylePosition.top;
  }

  if (!transformElOrigin || transformElOrigin.horizontal === 'left') {
    stylePosition.left += point.left;
  } else if (transformElOrigin.horizontal === 'right') {
    stylePosition.right = window.document.body.clientWidth - point.left - stylePosition.left;
    delete stylePosition.left;
  } // In case of fixed positioning within a transformed parent we need to remove left as it is relative


  if (hasParentWithTransform(resolvedAnchorEl)) {
    delete stylePosition.left;
  }

  return stylePosition;
};

var getFixedPosition = function getFixedPosition(itemRef, anchorEl, anchorElOrigin, transformElOrigin, anchorPosition) {
  var _itemRef$current2;

  var menuRectangle = itemRef === null || itemRef === void 0 ? void 0 : (_itemRef$current2 = itemRef.current) === null || _itemRef$current2 === void 0 ? void 0 : _itemRef$current2.getBoundingClientRect();
  var resolvedAnchorEl = anchorEl && anchorEl.current ? anchorEl.current : anchorEl;
  var stylePosition;

  if (resolvedAnchorEl) {
    stylePosition = getPositionRelativeToEl(resolvedAnchorEl, anchorElOrigin, transformElOrigin, anchorPosition);

    if (stylePosition.left && stylePosition.left + menuRectangle.width > window.document.body.clientWidth && anchorElOrigin.horizontal === 'right') {
      stylePosition = getPositionRelativeToEl(resolvedAnchorEl, _objectSpread(_objectSpread({}, anchorElOrigin), {}, {
        horizontal: 'left'
      }), _objectSpread(_objectSpread({}, transformElOrigin), {}, {
        horizontal: 'right'
      }), anchorPosition);
    }

    if (stylePosition.top && stylePosition.top + menuRectangle.height > window.document.body.clientHeight && anchorElOrigin.vertical === 'bottom') {
      stylePosition = getPositionRelativeToEl(resolvedAnchorEl, _objectSpread(_objectSpread({}, anchorElOrigin), {}, {
        vertical: 'top'
      }), _objectSpread(_objectSpread({}, transformElOrigin), {}, {
        vertical: 'bottom'
      }), anchorPosition);
    }
  } else {
    stylePosition = getPosition(anchorPosition);
  }

  if (stylePosition.left && stylePosition.left + menuRectangle.width > window.document.body.clientWidth) {
    stylePosition.left = window.document.body.clientWidth - menuRectangle.width;
  }

  if (stylePosition.top && stylePosition.top + menuRectangle.height > window.document.body.clientHeight) {
    stylePosition.top = window.document.body.clientHeight - menuRectangle.height;
  }

  return _objectSpread(_objectSpread({}, stylePosition), {}, {
    position: 'fixed'
  });
};

var hasTransform = function hasTransform(resolvedAnchorEl) {
  if (hasParentWithTransform(resolvedAnchorEl)) {
    var transform = resolvedAnchorEl.closest('[style*="transform"]').style.transform;
    return !(transform === 'translate(0px, 0px)' || transform === 'translate(0px)');
  }

  return false;
};

var hasParentWithTransform = function hasParentWithTransform(resolvedAnchorEl) {
  return resolvedAnchorEl && resolvedAnchorEl.closest && resolvedAnchorEl.closest('[style*="transform"]');
};

export var usePositioning = function usePositioning(isDisplayed, anchorPosition, anchorEl, anchorElOrigin, transformElOrigin, position) {
  var _useState = useState(initialPosition),
      _useState2 = _slicedToArray(_useState, 2),
      stylePosition = _useState2[0],
      setStylePosition = _useState2[1];

  var itemRef = useRef(null);
  useEffect(function () {
    if (isDisplayed) {
      var resolvedAnchorEl = anchorEl && anchorEl.current ? anchorEl.current : anchorEl;

      var _stylePosition = position === 'absolute' || hasTransform(resolvedAnchorEl) ? getAbsolutePosition(itemRef, anchorElOrigin, transformElOrigin, anchorPosition) : getFixedPosition(itemRef, anchorEl, anchorElOrigin, transformElOrigin, anchorPosition);

      setStylePosition(_stylePosition);
    } else {
      setStylePosition(initialPosition);
    }
  }, [anchorEl, anchorPosition, anchorElOrigin.vertical, anchorElOrigin.horizontal, isDisplayed, itemRef, anchorElOrigin, transformElOrigin, position]);
  return [stylePosition, itemRef];
};
//# sourceMappingURL=usePositioning.js.map
